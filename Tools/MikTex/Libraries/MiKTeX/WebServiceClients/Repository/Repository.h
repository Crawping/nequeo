// Reminder: Modify typemap.dat to customize the header file generated by wsdl2h
/* Repository.h
   Generated by wsdl2h 2.8.29 from http://api.miktex.org/Repository.asmx?WSDL and typemap.dat
   2016-03-02 19:48:13 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on Repository.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   To build with STL, 'stl.h' is imported from 'import' dir in package.
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://miktex.org/2015/08/repository                                     *
 *                                                                            *
\******************************************************************************/

/* WSDL Documentation:

Retrieve information about the MiKTeX package repositories.
*/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/

#import "stl.h"	// enable STL containers when used (option -s removes STL dependency)

/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

mtrep7 = "http://miktex.org/2015/08/repository"
mtrep = "http://miktex.org/2006/06/repository"
mtrep2 = "http://miktex.org/2007/03/repository"
mtrep3 = "http://miktex.org/2007/07/repository"
mtrep4 = "http://miktex.org/2007/10/repository"
mtrep5 = "http://miktex.org/2008/05/repository"
mtrep6 = "http://miktex.org/2015/06/repository"

*/

#define SOAP_NAMESPACE_OF_mtrep	"http://miktex.org/2006/06/repository"
//gsoap mtrep schema namespace:	http://miktex.org/2006/06/repository
//gsoap mtrep schema elementForm:	qualified
//gsoap mtrep schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep2	"http://miktex.org/2007/03/repository"
//gsoap mtrep2 schema namespace:	http://miktex.org/2007/03/repository
//gsoap mtrep2 schema elementForm:	qualified
//gsoap mtrep2 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep3	"http://miktex.org/2007/07/repository"
//gsoap mtrep3 schema namespace:	http://miktex.org/2007/07/repository
//gsoap mtrep3 schema elementForm:	qualified
//gsoap mtrep3 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep4	"http://miktex.org/2007/10/repository"
//gsoap mtrep4 schema namespace:	http://miktex.org/2007/10/repository
//gsoap mtrep4 schema elementForm:	qualified
//gsoap mtrep4 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep5	"http://miktex.org/2008/05/repository"
//gsoap mtrep5 schema namespace:	http://miktex.org/2008/05/repository
//gsoap mtrep5 schema elementForm:	qualified
//gsoap mtrep5 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep6	"http://miktex.org/2015/06/repository"
//gsoap mtrep6 schema namespace:	http://miktex.org/2015/06/repository
//gsoap mtrep6 schema elementForm:	qualified
//gsoap mtrep6 schema attributeForm:	unqualified

#define SOAP_NAMESPACE_OF_mtrep7	"http://miktex.org/2015/08/repository"
//gsoap mtrep7 schema namespace:	http://miktex.org/2015/08/repository
//gsoap mtrep7 schema elementForm:	qualified
//gsoap mtrep7 schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class mtrep__RepositoryInfo.
class mtrep__RepositoryInfo;

//  Forward declaration of class mtrep__ArrayOfRepositoryInfo.
class mtrep__ArrayOfRepositoryInfo;

//  Forward declaration of class _mtrep__TryGetRepositoryInfo.
class _mtrep__TryGetRepositoryInfo;

//  Forward declaration of class _mtrep__TryGetRepositoryInfoResponse.
class _mtrep__TryGetRepositoryInfoResponse;

//  Forward declaration of class _mtrep__PickRepository.
class _mtrep__PickRepository;

//  Forward declaration of class _mtrep__PickRepositoryResponse.
class _mtrep__PickRepositoryResponse;

//  Forward declaration of class _mtrep__GetAllRepositories.
class _mtrep__GetAllRepositories;

//  Forward declaration of class _mtrep__GetAllRepositoriesResponse.
class _mtrep__GetAllRepositoriesResponse;

//  Forward declaration of class _mtrep__GetRepositories.
class _mtrep__GetRepositories;

//  Forward declaration of class _mtrep__GetRepositoriesResponse.
class _mtrep__GetRepositoriesResponse;

//  Forward declaration of class _mtrep2__GetListCreationTime.
class _mtrep2__GetListCreationTime;

//  Forward declaration of class _mtrep2__GetListCreationTimeResponse.
class _mtrep2__GetListCreationTimeResponse;

//  Forward declaration of class mtrep3__ClientInfo.
class mtrep3__ClientInfo;

//  Forward declaration of class mtrep3__ArrayOfRepositoryInfo.
class mtrep3__ArrayOfRepositoryInfo;

//  Forward declaration of class mtrep3__RepositoryInfo.
class mtrep3__RepositoryInfo;

//  Forward declaration of class _mtrep3__GetRepositories2.
class _mtrep3__GetRepositories2;

//  Forward declaration of class _mtrep3__GetRepositories2Response.
class _mtrep3__GetRepositories2Response;

//  Forward declaration of class _mtrep3__PickRepository2.
class _mtrep3__PickRepository2;

//  Forward declaration of class _mtrep3__PickRepository2Response.
class _mtrep3__PickRepository2Response;

//  Forward declaration of class _mtrep3__TryGetRepositoryInfo2.
class _mtrep3__TryGetRepositoryInfo2;

//  Forward declaration of class _mtrep3__TryGetRepositoryInfo2Response.
class _mtrep3__TryGetRepositoryInfo2Response;

//  Forward declaration of class mtrep4__ClientInfo.
class mtrep4__ClientInfo;

//  Forward declaration of class mtrep4__RepositoryInfo.
class mtrep4__RepositoryInfo;

//  Forward declaration of class _mtrep4__VerifyRepository.
class _mtrep4__VerifyRepository;

//  Forward declaration of class _mtrep4__VerifyRepositoryResponse.
class _mtrep4__VerifyRepositoryResponse;

//  Forward declaration of class mtrep5__ClientInfo.
class mtrep5__ClientInfo;

//  Forward declaration of class mtrep5__ArrayOfRepositoryInfo2.
class mtrep5__ArrayOfRepositoryInfo2;

//  Forward declaration of class mtrep5__RepositoryInfo2.
class mtrep5__RepositoryInfo2;

//  Forward declaration of class mtrep5__RepositoryInfo.
class mtrep5__RepositoryInfo;

//  Forward declaration of class _mtrep5__GetRepositories3.
class _mtrep5__GetRepositories3;

//  Forward declaration of class _mtrep5__GetRepositories3Response.
class _mtrep5__GetRepositories3Response;

//  Forward declaration of class _mtrep5__PickRepository3.
class _mtrep5__PickRepository3;

//  Forward declaration of class _mtrep5__PickRepository3Response.
class _mtrep5__PickRepository3Response;

//  Forward declaration of class mtrep6__ClientInfo.
class mtrep6__ClientInfo;

//  Forward declaration of class mtrep6__ArrayOfRepositoryInfo3.
class mtrep6__ArrayOfRepositoryInfo3;

//  Forward declaration of class mtrep6__RepositoryInfo3.
class mtrep6__RepositoryInfo3;

//  Forward declaration of class mtrep6__RepositoryInfo2.
class mtrep6__RepositoryInfo2;

//  Forward declaration of class mtrep6__RepositoryInfo.
class mtrep6__RepositoryInfo;

//  Forward declaration of class _mtrep6__GetRepositories4.
class _mtrep6__GetRepositories4;

//  Forward declaration of class _mtrep6__GetRepositories4Response.
class _mtrep6__GetRepositories4Response;

//  Forward declaration of class _mtrep6__PickRepository4.
class _mtrep6__PickRepository4;

//  Forward declaration of class _mtrep6__PickRepository4Response.
class _mtrep6__PickRepository4Response;

//  Forward declaration of class mtrep7__ClientInfo.
class mtrep7__ClientInfo;

//  Forward declaration of class mtrep7__RepositoryInfo3.
class mtrep7__RepositoryInfo3;

//  Forward declaration of class mtrep7__RepositoryInfo2.
class mtrep7__RepositoryInfo2;

//  Forward declaration of class mtrep7__RepositoryInfo.
class mtrep7__RepositoryInfo;

//  Forward declaration of class _mtrep7__VerifyRepository2.
class _mtrep7__VerifyRepository2;

//  Forward declaration of class _mtrep7__VerifyRepository2Response.
class _mtrep7__VerifyRepository2Response;

//  Forward declaration of class _mtrep7__TryGetRepositoryInfo3.
class _mtrep7__TryGetRepositoryInfo3;

//  Forward declaration of class _mtrep7__TryGetRepositoryInfo3Response.
class _mtrep7__TryGetRepositoryInfo3Response;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2015/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2015/08/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2006/06/repository":RepositoryIntegrity is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep__RepositoryIntegrity__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep__RepositoryIntegrity
{
	mtrep__RepositoryIntegrity__Intact,	///< xs:string value="Intact"
	mtrep__RepositoryIntegrity__Corrupted,	///< xs:string value="Corrupted"
	mtrep__RepositoryIntegrity__Unknown,	///< xs:string value="Unknown"
};

/// @brief "http://miktex.org/2006/06/repository":PackageLevel is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep__PackageLevel__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep__PackageLevel
{
	mtrep__PackageLevel__Essential,	///< xs:string value="Essential"
	mtrep__PackageLevel__Basic,	///< xs:string value="Basic"
	mtrep__PackageLevel__Advanced,	///< xs:string value="Advanced"
	mtrep__PackageLevel__Complete,	///< xs:string value="Complete"
};

/// @brief "http://miktex.org/2006/06/repository":RepositoryStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep__RepositoryStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep__RepositoryStatus
{
	mtrep__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2007/07/repository":RepositoryIntegrity is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep3__RepositoryIntegrity__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep3__RepositoryIntegrity
{
	mtrep3__RepositoryIntegrity__Intact,	///< xs:string value="Intact"
	mtrep3__RepositoryIntegrity__Corrupted,	///< xs:string value="Corrupted"
	mtrep3__RepositoryIntegrity__Unknown,	///< xs:string value="Unknown"
};

/// @brief "http://miktex.org/2007/07/repository":PackageLevel is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep3__PackageLevel__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep3__PackageLevel
{
	mtrep3__PackageLevel__Essential,	///< xs:string value="Essential"
	mtrep3__PackageLevel__Basic,	///< xs:string value="Basic"
	mtrep3__PackageLevel__Advanced,	///< xs:string value="Advanced"
	mtrep3__PackageLevel__Complete,	///< xs:string value="Complete"
};

/// @brief "http://miktex.org/2007/07/repository":RepositoryStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep3__RepositoryStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep3__RepositoryStatus
{
	mtrep3__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep3__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep3__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2007/10/repository":RepositoryIntegrity is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep4__RepositoryIntegrity__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep4__RepositoryIntegrity
{
	mtrep4__RepositoryIntegrity__Intact,	///< xs:string value="Intact"
	mtrep4__RepositoryIntegrity__Corrupted,	///< xs:string value="Corrupted"
	mtrep4__RepositoryIntegrity__Unknown,	///< xs:string value="Unknown"
};

/// @brief "http://miktex.org/2007/10/repository":PackageLevel is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep4__PackageLevel__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep4__PackageLevel
{
	mtrep4__PackageLevel__Essential,	///< xs:string value="Essential"
	mtrep4__PackageLevel__Basic,	///< xs:string value="Basic"
	mtrep4__PackageLevel__Advanced,	///< xs:string value="Advanced"
	mtrep4__PackageLevel__Complete,	///< xs:string value="Complete"
};

/// @brief "http://miktex.org/2007/10/repository":RepositoryStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep4__RepositoryStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep4__RepositoryStatus
{
	mtrep4__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep4__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep4__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2008/05/repository":RepositoryIntegrity is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep5__RepositoryIntegrity__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep5__RepositoryIntegrity
{
	mtrep5__RepositoryIntegrity__Intact,	///< xs:string value="Intact"
	mtrep5__RepositoryIntegrity__Corrupted,	///< xs:string value="Corrupted"
	mtrep5__RepositoryIntegrity__Unknown,	///< xs:string value="Unknown"
};

/// @brief "http://miktex.org/2008/05/repository":PackageLevel is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep5__PackageLevel__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep5__PackageLevel
{
	mtrep5__PackageLevel__Essential,	///< xs:string value="Essential"
	mtrep5__PackageLevel__Basic,	///< xs:string value="Basic"
	mtrep5__PackageLevel__Advanced,	///< xs:string value="Advanced"
	mtrep5__PackageLevel__Complete,	///< xs:string value="Complete"
};

/// @brief "http://miktex.org/2008/05/repository":RepositoryStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep5__RepositoryStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep5__RepositoryStatus
{
	mtrep5__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep5__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep5__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2015/06/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2015/06/repository":RepositoryReleaseState is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep6__RepositoryReleaseState__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep6__RepositoryReleaseState
{
	mtrep6__RepositoryReleaseState__Stable,	///< xs:string value="Stable"
	mtrep6__RepositoryReleaseState__Next,	///< xs:string value="Next"
};

/// @brief "http://miktex.org/2015/06/repository":RepositoryIntegrity is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep6__RepositoryIntegrity__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep6__RepositoryIntegrity
{
	mtrep6__RepositoryIntegrity__Intact,	///< xs:string value="Intact"
	mtrep6__RepositoryIntegrity__Corrupted,	///< xs:string value="Corrupted"
	mtrep6__RepositoryIntegrity__Unknown,	///< xs:string value="Unknown"
};

/// @brief "http://miktex.org/2015/06/repository":PackageLevel is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep6__PackageLevel__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep6__PackageLevel
{
	mtrep6__PackageLevel__Essential,	///< xs:string value="Essential"
	mtrep6__PackageLevel__Basic,	///< xs:string value="Basic"
	mtrep6__PackageLevel__Advanced,	///< xs:string value="Advanced"
	mtrep6__PackageLevel__Complete,	///< xs:string value="Complete"
};

/// @brief "http://miktex.org/2015/06/repository":RepositoryStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep6__RepositoryStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep6__RepositoryStatus
{
	mtrep6__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep6__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep6__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2015/08/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2015/08/repository":RepositoryIntegrity is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep7__RepositoryIntegrity__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep7__RepositoryIntegrity
{
	mtrep7__RepositoryIntegrity__Intact,	///< xs:string value="Intact"
	mtrep7__RepositoryIntegrity__Corrupted,	///< xs:string value="Corrupted"
	mtrep7__RepositoryIntegrity__Unknown,	///< xs:string value="Unknown"
};

/// @brief "http://miktex.org/2015/08/repository":PackageLevel is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep7__PackageLevel__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep7__PackageLevel
{
	mtrep7__PackageLevel__Essential,	///< xs:string value="Essential"
	mtrep7__PackageLevel__Basic,	///< xs:string value="Basic"
	mtrep7__PackageLevel__Advanced,	///< xs:string value="Advanced"
	mtrep7__PackageLevel__Complete,	///< xs:string value="Complete"
};

/// @brief "http://miktex.org/2015/08/repository":RepositoryStatus is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep7__RepositoryStatus__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep7__RepositoryStatus
{
	mtrep7__RepositoryStatus__Online,	///< xs:string value="Online"
	mtrep7__RepositoryStatus__Offline,	///< xs:string value="Offline"
	mtrep7__RepositoryStatus__Unknown,	///< xs:string value="Unknown"
};

/// @brief "http://miktex.org/2015/08/repository":RepositoryReleaseState is a simpleType restriction of XSD type xs:string.
///
/// @note The enum values are prefixed with "mtrep7__RepositoryReleaseState__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum mtrep7__RepositoryReleaseState
{
	mtrep7__RepositoryReleaseState__Stable,	///< xs:string value="Stable"
	mtrep7__RepositoryReleaseState__Next,	///< xs:string value="Next"
};


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://miktex.org/2015/08/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2006/06/repository":RepositoryInfo is a complexType.
///
/// class mtrep__RepositoryInfo operations:
/// - mtrep__RepositoryInfo* soap_new_mtrep__RepositoryInfo(soap*) allocate
/// - mtrep__RepositoryInfo* soap_new_mtrep__RepositoryInfo(soap*, int num) allocate array
/// - mtrep__RepositoryInfo* soap_new_req_mtrep__RepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep__RepositoryInfo* soap_new_set_mtrep__RepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep__RepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep__RepositoryInfo(soap*, mtrep__RepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep__RepositoryInfo(soap*, mtrep__RepositoryInfo*) serialize to a stream
/// - mtrep__RepositoryInfo* mtrep__RepositoryInfo::soap_dup(soap*) returns deep copy of mtrep__RepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep__RepositoryInfo::soap_del() deep deletes mtrep__RepositoryInfo data members, use only after mtrep__RepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep__RepositoryInfo
{ public:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2006/06/repository":RepositoryIntegrity.
    enum mtrep__RepositoryIntegrity      Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2006/06/repository":PackageLevel.
    enum mtrep__PackageLevel             Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2006/06/repository":RepositoryStatus.
    enum mtrep__RepositoryStatus         Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2006/06/repository":ArrayOfRepositoryInfo is a complexType.
///
/// class mtrep__ArrayOfRepositoryInfo operations:
/// - mtrep__ArrayOfRepositoryInfo* soap_new_mtrep__ArrayOfRepositoryInfo(soap*) allocate
/// - mtrep__ArrayOfRepositoryInfo* soap_new_mtrep__ArrayOfRepositoryInfo(soap*, int num) allocate array
/// - mtrep__ArrayOfRepositoryInfo* soap_new_req_mtrep__ArrayOfRepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep__ArrayOfRepositoryInfo* soap_new_set_mtrep__ArrayOfRepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep__ArrayOfRepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep__ArrayOfRepositoryInfo(soap*, mtrep__ArrayOfRepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep__ArrayOfRepositoryInfo(soap*, mtrep__ArrayOfRepositoryInfo*) serialize to a stream
/// - mtrep__ArrayOfRepositoryInfo* mtrep__ArrayOfRepositoryInfo::soap_dup(soap*) returns deep copy of mtrep__ArrayOfRepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep__ArrayOfRepositoryInfo::soap_del() deep deletes mtrep__ArrayOfRepositoryInfo data members, use only after mtrep__ArrayOfRepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep__ArrayOfRepositoryInfo
{ public:
/// Vector of mtrep__RepositoryInfo* of length 0..unbounded.
    std::vector<mtrep__RepositoryInfo* > RepositoryInfo                 0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":TryGetRepositoryInfo
/// @brief "http://miktex.org/2006/06/repository":TryGetRepositoryInfo is a complexType.
///
/// class _mtrep__TryGetRepositoryInfo operations:
/// - _mtrep__TryGetRepositoryInfo* soap_new__mtrep__TryGetRepositoryInfo(soap*) allocate
/// - _mtrep__TryGetRepositoryInfo* soap_new__mtrep__TryGetRepositoryInfo(soap*, int num) allocate array
/// - _mtrep__TryGetRepositoryInfo* soap_new_req__mtrep__TryGetRepositoryInfo(soap*, ...) allocate, set required members
/// - _mtrep__TryGetRepositoryInfo* soap_new_set__mtrep__TryGetRepositoryInfo(soap*, ...) allocate, set all public members
/// - _mtrep__TryGetRepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__TryGetRepositoryInfo(soap*, _mtrep__TryGetRepositoryInfo*) deserialize from a stream
/// - int soap_write__mtrep__TryGetRepositoryInfo(soap*, _mtrep__TryGetRepositoryInfo*) serialize to a stream
/// - _mtrep__TryGetRepositoryInfo* _mtrep__TryGetRepositoryInfo::soap_dup(soap*) returns deep copy of _mtrep__TryGetRepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__TryGetRepositoryInfo::soap_del() deep deletes _mtrep__TryGetRepositoryInfo data members, use only after _mtrep__TryGetRepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__TryGetRepositoryInfo
{ public:
/// Element "url" of XSD type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":TryGetRepositoryInfoResponse
/// @brief "http://miktex.org/2006/06/repository":TryGetRepositoryInfoResponse is a complexType.
///
/// class _mtrep__TryGetRepositoryInfoResponse operations:
/// - _mtrep__TryGetRepositoryInfoResponse* soap_new__mtrep__TryGetRepositoryInfoResponse(soap*) allocate
/// - _mtrep__TryGetRepositoryInfoResponse* soap_new__mtrep__TryGetRepositoryInfoResponse(soap*, int num) allocate array
/// - _mtrep__TryGetRepositoryInfoResponse* soap_new_req__mtrep__TryGetRepositoryInfoResponse(soap*, ...) allocate, set required members
/// - _mtrep__TryGetRepositoryInfoResponse* soap_new_set__mtrep__TryGetRepositoryInfoResponse(soap*, ...) allocate, set all public members
/// - _mtrep__TryGetRepositoryInfoResponse::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__TryGetRepositoryInfoResponse(soap*, _mtrep__TryGetRepositoryInfoResponse*) deserialize from a stream
/// - int soap_write__mtrep__TryGetRepositoryInfoResponse(soap*, _mtrep__TryGetRepositoryInfoResponse*) serialize to a stream
/// - _mtrep__TryGetRepositoryInfoResponse* _mtrep__TryGetRepositoryInfoResponse::soap_dup(soap*) returns deep copy of _mtrep__TryGetRepositoryInfoResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__TryGetRepositoryInfoResponse::soap_del() deep deletes _mtrep__TryGetRepositoryInfoResponse data members, use only after _mtrep__TryGetRepositoryInfoResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__TryGetRepositoryInfoResponse
{ public:
/// Element "TryGetRepositoryInfoResult" of XSD type xs:boolean.
    bool                                 TryGetRepositoryInfoResult     1;	///< Required element.
/// Element "repositoryInfo" of XSD type "http://miktex.org/2006/06/repository":RepositoryInfo.
    mtrep__RepositoryInfo*               repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":PickRepository
/// @brief "http://miktex.org/2006/06/repository":PickRepository is a complexType.
///
/// class _mtrep__PickRepository operations:
/// - _mtrep__PickRepository* soap_new__mtrep__PickRepository(soap*) allocate
/// - _mtrep__PickRepository* soap_new__mtrep__PickRepository(soap*, int num) allocate array
/// - _mtrep__PickRepository* soap_new_req__mtrep__PickRepository(soap*, ...) allocate, set required members
/// - _mtrep__PickRepository* soap_new_set__mtrep__PickRepository(soap*, ...) allocate, set all public members
/// - _mtrep__PickRepository::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__PickRepository(soap*, _mtrep__PickRepository*) deserialize from a stream
/// - int soap_write__mtrep__PickRepository(soap*, _mtrep__PickRepository*) serialize to a stream
/// - _mtrep__PickRepository* _mtrep__PickRepository::soap_dup(soap*) returns deep copy of _mtrep__PickRepository, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__PickRepository::soap_del() deep deletes _mtrep__PickRepository data members, use only after _mtrep__PickRepository::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__PickRepository
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":PickRepositoryResponse
/// @brief "http://miktex.org/2006/06/repository":PickRepositoryResponse is a complexType.
///
/// class _mtrep__PickRepositoryResponse operations:
/// - _mtrep__PickRepositoryResponse* soap_new__mtrep__PickRepositoryResponse(soap*) allocate
/// - _mtrep__PickRepositoryResponse* soap_new__mtrep__PickRepositoryResponse(soap*, int num) allocate array
/// - _mtrep__PickRepositoryResponse* soap_new_req__mtrep__PickRepositoryResponse(soap*, ...) allocate, set required members
/// - _mtrep__PickRepositoryResponse* soap_new_set__mtrep__PickRepositoryResponse(soap*, ...) allocate, set all public members
/// - _mtrep__PickRepositoryResponse::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__PickRepositoryResponse(soap*, _mtrep__PickRepositoryResponse*) deserialize from a stream
/// - int soap_write__mtrep__PickRepositoryResponse(soap*, _mtrep__PickRepositoryResponse*) serialize to a stream
/// - _mtrep__PickRepositoryResponse* _mtrep__PickRepositoryResponse::soap_dup(soap*) returns deep copy of _mtrep__PickRepositoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__PickRepositoryResponse::soap_del() deep deletes _mtrep__PickRepositoryResponse data members, use only after _mtrep__PickRepositoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__PickRepositoryResponse
{ public:
/// Element "PickRepositoryResult" of XSD type "http://miktex.org/2006/06/repository":RepositoryInfo.
    mtrep__RepositoryInfo*               PickRepositoryResult           0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":GetAllRepositories
/// @brief "http://miktex.org/2006/06/repository":GetAllRepositories is a complexType.
///
/// class _mtrep__GetAllRepositories operations:
/// - _mtrep__GetAllRepositories* soap_new__mtrep__GetAllRepositories(soap*) allocate
/// - _mtrep__GetAllRepositories* soap_new__mtrep__GetAllRepositories(soap*, int num) allocate array
/// - _mtrep__GetAllRepositories* soap_new_req__mtrep__GetAllRepositories(soap*, ...) allocate, set required members
/// - _mtrep__GetAllRepositories* soap_new_set__mtrep__GetAllRepositories(soap*, ...) allocate, set all public members
/// - _mtrep__GetAllRepositories::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__GetAllRepositories(soap*, _mtrep__GetAllRepositories*) deserialize from a stream
/// - int soap_write__mtrep__GetAllRepositories(soap*, _mtrep__GetAllRepositories*) serialize to a stream
/// - _mtrep__GetAllRepositories* _mtrep__GetAllRepositories::soap_dup(soap*) returns deep copy of _mtrep__GetAllRepositories, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__GetAllRepositories::soap_del() deep deletes _mtrep__GetAllRepositories data members, use only after _mtrep__GetAllRepositories::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__GetAllRepositories
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":GetAllRepositoriesResponse
/// @brief "http://miktex.org/2006/06/repository":GetAllRepositoriesResponse is a complexType.
///
/// class _mtrep__GetAllRepositoriesResponse operations:
/// - _mtrep__GetAllRepositoriesResponse* soap_new__mtrep__GetAllRepositoriesResponse(soap*) allocate
/// - _mtrep__GetAllRepositoriesResponse* soap_new__mtrep__GetAllRepositoriesResponse(soap*, int num) allocate array
/// - _mtrep__GetAllRepositoriesResponse* soap_new_req__mtrep__GetAllRepositoriesResponse(soap*, ...) allocate, set required members
/// - _mtrep__GetAllRepositoriesResponse* soap_new_set__mtrep__GetAllRepositoriesResponse(soap*, ...) allocate, set all public members
/// - _mtrep__GetAllRepositoriesResponse::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__GetAllRepositoriesResponse(soap*, _mtrep__GetAllRepositoriesResponse*) deserialize from a stream
/// - int soap_write__mtrep__GetAllRepositoriesResponse(soap*, _mtrep__GetAllRepositoriesResponse*) serialize to a stream
/// - _mtrep__GetAllRepositoriesResponse* _mtrep__GetAllRepositoriesResponse::soap_dup(soap*) returns deep copy of _mtrep__GetAllRepositoriesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__GetAllRepositoriesResponse::soap_del() deep deletes _mtrep__GetAllRepositoriesResponse data members, use only after _mtrep__GetAllRepositoriesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__GetAllRepositoriesResponse
{ public:
/// Element "GetAllRepositoriesResult" of XSD type "http://miktex.org/2006/06/repository":ArrayOfRepositoryInfo.
    mtrep__ArrayOfRepositoryInfo*        GetAllRepositoriesResult       0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":GetRepositories
/// @brief "http://miktex.org/2006/06/repository":GetRepositories is a complexType.
///
/// class _mtrep__GetRepositories operations:
/// - _mtrep__GetRepositories* soap_new__mtrep__GetRepositories(soap*) allocate
/// - _mtrep__GetRepositories* soap_new__mtrep__GetRepositories(soap*, int num) allocate array
/// - _mtrep__GetRepositories* soap_new_req__mtrep__GetRepositories(soap*, ...) allocate, set required members
/// - _mtrep__GetRepositories* soap_new_set__mtrep__GetRepositories(soap*, ...) allocate, set all public members
/// - _mtrep__GetRepositories::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__GetRepositories(soap*, _mtrep__GetRepositories*) deserialize from a stream
/// - int soap_write__mtrep__GetRepositories(soap*, _mtrep__GetRepositories*) serialize to a stream
/// - _mtrep__GetRepositories* _mtrep__GetRepositories::soap_dup(soap*) returns deep copy of _mtrep__GetRepositories, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__GetRepositories::soap_del() deep deletes _mtrep__GetRepositories data members, use only after _mtrep__GetRepositories::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__GetRepositories
{ public:
/// Element "onlyOnline" of XSD type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element "noCorrupted" of XSD type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element "maxDelay" of XSD type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2006/06/repository":GetRepositoriesResponse
/// @brief "http://miktex.org/2006/06/repository":GetRepositoriesResponse is a complexType.
///
/// class _mtrep__GetRepositoriesResponse operations:
/// - _mtrep__GetRepositoriesResponse* soap_new__mtrep__GetRepositoriesResponse(soap*) allocate
/// - _mtrep__GetRepositoriesResponse* soap_new__mtrep__GetRepositoriesResponse(soap*, int num) allocate array
/// - _mtrep__GetRepositoriesResponse* soap_new_req__mtrep__GetRepositoriesResponse(soap*, ...) allocate, set required members
/// - _mtrep__GetRepositoriesResponse* soap_new_set__mtrep__GetRepositoriesResponse(soap*, ...) allocate, set all public members
/// - _mtrep__GetRepositoriesResponse::soap_default(soap*) reset members to default
/// - int soap_read__mtrep__GetRepositoriesResponse(soap*, _mtrep__GetRepositoriesResponse*) deserialize from a stream
/// - int soap_write__mtrep__GetRepositoriesResponse(soap*, _mtrep__GetRepositoriesResponse*) serialize to a stream
/// - _mtrep__GetRepositoriesResponse* _mtrep__GetRepositoriesResponse::soap_dup(soap*) returns deep copy of _mtrep__GetRepositoriesResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep__GetRepositoriesResponse::soap_del() deep deletes _mtrep__GetRepositoriesResponse data members, use only after _mtrep__GetRepositoriesResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep__GetRepositoriesResponse
{ public:
/// Element "GetRepositoriesResult" of XSD type "http://miktex.org/2006/06/repository":ArrayOfRepositoryInfo.
    mtrep__ArrayOfRepositoryInfo*        GetRepositoriesResult          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://miktex.org/2007/03/repository":GetListCreationTime
/// @brief "http://miktex.org/2007/03/repository":GetListCreationTime is a complexType.
///
/// class _mtrep2__GetListCreationTime operations:
/// - _mtrep2__GetListCreationTime* soap_new__mtrep2__GetListCreationTime(soap*) allocate
/// - _mtrep2__GetListCreationTime* soap_new__mtrep2__GetListCreationTime(soap*, int num) allocate array
/// - _mtrep2__GetListCreationTime* soap_new_req__mtrep2__GetListCreationTime(soap*, ...) allocate, set required members
/// - _mtrep2__GetListCreationTime* soap_new_set__mtrep2__GetListCreationTime(soap*, ...) allocate, set all public members
/// - _mtrep2__GetListCreationTime::soap_default(soap*) reset members to default
/// - int soap_read__mtrep2__GetListCreationTime(soap*, _mtrep2__GetListCreationTime*) deserialize from a stream
/// - int soap_write__mtrep2__GetListCreationTime(soap*, _mtrep2__GetListCreationTime*) serialize to a stream
/// - _mtrep2__GetListCreationTime* _mtrep2__GetListCreationTime::soap_dup(soap*) returns deep copy of _mtrep2__GetListCreationTime, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep2__GetListCreationTime::soap_del() deep deletes _mtrep2__GetListCreationTime data members, use only after _mtrep2__GetListCreationTime::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep2__GetListCreationTime
{ public:
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/03/repository":GetListCreationTimeResponse
/// @brief "http://miktex.org/2007/03/repository":GetListCreationTimeResponse is a complexType.
///
/// class _mtrep2__GetListCreationTimeResponse operations:
/// - _mtrep2__GetListCreationTimeResponse* soap_new__mtrep2__GetListCreationTimeResponse(soap*) allocate
/// - _mtrep2__GetListCreationTimeResponse* soap_new__mtrep2__GetListCreationTimeResponse(soap*, int num) allocate array
/// - _mtrep2__GetListCreationTimeResponse* soap_new_req__mtrep2__GetListCreationTimeResponse(soap*, ...) allocate, set required members
/// - _mtrep2__GetListCreationTimeResponse* soap_new_set__mtrep2__GetListCreationTimeResponse(soap*, ...) allocate, set all public members
/// - _mtrep2__GetListCreationTimeResponse::soap_default(soap*) reset members to default
/// - int soap_read__mtrep2__GetListCreationTimeResponse(soap*, _mtrep2__GetListCreationTimeResponse*) deserialize from a stream
/// - int soap_write__mtrep2__GetListCreationTimeResponse(soap*, _mtrep2__GetListCreationTimeResponse*) serialize to a stream
/// - _mtrep2__GetListCreationTimeResponse* _mtrep2__GetListCreationTimeResponse::soap_dup(soap*) returns deep copy of _mtrep2__GetListCreationTimeResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep2__GetListCreationTimeResponse::soap_del() deep deletes _mtrep2__GetListCreationTimeResponse data members, use only after _mtrep2__GetListCreationTimeResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep2__GetListCreationTimeResponse
{ public:
/// Element "GetListCreationTimeResult" of XSD type xs:int.
    int                                  GetListCreationTimeResult      1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2007/07/repository":ClientInfo is a complexType.
///
/// class mtrep3__ClientInfo operations:
/// - mtrep3__ClientInfo* soap_new_mtrep3__ClientInfo(soap*) allocate
/// - mtrep3__ClientInfo* soap_new_mtrep3__ClientInfo(soap*, int num) allocate array
/// - mtrep3__ClientInfo* soap_new_req_mtrep3__ClientInfo(soap*, ...) allocate, set required members
/// - mtrep3__ClientInfo* soap_new_set_mtrep3__ClientInfo(soap*, ...) allocate, set all public members
/// - mtrep3__ClientInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep3__ClientInfo(soap*, mtrep3__ClientInfo*) deserialize from a stream
/// - int soap_write_mtrep3__ClientInfo(soap*, mtrep3__ClientInfo*) serialize to a stream
/// - mtrep3__ClientInfo* mtrep3__ClientInfo::soap_dup(soap*) returns deep copy of mtrep3__ClientInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep3__ClientInfo::soap_del() deep deletes mtrep3__ClientInfo data members, use only after mtrep3__ClientInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep3__ClientInfo
{ public:
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2007/07/repository":ArrayOfRepositoryInfo is a complexType.
///
/// class mtrep3__ArrayOfRepositoryInfo operations:
/// - mtrep3__ArrayOfRepositoryInfo* soap_new_mtrep3__ArrayOfRepositoryInfo(soap*) allocate
/// - mtrep3__ArrayOfRepositoryInfo* soap_new_mtrep3__ArrayOfRepositoryInfo(soap*, int num) allocate array
/// - mtrep3__ArrayOfRepositoryInfo* soap_new_req_mtrep3__ArrayOfRepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep3__ArrayOfRepositoryInfo* soap_new_set_mtrep3__ArrayOfRepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep3__ArrayOfRepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep3__ArrayOfRepositoryInfo(soap*, mtrep3__ArrayOfRepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep3__ArrayOfRepositoryInfo(soap*, mtrep3__ArrayOfRepositoryInfo*) serialize to a stream
/// - mtrep3__ArrayOfRepositoryInfo* mtrep3__ArrayOfRepositoryInfo::soap_dup(soap*) returns deep copy of mtrep3__ArrayOfRepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep3__ArrayOfRepositoryInfo::soap_del() deep deletes mtrep3__ArrayOfRepositoryInfo data members, use only after mtrep3__ArrayOfRepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep3__ArrayOfRepositoryInfo
{ public:
/// Vector of mtrep3__RepositoryInfo* of length 0..unbounded.
    std::vector<mtrep3__RepositoryInfo*> RepositoryInfo                 0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2007/07/repository":RepositoryInfo is a complexType.
///
/// class mtrep3__RepositoryInfo operations:
/// - mtrep3__RepositoryInfo* soap_new_mtrep3__RepositoryInfo(soap*) allocate
/// - mtrep3__RepositoryInfo* soap_new_mtrep3__RepositoryInfo(soap*, int num) allocate array
/// - mtrep3__RepositoryInfo* soap_new_req_mtrep3__RepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep3__RepositoryInfo* soap_new_set_mtrep3__RepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep3__RepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep3__RepositoryInfo(soap*, mtrep3__RepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep3__RepositoryInfo(soap*, mtrep3__RepositoryInfo*) serialize to a stream
/// - mtrep3__RepositoryInfo* mtrep3__RepositoryInfo::soap_dup(soap*) returns deep copy of mtrep3__RepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep3__RepositoryInfo::soap_del() deep deletes mtrep3__RepositoryInfo data members, use only after mtrep3__RepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep3__RepositoryInfo
{ public:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2007/07/repository":RepositoryIntegrity.
    enum mtrep3__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2007/07/repository":PackageLevel.
    enum mtrep3__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2007/07/repository":RepositoryStatus.
    enum mtrep3__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/07/repository":GetRepositories2
/// @brief "http://miktex.org/2007/07/repository":GetRepositories2 is a complexType.
///
/// class _mtrep3__GetRepositories2 operations:
/// - _mtrep3__GetRepositories2* soap_new__mtrep3__GetRepositories2(soap*) allocate
/// - _mtrep3__GetRepositories2* soap_new__mtrep3__GetRepositories2(soap*, int num) allocate array
/// - _mtrep3__GetRepositories2* soap_new_req__mtrep3__GetRepositories2(soap*, ...) allocate, set required members
/// - _mtrep3__GetRepositories2* soap_new_set__mtrep3__GetRepositories2(soap*, ...) allocate, set all public members
/// - _mtrep3__GetRepositories2::soap_default(soap*) reset members to default
/// - int soap_read__mtrep3__GetRepositories2(soap*, _mtrep3__GetRepositories2*) deserialize from a stream
/// - int soap_write__mtrep3__GetRepositories2(soap*, _mtrep3__GetRepositories2*) serialize to a stream
/// - _mtrep3__GetRepositories2* _mtrep3__GetRepositories2::soap_dup(soap*) returns deep copy of _mtrep3__GetRepositories2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep3__GetRepositories2::soap_del() deep deletes _mtrep3__GetRepositories2 data members, use only after _mtrep3__GetRepositories2::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep3__GetRepositories2
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2007/07/repository":ClientInfo.
    mtrep3__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "onlyOnline" of XSD type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element "noCorrupted" of XSD type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element "maxDelay" of XSD type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/07/repository":GetRepositories2Response
/// @brief "http://miktex.org/2007/07/repository":GetRepositories2Response is a complexType.
///
/// class _mtrep3__GetRepositories2Response operations:
/// - _mtrep3__GetRepositories2Response* soap_new__mtrep3__GetRepositories2Response(soap*) allocate
/// - _mtrep3__GetRepositories2Response* soap_new__mtrep3__GetRepositories2Response(soap*, int num) allocate array
/// - _mtrep3__GetRepositories2Response* soap_new_req__mtrep3__GetRepositories2Response(soap*, ...) allocate, set required members
/// - _mtrep3__GetRepositories2Response* soap_new_set__mtrep3__GetRepositories2Response(soap*, ...) allocate, set all public members
/// - _mtrep3__GetRepositories2Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep3__GetRepositories2Response(soap*, _mtrep3__GetRepositories2Response*) deserialize from a stream
/// - int soap_write__mtrep3__GetRepositories2Response(soap*, _mtrep3__GetRepositories2Response*) serialize to a stream
/// - _mtrep3__GetRepositories2Response* _mtrep3__GetRepositories2Response::soap_dup(soap*) returns deep copy of _mtrep3__GetRepositories2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep3__GetRepositories2Response::soap_del() deep deletes _mtrep3__GetRepositories2Response data members, use only after _mtrep3__GetRepositories2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep3__GetRepositories2Response
{ public:
/// Element "GetRepositories2Result" of XSD type "http://miktex.org/2007/07/repository":ArrayOfRepositoryInfo.
    mtrep3__ArrayOfRepositoryInfo*       GetRepositories2Result         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/07/repository":PickRepository2
/// @brief "http://miktex.org/2007/07/repository":PickRepository2 is a complexType.
///
/// class _mtrep3__PickRepository2 operations:
/// - _mtrep3__PickRepository2* soap_new__mtrep3__PickRepository2(soap*) allocate
/// - _mtrep3__PickRepository2* soap_new__mtrep3__PickRepository2(soap*, int num) allocate array
/// - _mtrep3__PickRepository2* soap_new_req__mtrep3__PickRepository2(soap*, ...) allocate, set required members
/// - _mtrep3__PickRepository2* soap_new_set__mtrep3__PickRepository2(soap*, ...) allocate, set all public members
/// - _mtrep3__PickRepository2::soap_default(soap*) reset members to default
/// - int soap_read__mtrep3__PickRepository2(soap*, _mtrep3__PickRepository2*) deserialize from a stream
/// - int soap_write__mtrep3__PickRepository2(soap*, _mtrep3__PickRepository2*) serialize to a stream
/// - _mtrep3__PickRepository2* _mtrep3__PickRepository2::soap_dup(soap*) returns deep copy of _mtrep3__PickRepository2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep3__PickRepository2::soap_del() deep deletes _mtrep3__PickRepository2 data members, use only after _mtrep3__PickRepository2::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep3__PickRepository2
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2007/07/repository":ClientInfo.
    mtrep3__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/07/repository":PickRepository2Response
/// @brief "http://miktex.org/2007/07/repository":PickRepository2Response is a complexType.
///
/// class _mtrep3__PickRepository2Response operations:
/// - _mtrep3__PickRepository2Response* soap_new__mtrep3__PickRepository2Response(soap*) allocate
/// - _mtrep3__PickRepository2Response* soap_new__mtrep3__PickRepository2Response(soap*, int num) allocate array
/// - _mtrep3__PickRepository2Response* soap_new_req__mtrep3__PickRepository2Response(soap*, ...) allocate, set required members
/// - _mtrep3__PickRepository2Response* soap_new_set__mtrep3__PickRepository2Response(soap*, ...) allocate, set all public members
/// - _mtrep3__PickRepository2Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep3__PickRepository2Response(soap*, _mtrep3__PickRepository2Response*) deserialize from a stream
/// - int soap_write__mtrep3__PickRepository2Response(soap*, _mtrep3__PickRepository2Response*) serialize to a stream
/// - _mtrep3__PickRepository2Response* _mtrep3__PickRepository2Response::soap_dup(soap*) returns deep copy of _mtrep3__PickRepository2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep3__PickRepository2Response::soap_del() deep deletes _mtrep3__PickRepository2Response data members, use only after _mtrep3__PickRepository2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep3__PickRepository2Response
{ public:
/// Element "PickRepository2Result" of XSD type "http://miktex.org/2007/07/repository":RepositoryInfo.
    mtrep3__RepositoryInfo*              PickRepository2Result          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2
/// @brief "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2 is a complexType.
///
/// class _mtrep3__TryGetRepositoryInfo2 operations:
/// - _mtrep3__TryGetRepositoryInfo2* soap_new__mtrep3__TryGetRepositoryInfo2(soap*) allocate
/// - _mtrep3__TryGetRepositoryInfo2* soap_new__mtrep3__TryGetRepositoryInfo2(soap*, int num) allocate array
/// - _mtrep3__TryGetRepositoryInfo2* soap_new_req__mtrep3__TryGetRepositoryInfo2(soap*, ...) allocate, set required members
/// - _mtrep3__TryGetRepositoryInfo2* soap_new_set__mtrep3__TryGetRepositoryInfo2(soap*, ...) allocate, set all public members
/// - _mtrep3__TryGetRepositoryInfo2::soap_default(soap*) reset members to default
/// - int soap_read__mtrep3__TryGetRepositoryInfo2(soap*, _mtrep3__TryGetRepositoryInfo2*) deserialize from a stream
/// - int soap_write__mtrep3__TryGetRepositoryInfo2(soap*, _mtrep3__TryGetRepositoryInfo2*) serialize to a stream
/// - _mtrep3__TryGetRepositoryInfo2* _mtrep3__TryGetRepositoryInfo2::soap_dup(soap*) returns deep copy of _mtrep3__TryGetRepositoryInfo2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep3__TryGetRepositoryInfo2::soap_del() deep deletes _mtrep3__TryGetRepositoryInfo2 data members, use only after _mtrep3__TryGetRepositoryInfo2::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep3__TryGetRepositoryInfo2
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2007/07/repository":ClientInfo.
    mtrep3__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "url" of XSD type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2Response
/// @brief "http://miktex.org/2007/07/repository":TryGetRepositoryInfo2Response is a complexType.
///
/// class _mtrep3__TryGetRepositoryInfo2Response operations:
/// - _mtrep3__TryGetRepositoryInfo2Response* soap_new__mtrep3__TryGetRepositoryInfo2Response(soap*) allocate
/// - _mtrep3__TryGetRepositoryInfo2Response* soap_new__mtrep3__TryGetRepositoryInfo2Response(soap*, int num) allocate array
/// - _mtrep3__TryGetRepositoryInfo2Response* soap_new_req__mtrep3__TryGetRepositoryInfo2Response(soap*, ...) allocate, set required members
/// - _mtrep3__TryGetRepositoryInfo2Response* soap_new_set__mtrep3__TryGetRepositoryInfo2Response(soap*, ...) allocate, set all public members
/// - _mtrep3__TryGetRepositoryInfo2Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep3__TryGetRepositoryInfo2Response(soap*, _mtrep3__TryGetRepositoryInfo2Response*) deserialize from a stream
/// - int soap_write__mtrep3__TryGetRepositoryInfo2Response(soap*, _mtrep3__TryGetRepositoryInfo2Response*) serialize to a stream
/// - _mtrep3__TryGetRepositoryInfo2Response* _mtrep3__TryGetRepositoryInfo2Response::soap_dup(soap*) returns deep copy of _mtrep3__TryGetRepositoryInfo2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep3__TryGetRepositoryInfo2Response::soap_del() deep deletes _mtrep3__TryGetRepositoryInfo2Response data members, use only after _mtrep3__TryGetRepositoryInfo2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep3__TryGetRepositoryInfo2Response
{ public:
/// Element "TryGetRepositoryInfo2Result" of XSD type xs:boolean.
    bool                                 TryGetRepositoryInfo2Result    1;	///< Required element.
/// Element "repositoryInfo" of XSD type "http://miktex.org/2007/07/repository":RepositoryInfo.
    mtrep3__RepositoryInfo*              repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2007/10/repository":ClientInfo is a complexType.
///
/// class mtrep4__ClientInfo operations:
/// - mtrep4__ClientInfo* soap_new_mtrep4__ClientInfo(soap*) allocate
/// - mtrep4__ClientInfo* soap_new_mtrep4__ClientInfo(soap*, int num) allocate array
/// - mtrep4__ClientInfo* soap_new_req_mtrep4__ClientInfo(soap*, ...) allocate, set required members
/// - mtrep4__ClientInfo* soap_new_set_mtrep4__ClientInfo(soap*, ...) allocate, set all public members
/// - mtrep4__ClientInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep4__ClientInfo(soap*, mtrep4__ClientInfo*) deserialize from a stream
/// - int soap_write_mtrep4__ClientInfo(soap*, mtrep4__ClientInfo*) serialize to a stream
/// - mtrep4__ClientInfo* mtrep4__ClientInfo::soap_dup(soap*) returns deep copy of mtrep4__ClientInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep4__ClientInfo::soap_del() deep deletes mtrep4__ClientInfo data members, use only after mtrep4__ClientInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep4__ClientInfo
{ public:
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2007/10/repository":RepositoryInfo is a complexType.
///
/// class mtrep4__RepositoryInfo operations:
/// - mtrep4__RepositoryInfo* soap_new_mtrep4__RepositoryInfo(soap*) allocate
/// - mtrep4__RepositoryInfo* soap_new_mtrep4__RepositoryInfo(soap*, int num) allocate array
/// - mtrep4__RepositoryInfo* soap_new_req_mtrep4__RepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep4__RepositoryInfo* soap_new_set_mtrep4__RepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep4__RepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep4__RepositoryInfo(soap*, mtrep4__RepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep4__RepositoryInfo(soap*, mtrep4__RepositoryInfo*) serialize to a stream
/// - mtrep4__RepositoryInfo* mtrep4__RepositoryInfo::soap_dup(soap*) returns deep copy of mtrep4__RepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep4__RepositoryInfo::soap_del() deep deletes mtrep4__RepositoryInfo data members, use only after mtrep4__RepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep4__RepositoryInfo
{ public:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2007/10/repository":RepositoryIntegrity.
    enum mtrep4__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2007/10/repository":PackageLevel.
    enum mtrep4__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2007/10/repository":RepositoryStatus.
    enum mtrep4__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/10/repository":VerifyRepository
/// @brief "http://miktex.org/2007/10/repository":VerifyRepository is a complexType.
///
/// class _mtrep4__VerifyRepository operations:
/// - _mtrep4__VerifyRepository* soap_new__mtrep4__VerifyRepository(soap*) allocate
/// - _mtrep4__VerifyRepository* soap_new__mtrep4__VerifyRepository(soap*, int num) allocate array
/// - _mtrep4__VerifyRepository* soap_new_req__mtrep4__VerifyRepository(soap*, ...) allocate, set required members
/// - _mtrep4__VerifyRepository* soap_new_set__mtrep4__VerifyRepository(soap*, ...) allocate, set all public members
/// - _mtrep4__VerifyRepository::soap_default(soap*) reset members to default
/// - int soap_read__mtrep4__VerifyRepository(soap*, _mtrep4__VerifyRepository*) deserialize from a stream
/// - int soap_write__mtrep4__VerifyRepository(soap*, _mtrep4__VerifyRepository*) serialize to a stream
/// - _mtrep4__VerifyRepository* _mtrep4__VerifyRepository::soap_dup(soap*) returns deep copy of _mtrep4__VerifyRepository, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep4__VerifyRepository::soap_del() deep deletes _mtrep4__VerifyRepository data members, use only after _mtrep4__VerifyRepository::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep4__VerifyRepository
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2007/10/repository":ClientInfo.
    mtrep4__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "url" of XSD type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2007/10/repository":VerifyRepositoryResponse
/// @brief "http://miktex.org/2007/10/repository":VerifyRepositoryResponse is a complexType.
///
/// class _mtrep4__VerifyRepositoryResponse operations:
/// - _mtrep4__VerifyRepositoryResponse* soap_new__mtrep4__VerifyRepositoryResponse(soap*) allocate
/// - _mtrep4__VerifyRepositoryResponse* soap_new__mtrep4__VerifyRepositoryResponse(soap*, int num) allocate array
/// - _mtrep4__VerifyRepositoryResponse* soap_new_req__mtrep4__VerifyRepositoryResponse(soap*, ...) allocate, set required members
/// - _mtrep4__VerifyRepositoryResponse* soap_new_set__mtrep4__VerifyRepositoryResponse(soap*, ...) allocate, set all public members
/// - _mtrep4__VerifyRepositoryResponse::soap_default(soap*) reset members to default
/// - int soap_read__mtrep4__VerifyRepositoryResponse(soap*, _mtrep4__VerifyRepositoryResponse*) deserialize from a stream
/// - int soap_write__mtrep4__VerifyRepositoryResponse(soap*, _mtrep4__VerifyRepositoryResponse*) serialize to a stream
/// - _mtrep4__VerifyRepositoryResponse* _mtrep4__VerifyRepositoryResponse::soap_dup(soap*) returns deep copy of _mtrep4__VerifyRepositoryResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep4__VerifyRepositoryResponse::soap_del() deep deletes _mtrep4__VerifyRepositoryResponse data members, use only after _mtrep4__VerifyRepositoryResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep4__VerifyRepositoryResponse
{ public:
/// Element "VerifyRepositoryResult" of XSD type xs:boolean.
    bool                                 VerifyRepositoryResult         1;	///< Required element.
/// Element "repositoryInfo" of XSD type "http://miktex.org/2007/10/repository":RepositoryInfo.
    mtrep4__RepositoryInfo*              repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2008/05/repository":ClientInfo is a complexType.
///
/// class mtrep5__ClientInfo operations:
/// - mtrep5__ClientInfo* soap_new_mtrep5__ClientInfo(soap*) allocate
/// - mtrep5__ClientInfo* soap_new_mtrep5__ClientInfo(soap*, int num) allocate array
/// - mtrep5__ClientInfo* soap_new_req_mtrep5__ClientInfo(soap*, ...) allocate, set required members
/// - mtrep5__ClientInfo* soap_new_set_mtrep5__ClientInfo(soap*, ...) allocate, set all public members
/// - mtrep5__ClientInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep5__ClientInfo(soap*, mtrep5__ClientInfo*) deserialize from a stream
/// - int soap_write_mtrep5__ClientInfo(soap*, mtrep5__ClientInfo*) serialize to a stream
/// - mtrep5__ClientInfo* mtrep5__ClientInfo::soap_dup(soap*) returns deep copy of mtrep5__ClientInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep5__ClientInfo::soap_del() deep deletes mtrep5__ClientInfo data members, use only after mtrep5__ClientInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep5__ClientInfo
{ public:
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2008/05/repository":ArrayOfRepositoryInfo2 is a complexType.
///
/// class mtrep5__ArrayOfRepositoryInfo2 operations:
/// - mtrep5__ArrayOfRepositoryInfo2* soap_new_mtrep5__ArrayOfRepositoryInfo2(soap*) allocate
/// - mtrep5__ArrayOfRepositoryInfo2* soap_new_mtrep5__ArrayOfRepositoryInfo2(soap*, int num) allocate array
/// - mtrep5__ArrayOfRepositoryInfo2* soap_new_req_mtrep5__ArrayOfRepositoryInfo2(soap*, ...) allocate, set required members
/// - mtrep5__ArrayOfRepositoryInfo2* soap_new_set_mtrep5__ArrayOfRepositoryInfo2(soap*, ...) allocate, set all public members
/// - mtrep5__ArrayOfRepositoryInfo2::soap_default(soap*) reset members to default
/// - int soap_read_mtrep5__ArrayOfRepositoryInfo2(soap*, mtrep5__ArrayOfRepositoryInfo2*) deserialize from a stream
/// - int soap_write_mtrep5__ArrayOfRepositoryInfo2(soap*, mtrep5__ArrayOfRepositoryInfo2*) serialize to a stream
/// - mtrep5__ArrayOfRepositoryInfo2* mtrep5__ArrayOfRepositoryInfo2::soap_dup(soap*) returns deep copy of mtrep5__ArrayOfRepositoryInfo2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep5__ArrayOfRepositoryInfo2::soap_del() deep deletes mtrep5__ArrayOfRepositoryInfo2 data members, use only after mtrep5__ArrayOfRepositoryInfo2::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep5__ArrayOfRepositoryInfo2
{ public:
/// Vector of mtrep5__RepositoryInfo2* of length 0..unbounded.
    std::vector<mtrep5__RepositoryInfo2*> RepositoryInfo2                0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2008/05/repository":RepositoryInfo is a complexType.
///
/// class mtrep5__RepositoryInfo operations:
/// - mtrep5__RepositoryInfo* soap_new_mtrep5__RepositoryInfo(soap*) allocate
/// - mtrep5__RepositoryInfo* soap_new_mtrep5__RepositoryInfo(soap*, int num) allocate array
/// - mtrep5__RepositoryInfo* soap_new_req_mtrep5__RepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep5__RepositoryInfo* soap_new_set_mtrep5__RepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep5__RepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep5__RepositoryInfo(soap*, mtrep5__RepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep5__RepositoryInfo(soap*, mtrep5__RepositoryInfo*) serialize to a stream
/// - mtrep5__RepositoryInfo* mtrep5__RepositoryInfo::soap_dup(soap*) returns deep copy of mtrep5__RepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep5__RepositoryInfo::soap_del() deep deletes mtrep5__RepositoryInfo data members, use only after mtrep5__RepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep5__RepositoryInfo
{ public:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2008/05/repository":RepositoryIntegrity.
    enum mtrep5__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2008/05/repository":PackageLevel.
    enum mtrep5__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2008/05/repository":RepositoryStatus.
    enum mtrep5__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2008/05/repository":GetRepositories3
/// @brief "http://miktex.org/2008/05/repository":GetRepositories3 is a complexType.
///
/// class _mtrep5__GetRepositories3 operations:
/// - _mtrep5__GetRepositories3* soap_new__mtrep5__GetRepositories3(soap*) allocate
/// - _mtrep5__GetRepositories3* soap_new__mtrep5__GetRepositories3(soap*, int num) allocate array
/// - _mtrep5__GetRepositories3* soap_new_req__mtrep5__GetRepositories3(soap*, ...) allocate, set required members
/// - _mtrep5__GetRepositories3* soap_new_set__mtrep5__GetRepositories3(soap*, ...) allocate, set all public members
/// - _mtrep5__GetRepositories3::soap_default(soap*) reset members to default
/// - int soap_read__mtrep5__GetRepositories3(soap*, _mtrep5__GetRepositories3*) deserialize from a stream
/// - int soap_write__mtrep5__GetRepositories3(soap*, _mtrep5__GetRepositories3*) serialize to a stream
/// - _mtrep5__GetRepositories3* _mtrep5__GetRepositories3::soap_dup(soap*) returns deep copy of _mtrep5__GetRepositories3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep5__GetRepositories3::soap_del() deep deletes _mtrep5__GetRepositories3 data members, use only after _mtrep5__GetRepositories3::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep5__GetRepositories3
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2008/05/repository":ClientInfo.
    mtrep5__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "onlyOnline" of XSD type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element "noCorrupted" of XSD type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element "httpOnly" of XSD type xs:boolean.
    bool                                 httpOnly                       1;	///< Required element.
/// Element "excludeHidden" of XSD type xs:boolean.
    bool                                 excludeHidden                  1;	///< Required element.
/// Element "maxDelay" of XSD type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2008/05/repository":GetRepositories3Response
/// @brief "http://miktex.org/2008/05/repository":GetRepositories3Response is a complexType.
///
/// class _mtrep5__GetRepositories3Response operations:
/// - _mtrep5__GetRepositories3Response* soap_new__mtrep5__GetRepositories3Response(soap*) allocate
/// - _mtrep5__GetRepositories3Response* soap_new__mtrep5__GetRepositories3Response(soap*, int num) allocate array
/// - _mtrep5__GetRepositories3Response* soap_new_req__mtrep5__GetRepositories3Response(soap*, ...) allocate, set required members
/// - _mtrep5__GetRepositories3Response* soap_new_set__mtrep5__GetRepositories3Response(soap*, ...) allocate, set all public members
/// - _mtrep5__GetRepositories3Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep5__GetRepositories3Response(soap*, _mtrep5__GetRepositories3Response*) deserialize from a stream
/// - int soap_write__mtrep5__GetRepositories3Response(soap*, _mtrep5__GetRepositories3Response*) serialize to a stream
/// - _mtrep5__GetRepositories3Response* _mtrep5__GetRepositories3Response::soap_dup(soap*) returns deep copy of _mtrep5__GetRepositories3Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep5__GetRepositories3Response::soap_del() deep deletes _mtrep5__GetRepositories3Response data members, use only after _mtrep5__GetRepositories3Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep5__GetRepositories3Response
{ public:
/// Element "GetRepositories3Result" of XSD type "http://miktex.org/2008/05/repository":ArrayOfRepositoryInfo2.
    mtrep5__ArrayOfRepositoryInfo2*      GetRepositories3Result         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2008/05/repository":PickRepository3
/// @brief "http://miktex.org/2008/05/repository":PickRepository3 is a complexType.
///
/// class _mtrep5__PickRepository3 operations:
/// - _mtrep5__PickRepository3* soap_new__mtrep5__PickRepository3(soap*) allocate
/// - _mtrep5__PickRepository3* soap_new__mtrep5__PickRepository3(soap*, int num) allocate array
/// - _mtrep5__PickRepository3* soap_new_req__mtrep5__PickRepository3(soap*, ...) allocate, set required members
/// - _mtrep5__PickRepository3* soap_new_set__mtrep5__PickRepository3(soap*, ...) allocate, set all public members
/// - _mtrep5__PickRepository3::soap_default(soap*) reset members to default
/// - int soap_read__mtrep5__PickRepository3(soap*, _mtrep5__PickRepository3*) deserialize from a stream
/// - int soap_write__mtrep5__PickRepository3(soap*, _mtrep5__PickRepository3*) serialize to a stream
/// - _mtrep5__PickRepository3* _mtrep5__PickRepository3::soap_dup(soap*) returns deep copy of _mtrep5__PickRepository3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep5__PickRepository3::soap_del() deep deletes _mtrep5__PickRepository3 data members, use only after _mtrep5__PickRepository3::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep5__PickRepository3
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2008/05/repository":ClientInfo.
    mtrep5__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "favorHttp" of XSD type xs:boolean.
    bool                                 favorHttp                      1;	///< Required element.
/// Element "nearest" of XSD type xs:boolean.
    bool                                 nearest                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2008/05/repository":PickRepository3Response
/// @brief "http://miktex.org/2008/05/repository":PickRepository3Response is a complexType.
///
/// class _mtrep5__PickRepository3Response operations:
/// - _mtrep5__PickRepository3Response* soap_new__mtrep5__PickRepository3Response(soap*) allocate
/// - _mtrep5__PickRepository3Response* soap_new__mtrep5__PickRepository3Response(soap*, int num) allocate array
/// - _mtrep5__PickRepository3Response* soap_new_req__mtrep5__PickRepository3Response(soap*, ...) allocate, set required members
/// - _mtrep5__PickRepository3Response* soap_new_set__mtrep5__PickRepository3Response(soap*, ...) allocate, set all public members
/// - _mtrep5__PickRepository3Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep5__PickRepository3Response(soap*, _mtrep5__PickRepository3Response*) deserialize from a stream
/// - int soap_write__mtrep5__PickRepository3Response(soap*, _mtrep5__PickRepository3Response*) serialize to a stream
/// - _mtrep5__PickRepository3Response* _mtrep5__PickRepository3Response::soap_dup(soap*) returns deep copy of _mtrep5__PickRepository3Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep5__PickRepository3Response::soap_del() deep deletes _mtrep5__PickRepository3Response data members, use only after _mtrep5__PickRepository3Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep5__PickRepository3Response
{ public:
/// Element "PickRepository3Result" of XSD type "http://miktex.org/2008/05/repository":RepositoryInfo2.
    mtrep5__RepositoryInfo2*             PickRepository3Result          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2015/06/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2015/06/repository":ClientInfo is a complexType.
///
/// class mtrep6__ClientInfo operations:
/// - mtrep6__ClientInfo* soap_new_mtrep6__ClientInfo(soap*) allocate
/// - mtrep6__ClientInfo* soap_new_mtrep6__ClientInfo(soap*, int num) allocate array
/// - mtrep6__ClientInfo* soap_new_req_mtrep6__ClientInfo(soap*, ...) allocate, set required members
/// - mtrep6__ClientInfo* soap_new_set_mtrep6__ClientInfo(soap*, ...) allocate, set all public members
/// - mtrep6__ClientInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep6__ClientInfo(soap*, mtrep6__ClientInfo*) deserialize from a stream
/// - int soap_write_mtrep6__ClientInfo(soap*, mtrep6__ClientInfo*) serialize to a stream
/// - mtrep6__ClientInfo* mtrep6__ClientInfo::soap_dup(soap*) returns deep copy of mtrep6__ClientInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep6__ClientInfo::soap_del() deep deletes mtrep6__ClientInfo data members, use only after mtrep6__ClientInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep6__ClientInfo
{ public:
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2015/06/repository":ArrayOfRepositoryInfo3 is a complexType.
///
/// class mtrep6__ArrayOfRepositoryInfo3 operations:
/// - mtrep6__ArrayOfRepositoryInfo3* soap_new_mtrep6__ArrayOfRepositoryInfo3(soap*) allocate
/// - mtrep6__ArrayOfRepositoryInfo3* soap_new_mtrep6__ArrayOfRepositoryInfo3(soap*, int num) allocate array
/// - mtrep6__ArrayOfRepositoryInfo3* soap_new_req_mtrep6__ArrayOfRepositoryInfo3(soap*, ...) allocate, set required members
/// - mtrep6__ArrayOfRepositoryInfo3* soap_new_set_mtrep6__ArrayOfRepositoryInfo3(soap*, ...) allocate, set all public members
/// - mtrep6__ArrayOfRepositoryInfo3::soap_default(soap*) reset members to default
/// - int soap_read_mtrep6__ArrayOfRepositoryInfo3(soap*, mtrep6__ArrayOfRepositoryInfo3*) deserialize from a stream
/// - int soap_write_mtrep6__ArrayOfRepositoryInfo3(soap*, mtrep6__ArrayOfRepositoryInfo3*) serialize to a stream
/// - mtrep6__ArrayOfRepositoryInfo3* mtrep6__ArrayOfRepositoryInfo3::soap_dup(soap*) returns deep copy of mtrep6__ArrayOfRepositoryInfo3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep6__ArrayOfRepositoryInfo3::soap_del() deep deletes mtrep6__ArrayOfRepositoryInfo3 data members, use only after mtrep6__ArrayOfRepositoryInfo3::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep6__ArrayOfRepositoryInfo3
{ public:
/// Vector of mtrep6__RepositoryInfo3* of length 0..unbounded.
    std::vector<mtrep6__RepositoryInfo3*> RepositoryInfo3                0;
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2015/06/repository":RepositoryInfo is a complexType.
///
/// class mtrep6__RepositoryInfo operations:
/// - mtrep6__RepositoryInfo* soap_new_mtrep6__RepositoryInfo(soap*) allocate
/// - mtrep6__RepositoryInfo* soap_new_mtrep6__RepositoryInfo(soap*, int num) allocate array
/// - mtrep6__RepositoryInfo* soap_new_req_mtrep6__RepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep6__RepositoryInfo* soap_new_set_mtrep6__RepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep6__RepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep6__RepositoryInfo(soap*, mtrep6__RepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep6__RepositoryInfo(soap*, mtrep6__RepositoryInfo*) serialize to a stream
/// - mtrep6__RepositoryInfo* mtrep6__RepositoryInfo::soap_dup(soap*) returns deep copy of mtrep6__RepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep6__RepositoryInfo::soap_del() deep deletes mtrep6__RepositoryInfo data members, use only after mtrep6__RepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep6__RepositoryInfo
{ public:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2015/06/repository":RepositoryIntegrity.
    enum mtrep6__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2015/06/repository":PackageLevel.
    enum mtrep6__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2015/06/repository":RepositoryStatus.
    enum mtrep6__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/06/repository":GetRepositories4
/// @brief "http://miktex.org/2015/06/repository":GetRepositories4 is a complexType.
///
/// class _mtrep6__GetRepositories4 operations:
/// - _mtrep6__GetRepositories4* soap_new__mtrep6__GetRepositories4(soap*) allocate
/// - _mtrep6__GetRepositories4* soap_new__mtrep6__GetRepositories4(soap*, int num) allocate array
/// - _mtrep6__GetRepositories4* soap_new_req__mtrep6__GetRepositories4(soap*, ...) allocate, set required members
/// - _mtrep6__GetRepositories4* soap_new_set__mtrep6__GetRepositories4(soap*, ...) allocate, set all public members
/// - _mtrep6__GetRepositories4::soap_default(soap*) reset members to default
/// - int soap_read__mtrep6__GetRepositories4(soap*, _mtrep6__GetRepositories4*) deserialize from a stream
/// - int soap_write__mtrep6__GetRepositories4(soap*, _mtrep6__GetRepositories4*) serialize to a stream
/// - _mtrep6__GetRepositories4* _mtrep6__GetRepositories4::soap_dup(soap*) returns deep copy of _mtrep6__GetRepositories4, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep6__GetRepositories4::soap_del() deep deletes _mtrep6__GetRepositories4 data members, use only after _mtrep6__GetRepositories4::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep6__GetRepositories4
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2015/06/repository":ClientInfo.
    mtrep6__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "onlyOnline" of XSD type xs:boolean.
    bool                                 onlyOnline                     1;	///< Required element.
/// Element "noCorrupted" of XSD type xs:boolean.
    bool                                 noCorrupted                    1;	///< Required element.
/// Element "httpOnly" of XSD type xs:boolean.
    bool                                 httpOnly                       1;	///< Required element.
/// Element "excludeHidden" of XSD type xs:boolean.
    bool                                 excludeHidden                  1;	///< Required element.
/// Element "maxDelay" of XSD type xs:int.
    int                                  maxDelay                       1;	///< Required element.
/// Element "releaseState" of XSD type "http://miktex.org/2015/06/repository":RepositoryReleaseState.
    enum mtrep6__RepositoryReleaseState  releaseState                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/06/repository":GetRepositories4Response
/// @brief "http://miktex.org/2015/06/repository":GetRepositories4Response is a complexType.
///
/// class _mtrep6__GetRepositories4Response operations:
/// - _mtrep6__GetRepositories4Response* soap_new__mtrep6__GetRepositories4Response(soap*) allocate
/// - _mtrep6__GetRepositories4Response* soap_new__mtrep6__GetRepositories4Response(soap*, int num) allocate array
/// - _mtrep6__GetRepositories4Response* soap_new_req__mtrep6__GetRepositories4Response(soap*, ...) allocate, set required members
/// - _mtrep6__GetRepositories4Response* soap_new_set__mtrep6__GetRepositories4Response(soap*, ...) allocate, set all public members
/// - _mtrep6__GetRepositories4Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep6__GetRepositories4Response(soap*, _mtrep6__GetRepositories4Response*) deserialize from a stream
/// - int soap_write__mtrep6__GetRepositories4Response(soap*, _mtrep6__GetRepositories4Response*) serialize to a stream
/// - _mtrep6__GetRepositories4Response* _mtrep6__GetRepositories4Response::soap_dup(soap*) returns deep copy of _mtrep6__GetRepositories4Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep6__GetRepositories4Response::soap_del() deep deletes _mtrep6__GetRepositories4Response data members, use only after _mtrep6__GetRepositories4Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep6__GetRepositories4Response
{ public:
/// Element "GetRepositories4Result" of XSD type "http://miktex.org/2015/06/repository":ArrayOfRepositoryInfo3.
    mtrep6__ArrayOfRepositoryInfo3*      GetRepositories4Result         0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/06/repository":PickRepository4
/// @brief "http://miktex.org/2015/06/repository":PickRepository4 is a complexType.
///
/// class _mtrep6__PickRepository4 operations:
/// - _mtrep6__PickRepository4* soap_new__mtrep6__PickRepository4(soap*) allocate
/// - _mtrep6__PickRepository4* soap_new__mtrep6__PickRepository4(soap*, int num) allocate array
/// - _mtrep6__PickRepository4* soap_new_req__mtrep6__PickRepository4(soap*, ...) allocate, set required members
/// - _mtrep6__PickRepository4* soap_new_set__mtrep6__PickRepository4(soap*, ...) allocate, set all public members
/// - _mtrep6__PickRepository4::soap_default(soap*) reset members to default
/// - int soap_read__mtrep6__PickRepository4(soap*, _mtrep6__PickRepository4*) deserialize from a stream
/// - int soap_write__mtrep6__PickRepository4(soap*, _mtrep6__PickRepository4*) serialize to a stream
/// - _mtrep6__PickRepository4* _mtrep6__PickRepository4::soap_dup(soap*) returns deep copy of _mtrep6__PickRepository4, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep6__PickRepository4::soap_del() deep deletes _mtrep6__PickRepository4 data members, use only after _mtrep6__PickRepository4::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep6__PickRepository4
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2015/06/repository":ClientInfo.
    mtrep6__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "favorHttp" of XSD type xs:boolean.
    bool                                 favorHttp                      1;	///< Required element.
/// Element "nearest" of XSD type xs:boolean.
    bool                                 nearest                        1;	///< Required element.
/// Element "releaseState" of XSD type "http://miktex.org/2015/06/repository":RepositoryReleaseState.
    enum mtrep6__RepositoryReleaseState  releaseState                   1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/06/repository":PickRepository4Response
/// @brief "http://miktex.org/2015/06/repository":PickRepository4Response is a complexType.
///
/// class _mtrep6__PickRepository4Response operations:
/// - _mtrep6__PickRepository4Response* soap_new__mtrep6__PickRepository4Response(soap*) allocate
/// - _mtrep6__PickRepository4Response* soap_new__mtrep6__PickRepository4Response(soap*, int num) allocate array
/// - _mtrep6__PickRepository4Response* soap_new_req__mtrep6__PickRepository4Response(soap*, ...) allocate, set required members
/// - _mtrep6__PickRepository4Response* soap_new_set__mtrep6__PickRepository4Response(soap*, ...) allocate, set all public members
/// - _mtrep6__PickRepository4Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep6__PickRepository4Response(soap*, _mtrep6__PickRepository4Response*) deserialize from a stream
/// - int soap_write__mtrep6__PickRepository4Response(soap*, _mtrep6__PickRepository4Response*) serialize to a stream
/// - _mtrep6__PickRepository4Response* _mtrep6__PickRepository4Response::soap_dup(soap*) returns deep copy of _mtrep6__PickRepository4Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep6__PickRepository4Response::soap_del() deep deletes _mtrep6__PickRepository4Response data members, use only after _mtrep6__PickRepository4Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep6__PickRepository4Response
{ public:
/// Element "PickRepository4Result" of XSD type "http://miktex.org/2015/06/repository":RepositoryInfo3.
    mtrep6__RepositoryInfo3*             PickRepository4Result          0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://miktex.org/2015/08/repository                                     *
 *                                                                            *
\******************************************************************************/

/// @brief "http://miktex.org/2015/08/repository":ClientInfo is a complexType.
///
/// class mtrep7__ClientInfo operations:
/// - mtrep7__ClientInfo* soap_new_mtrep7__ClientInfo(soap*) allocate
/// - mtrep7__ClientInfo* soap_new_mtrep7__ClientInfo(soap*, int num) allocate array
/// - mtrep7__ClientInfo* soap_new_req_mtrep7__ClientInfo(soap*, ...) allocate, set required members
/// - mtrep7__ClientInfo* soap_new_set_mtrep7__ClientInfo(soap*, ...) allocate, set all public members
/// - mtrep7__ClientInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep7__ClientInfo(soap*, mtrep7__ClientInfo*) deserialize from a stream
/// - int soap_write_mtrep7__ClientInfo(soap*, mtrep7__ClientInfo*) serialize to a stream
/// - mtrep7__ClientInfo* mtrep7__ClientInfo::soap_dup(soap*) returns deep copy of mtrep7__ClientInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep7__ClientInfo::soap_del() deep deletes mtrep7__ClientInfo data members, use only after mtrep7__ClientInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep7__ClientInfo
{ public:
/// Element "Name" of XSD type xs:string.
    std::string*                         Name                           0;	///< Optional element.
/// Element "Version" of XSD type xs:string.
    std::string*                         Version                        0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2015/08/repository":RepositoryInfo is a complexType.
///
/// class mtrep7__RepositoryInfo operations:
/// - mtrep7__RepositoryInfo* soap_new_mtrep7__RepositoryInfo(soap*) allocate
/// - mtrep7__RepositoryInfo* soap_new_mtrep7__RepositoryInfo(soap*, int num) allocate array
/// - mtrep7__RepositoryInfo* soap_new_req_mtrep7__RepositoryInfo(soap*, ...) allocate, set required members
/// - mtrep7__RepositoryInfo* soap_new_set_mtrep7__RepositoryInfo(soap*, ...) allocate, set all public members
/// - mtrep7__RepositoryInfo::soap_default(soap*) reset members to default
/// - int soap_read_mtrep7__RepositoryInfo(soap*, mtrep7__RepositoryInfo*) deserialize from a stream
/// - int soap_write_mtrep7__RepositoryInfo(soap*, mtrep7__RepositoryInfo*) serialize to a stream
/// - mtrep7__RepositoryInfo* mtrep7__RepositoryInfo::soap_dup(soap*) returns deep copy of mtrep7__RepositoryInfo, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep7__RepositoryInfo::soap_del() deep deletes mtrep7__RepositoryInfo data members, use only after mtrep7__RepositoryInfo::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep7__RepositoryInfo
{ public:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2015/08/repository":RepositoryIntegrity.
    enum mtrep7__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2015/08/repository":PackageLevel.
    enum mtrep7__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2015/08/repository":RepositoryStatus.
    enum mtrep7__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/08/repository":VerifyRepository2
/// @brief "http://miktex.org/2015/08/repository":VerifyRepository2 is a complexType.
///
/// class _mtrep7__VerifyRepository2 operations:
/// - _mtrep7__VerifyRepository2* soap_new__mtrep7__VerifyRepository2(soap*) allocate
/// - _mtrep7__VerifyRepository2* soap_new__mtrep7__VerifyRepository2(soap*, int num) allocate array
/// - _mtrep7__VerifyRepository2* soap_new_req__mtrep7__VerifyRepository2(soap*, ...) allocate, set required members
/// - _mtrep7__VerifyRepository2* soap_new_set__mtrep7__VerifyRepository2(soap*, ...) allocate, set all public members
/// - _mtrep7__VerifyRepository2::soap_default(soap*) reset members to default
/// - int soap_read__mtrep7__VerifyRepository2(soap*, _mtrep7__VerifyRepository2*) deserialize from a stream
/// - int soap_write__mtrep7__VerifyRepository2(soap*, _mtrep7__VerifyRepository2*) serialize to a stream
/// - _mtrep7__VerifyRepository2* _mtrep7__VerifyRepository2::soap_dup(soap*) returns deep copy of _mtrep7__VerifyRepository2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep7__VerifyRepository2::soap_del() deep deletes _mtrep7__VerifyRepository2 data members, use only after _mtrep7__VerifyRepository2::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep7__VerifyRepository2
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2015/08/repository":ClientInfo.
    mtrep7__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "url" of XSD type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/08/repository":VerifyRepository2Response
/// @brief "http://miktex.org/2015/08/repository":VerifyRepository2Response is a complexType.
///
/// class _mtrep7__VerifyRepository2Response operations:
/// - _mtrep7__VerifyRepository2Response* soap_new__mtrep7__VerifyRepository2Response(soap*) allocate
/// - _mtrep7__VerifyRepository2Response* soap_new__mtrep7__VerifyRepository2Response(soap*, int num) allocate array
/// - _mtrep7__VerifyRepository2Response* soap_new_req__mtrep7__VerifyRepository2Response(soap*, ...) allocate, set required members
/// - _mtrep7__VerifyRepository2Response* soap_new_set__mtrep7__VerifyRepository2Response(soap*, ...) allocate, set all public members
/// - _mtrep7__VerifyRepository2Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep7__VerifyRepository2Response(soap*, _mtrep7__VerifyRepository2Response*) deserialize from a stream
/// - int soap_write__mtrep7__VerifyRepository2Response(soap*, _mtrep7__VerifyRepository2Response*) serialize to a stream
/// - _mtrep7__VerifyRepository2Response* _mtrep7__VerifyRepository2Response::soap_dup(soap*) returns deep copy of _mtrep7__VerifyRepository2Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep7__VerifyRepository2Response::soap_del() deep deletes _mtrep7__VerifyRepository2Response data members, use only after _mtrep7__VerifyRepository2Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep7__VerifyRepository2Response
{ public:
/// Element "VerifyRepository2Result" of XSD type xs:boolean.
    bool                                 VerifyRepository2Result        1;	///< Required element.
/// Element "repositoryInfo" of XSD type "http://miktex.org/2015/08/repository":RepositoryInfo3.
    mtrep7__RepositoryInfo3*             repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/08/repository":TryGetRepositoryInfo3
/// @brief "http://miktex.org/2015/08/repository":TryGetRepositoryInfo3 is a complexType.
///
/// class _mtrep7__TryGetRepositoryInfo3 operations:
/// - _mtrep7__TryGetRepositoryInfo3* soap_new__mtrep7__TryGetRepositoryInfo3(soap*) allocate
/// - _mtrep7__TryGetRepositoryInfo3* soap_new__mtrep7__TryGetRepositoryInfo3(soap*, int num) allocate array
/// - _mtrep7__TryGetRepositoryInfo3* soap_new_req__mtrep7__TryGetRepositoryInfo3(soap*, ...) allocate, set required members
/// - _mtrep7__TryGetRepositoryInfo3* soap_new_set__mtrep7__TryGetRepositoryInfo3(soap*, ...) allocate, set all public members
/// - _mtrep7__TryGetRepositoryInfo3::soap_default(soap*) reset members to default
/// - int soap_read__mtrep7__TryGetRepositoryInfo3(soap*, _mtrep7__TryGetRepositoryInfo3*) deserialize from a stream
/// - int soap_write__mtrep7__TryGetRepositoryInfo3(soap*, _mtrep7__TryGetRepositoryInfo3*) serialize to a stream
/// - _mtrep7__TryGetRepositoryInfo3* _mtrep7__TryGetRepositoryInfo3::soap_dup(soap*) returns deep copy of _mtrep7__TryGetRepositoryInfo3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep7__TryGetRepositoryInfo3::soap_del() deep deletes _mtrep7__TryGetRepositoryInfo3 data members, use only after _mtrep7__TryGetRepositoryInfo3::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep7__TryGetRepositoryInfo3
{ public:
/// Element "clientInfo" of XSD type "http://miktex.org/2015/08/repository":ClientInfo.
    mtrep7__ClientInfo*                  clientInfo                     0;	///< Optional element.
/// Element "url" of XSD type xs:string.
    std::string*                         url                            0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://miktex.org/2015/08/repository":TryGetRepositoryInfo3Response
/// @brief "http://miktex.org/2015/08/repository":TryGetRepositoryInfo3Response is a complexType.
///
/// class _mtrep7__TryGetRepositoryInfo3Response operations:
/// - _mtrep7__TryGetRepositoryInfo3Response* soap_new__mtrep7__TryGetRepositoryInfo3Response(soap*) allocate
/// - _mtrep7__TryGetRepositoryInfo3Response* soap_new__mtrep7__TryGetRepositoryInfo3Response(soap*, int num) allocate array
/// - _mtrep7__TryGetRepositoryInfo3Response* soap_new_req__mtrep7__TryGetRepositoryInfo3Response(soap*, ...) allocate, set required members
/// - _mtrep7__TryGetRepositoryInfo3Response* soap_new_set__mtrep7__TryGetRepositoryInfo3Response(soap*, ...) allocate, set all public members
/// - _mtrep7__TryGetRepositoryInfo3Response::soap_default(soap*) reset members to default
/// - int soap_read__mtrep7__TryGetRepositoryInfo3Response(soap*, _mtrep7__TryGetRepositoryInfo3Response*) deserialize from a stream
/// - int soap_write__mtrep7__TryGetRepositoryInfo3Response(soap*, _mtrep7__TryGetRepositoryInfo3Response*) serialize to a stream
/// - _mtrep7__TryGetRepositoryInfo3Response* _mtrep7__TryGetRepositoryInfo3Response::soap_dup(soap*) returns deep copy of _mtrep7__TryGetRepositoryInfo3Response, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _mtrep7__TryGetRepositoryInfo3Response::soap_del() deep deletes _mtrep7__TryGetRepositoryInfo3Response data members, use only after _mtrep7__TryGetRepositoryInfo3Response::soap_dup(NULL) (use soapcpp2 -Ed)
class _mtrep7__TryGetRepositoryInfo3Response
{ public:
/// Element "TryGetRepositoryInfo3Result" of XSD type xs:boolean.
    bool                                 TryGetRepositoryInfo3Result    1;	///< Required element.
/// Element "repositoryInfo" of XSD type "http://miktex.org/2015/08/repository":RepositoryInfo3.
    mtrep7__RepositoryInfo3*             repositoryInfo                 0;	///< Optional element.
/// A handle to the soap struct context that manages this instance when instantiated by a context or NULL otherwise (automatically set).
    struct soap                         *soap                          ;
};

/// @brief "http://miktex.org/2008/05/repository":RepositoryInfo2 is a complexType with complexContent extension of XSD type "http://miktex.org/2008/05/repository":RepositoryInfo.
///
/// class mtrep5__RepositoryInfo2 operations:
/// - mtrep5__RepositoryInfo2* soap_new_mtrep5__RepositoryInfo2(soap*) allocate
/// - mtrep5__RepositoryInfo2* soap_new_mtrep5__RepositoryInfo2(soap*, int num) allocate array
/// - mtrep5__RepositoryInfo2* soap_new_req_mtrep5__RepositoryInfo2(soap*, ...) allocate, set required members
/// - mtrep5__RepositoryInfo2* soap_new_set_mtrep5__RepositoryInfo2(soap*, ...) allocate, set all public members
/// - mtrep5__RepositoryInfo2::soap_default(soap*) reset members to default
/// - int soap_read_mtrep5__RepositoryInfo2(soap*, mtrep5__RepositoryInfo2*) deserialize from a stream
/// - int soap_write_mtrep5__RepositoryInfo2(soap*, mtrep5__RepositoryInfo2*) serialize to a stream
/// - mtrep5__RepositoryInfo2* mtrep5__RepositoryInfo2::soap_dup(soap*) returns deep copy of mtrep5__RepositoryInfo2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep5__RepositoryInfo2::soap_del() deep deletes mtrep5__RepositoryInfo2 data members, use only after mtrep5__RepositoryInfo2::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep5__RepositoryInfo2 : public mtrep5__RepositoryInfo
{ public:
/*  INHERITED FROM mtrep5__RepositoryInfo:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2008/05/repository":RepositoryIntegrity.
    enum mtrep5__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2008/05/repository":PackageLevel.
    enum mtrep5__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2008/05/repository":RepositoryStatus.
    enum mtrep5__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
    END OF INHERITED FROM mtrep5__RepositoryInfo */
/// Element "CountryCode" of XSD type xs:string.
    std::string*                         CountryCode                    0;	///< Optional element.
/// Element "City" of XSD type xs:string.
    std::string*                         City                           0;	///< Optional element.
/// Element "Latitude" of XSD type xs:double.
    double                               Latitude                       1;	///< Required element.
/// Element "Longitude" of XSD type xs:double.
    double                               Longitude                      1;	///< Required element.
};

/// @brief "http://miktex.org/2015/06/repository":RepositoryInfo2 is a complexType with complexContent extension of XSD type "http://miktex.org/2015/06/repository":RepositoryInfo.
///
/// class mtrep6__RepositoryInfo2 operations:
/// - mtrep6__RepositoryInfo2* soap_new_mtrep6__RepositoryInfo2(soap*) allocate
/// - mtrep6__RepositoryInfo2* soap_new_mtrep6__RepositoryInfo2(soap*, int num) allocate array
/// - mtrep6__RepositoryInfo2* soap_new_req_mtrep6__RepositoryInfo2(soap*, ...) allocate, set required members
/// - mtrep6__RepositoryInfo2* soap_new_set_mtrep6__RepositoryInfo2(soap*, ...) allocate, set all public members
/// - mtrep6__RepositoryInfo2::soap_default(soap*) reset members to default
/// - int soap_read_mtrep6__RepositoryInfo2(soap*, mtrep6__RepositoryInfo2*) deserialize from a stream
/// - int soap_write_mtrep6__RepositoryInfo2(soap*, mtrep6__RepositoryInfo2*) serialize to a stream
/// - mtrep6__RepositoryInfo2* mtrep6__RepositoryInfo2::soap_dup(soap*) returns deep copy of mtrep6__RepositoryInfo2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep6__RepositoryInfo2::soap_del() deep deletes mtrep6__RepositoryInfo2 data members, use only after mtrep6__RepositoryInfo2::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep6__RepositoryInfo2 : public mtrep6__RepositoryInfo
{ public:
/*  INHERITED FROM mtrep6__RepositoryInfo:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2015/06/repository":RepositoryIntegrity.
    enum mtrep6__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2015/06/repository":PackageLevel.
    enum mtrep6__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2015/06/repository":RepositoryStatus.
    enum mtrep6__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
    END OF INHERITED FROM mtrep6__RepositoryInfo */
/// Element "CountryCode" of XSD type xs:string.
    std::string*                         CountryCode                    0;	///< Optional element.
/// Element "City" of XSD type xs:string.
    std::string*                         City                           0;	///< Optional element.
/// Element "Latitude" of XSD type xs:double.
    double                               Latitude                       1;	///< Required element.
/// Element "Longitude" of XSD type xs:double.
    double                               Longitude                      1;	///< Required element.
};

/// @brief "http://miktex.org/2015/08/repository":RepositoryInfo2 is a complexType with complexContent extension of XSD type "http://miktex.org/2015/08/repository":RepositoryInfo.
///
/// class mtrep7__RepositoryInfo2 operations:
/// - mtrep7__RepositoryInfo2* soap_new_mtrep7__RepositoryInfo2(soap*) allocate
/// - mtrep7__RepositoryInfo2* soap_new_mtrep7__RepositoryInfo2(soap*, int num) allocate array
/// - mtrep7__RepositoryInfo2* soap_new_req_mtrep7__RepositoryInfo2(soap*, ...) allocate, set required members
/// - mtrep7__RepositoryInfo2* soap_new_set_mtrep7__RepositoryInfo2(soap*, ...) allocate, set all public members
/// - mtrep7__RepositoryInfo2::soap_default(soap*) reset members to default
/// - int soap_read_mtrep7__RepositoryInfo2(soap*, mtrep7__RepositoryInfo2*) deserialize from a stream
/// - int soap_write_mtrep7__RepositoryInfo2(soap*, mtrep7__RepositoryInfo2*) serialize to a stream
/// - mtrep7__RepositoryInfo2* mtrep7__RepositoryInfo2::soap_dup(soap*) returns deep copy of mtrep7__RepositoryInfo2, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep7__RepositoryInfo2::soap_del() deep deletes mtrep7__RepositoryInfo2 data members, use only after mtrep7__RepositoryInfo2::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep7__RepositoryInfo2 : public mtrep7__RepositoryInfo
{ public:
/*  INHERITED FROM mtrep7__RepositoryInfo:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2015/08/repository":RepositoryIntegrity.
    enum mtrep7__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2015/08/repository":PackageLevel.
    enum mtrep7__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2015/08/repository":RepositoryStatus.
    enum mtrep7__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
    END OF INHERITED FROM mtrep7__RepositoryInfo */
/// Element "CountryCode" of XSD type xs:string.
    std::string*                         CountryCode                    0;	///< Optional element.
/// Element "City" of XSD type xs:string.
    std::string*                         City                           0;	///< Optional element.
/// Element "Latitude" of XSD type xs:double.
    double                               Latitude                       1;	///< Required element.
/// Element "Longitude" of XSD type xs:double.
    double                               Longitude                      1;	///< Required element.
};

/// @brief "http://miktex.org/2015/06/repository":RepositoryInfo3 is a complexType with complexContent extension of XSD type "http://miktex.org/2015/06/repository":RepositoryInfo2.
///
/// class mtrep6__RepositoryInfo3 operations:
/// - mtrep6__RepositoryInfo3* soap_new_mtrep6__RepositoryInfo3(soap*) allocate
/// - mtrep6__RepositoryInfo3* soap_new_mtrep6__RepositoryInfo3(soap*, int num) allocate array
/// - mtrep6__RepositoryInfo3* soap_new_req_mtrep6__RepositoryInfo3(soap*, ...) allocate, set required members
/// - mtrep6__RepositoryInfo3* soap_new_set_mtrep6__RepositoryInfo3(soap*, ...) allocate, set all public members
/// - mtrep6__RepositoryInfo3::soap_default(soap*) reset members to default
/// - int soap_read_mtrep6__RepositoryInfo3(soap*, mtrep6__RepositoryInfo3*) deserialize from a stream
/// - int soap_write_mtrep6__RepositoryInfo3(soap*, mtrep6__RepositoryInfo3*) serialize to a stream
/// - mtrep6__RepositoryInfo3* mtrep6__RepositoryInfo3::soap_dup(soap*) returns deep copy of mtrep6__RepositoryInfo3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep6__RepositoryInfo3::soap_del() deep deletes mtrep6__RepositoryInfo3 data members, use only after mtrep6__RepositoryInfo3::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep6__RepositoryInfo3 : public mtrep6__RepositoryInfo2
{ public:
/*  INHERITED FROM mtrep6__RepositoryInfo:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2015/06/repository":RepositoryIntegrity.
    enum mtrep6__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2015/06/repository":PackageLevel.
    enum mtrep6__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2015/06/repository":RepositoryStatus.
    enum mtrep6__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
    END OF INHERITED FROM mtrep6__RepositoryInfo */
/*  INHERITED FROM mtrep6__RepositoryInfo2:
/// Element "CountryCode" of XSD type xs:string.
    std::string*                         CountryCode                    0;	///< Optional element.
/// Element "City" of XSD type xs:string.
    std::string*                         City                           0;	///< Optional element.
/// Element "Latitude" of XSD type xs:double.
    double                               Latitude                       1;	///< Required element.
/// Element "Longitude" of XSD type xs:double.
    double                               Longitude                      1;	///< Required element.
    END OF INHERITED FROM mtrep6__RepositoryInfo2 */
/// Element "Attributes" of XSD type xs:string.
    std::string*                         Attributes                     0;	///< Optional element.
/// Element "ReleaseState" of XSD type "http://miktex.org/2015/06/repository":RepositoryReleaseState.
    enum mtrep6__RepositoryReleaseState  ReleaseState                   1;	///< Required element.
};

/// @brief "http://miktex.org/2015/08/repository":RepositoryInfo3 is a complexType with complexContent extension of XSD type "http://miktex.org/2015/08/repository":RepositoryInfo2.
///
/// class mtrep7__RepositoryInfo3 operations:
/// - mtrep7__RepositoryInfo3* soap_new_mtrep7__RepositoryInfo3(soap*) allocate
/// - mtrep7__RepositoryInfo3* soap_new_mtrep7__RepositoryInfo3(soap*, int num) allocate array
/// - mtrep7__RepositoryInfo3* soap_new_req_mtrep7__RepositoryInfo3(soap*, ...) allocate, set required members
/// - mtrep7__RepositoryInfo3* soap_new_set_mtrep7__RepositoryInfo3(soap*, ...) allocate, set all public members
/// - mtrep7__RepositoryInfo3::soap_default(soap*) reset members to default
/// - int soap_read_mtrep7__RepositoryInfo3(soap*, mtrep7__RepositoryInfo3*) deserialize from a stream
/// - int soap_write_mtrep7__RepositoryInfo3(soap*, mtrep7__RepositoryInfo3*) serialize to a stream
/// - mtrep7__RepositoryInfo3* mtrep7__RepositoryInfo3::soap_dup(soap*) returns deep copy of mtrep7__RepositoryInfo3, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - mtrep7__RepositoryInfo3::soap_del() deep deletes mtrep7__RepositoryInfo3 data members, use only after mtrep7__RepositoryInfo3::soap_dup(NULL) (use soapcpp2 -Ed)
class mtrep7__RepositoryInfo3 : public mtrep7__RepositoryInfo2
{ public:
/*  INHERITED FROM mtrep7__RepositoryInfo:
/// Element "Country" of XSD type xs:string.
    std::string*                         Country                        0;	///< Optional element.
/// Element "Date" of XSD type xs:int.
    int                                  Date                           1;	///< Required element.
/// Element "Delay" of XSD type xs:int.
    int                                  Delay                          1;	///< Required element.
/// Element "Description" of XSD type xs:string.
    std::string*                         Description                    0;	///< Optional element.
/// Element "Integrity" of XSD type "http://miktex.org/2015/08/repository":RepositoryIntegrity.
    enum mtrep7__RepositoryIntegrity     Integrity                      1;	///< Required element.
/// Element "Level" of XSD type "http://miktex.org/2015/08/repository":PackageLevel.
    enum mtrep7__PackageLevel            Level                          1;	///< Required element.
/// Element "Status" of XSD type "http://miktex.org/2015/08/repository":RepositoryStatus.
    enum mtrep7__RepositoryStatus        Status                         1;	///< Required element.
/// Element "Url" of XSD type xs:string.
    std::string*                         Url                            0;	///< Optional element.
/// Element "Version" of XSD type xs:int.
    int                                  Version                        1;	///< Required element.
    END OF INHERITED FROM mtrep7__RepositoryInfo */
/*  INHERITED FROM mtrep7__RepositoryInfo2:
/// Element "CountryCode" of XSD type xs:string.
    std::string*                         CountryCode                    0;	///< Optional element.
/// Element "City" of XSD type xs:string.
    std::string*                         City                           0;	///< Optional element.
/// Element "Latitude" of XSD type xs:double.
    double                               Latitude                       1;	///< Required element.
/// Element "Longitude" of XSD type xs:double.
    double                               Longitude                      1;	///< Required element.
    END OF INHERITED FROM mtrep7__RepositoryInfo2 */
/// Element "Attributes" of XSD type xs:string.
    std::string*                         Attributes                     0;	///< Optional element.
/// Element "ReleaseState" of XSD type "http://miktex.org/2015/08/repository":RepositoryReleaseState.
    enum mtrep7__RepositoryReleaseState  ReleaseState                   1;	///< Required element.
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2006/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2007/03/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2007/07/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2007/10/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2008/05/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2015/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2015/06/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://miktex.org/2015/08/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://miktex.org/2015/08/repository                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap mtrep7 service name:	RepositorySoap 
//gsoap mtrep7 service type:	RepositorySoap 
//gsoap mtrep7 service port:	http://api.miktex.org/Repository.asmx 
//gsoap mtrep7 service namespace:	http://miktex.org/2015/08/repository 
//gsoap mtrep7 service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_documentation Documentation
Retrieve information about the MiKTeX package repositories.

@section Service_bindings Service Bindings

  - @ref RepositorySoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page RepositorySoap Binding "RepositorySoap"

@section RepositorySoap_service Service Documentation "RepositorySoap"
Retrieve information about the MiKTeX package repositories.

@section RepositorySoap_operations Operations of Binding "RepositorySoap"

  - @ref __mtrep7__TryGetRepositoryInfo

  - @ref __mtrep7__PickRepository

  - @ref __mtrep7__GetAllRepositories

  - @ref __mtrep7__GetRepositories

  - @ref __mtrep7__GetListCreationTime

  - @ref __mtrep7__GetRepositories2

  - @ref __mtrep7__PickRepository2

  - @ref __mtrep7__TryGetRepositoryInfo2

  - @ref __mtrep7__VerifyRepository

  - @ref __mtrep7__GetRepositories3

  - @ref __mtrep7__PickRepository3

  - @ref __mtrep7__GetRepositories4

  - @ref __mtrep7__PickRepository4

  - @ref __mtrep7__VerifyRepository2

  - @ref __mtrep7__TryGetRepositoryInfo3

  - @ref __mtrep7__TryGetRepositoryInfo_

  - @ref __mtrep7__PickRepository_

  - @ref __mtrep7__GetAllRepositories_

  - @ref __mtrep7__GetRepositories_

  - @ref __mtrep7__GetListCreationTime_

  - @ref __mtrep7__GetRepositories2_

  - @ref __mtrep7__PickRepository2_

  - @ref __mtrep7__TryGetRepositoryInfo2_

  - @ref __mtrep7__VerifyRepository_

  - @ref __mtrep7__GetRepositories3_

  - @ref __mtrep7__PickRepository3_

  - @ref __mtrep7__GetRepositories4_

  - @ref __mtrep7__PickRepository4_

  - @ref __mtrep7__VerifyRepository2_

  - @ref __mtrep7__TryGetRepositoryInfo3_

@section RepositorySoap_ports Endpoints of Binding "RepositorySoap"

  - http://api.miktex.org/Repository.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   RepositorySoap                                                           *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__TryGetRepositoryInfo                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__TryGetRepositoryInfo" of service binding "RepositorySoap".
Try to get information about a package repository (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/TryGetRepositoryInfo"

  - Addressing input action: "http://miktex.org/2006/06/repository/TryGetRepositoryInfo"

  - Addressing output action: "http://miktex.org/2006/06/repository/TryGetRepositoryInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__TryGetRepositoryInfo(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // output parameters:
    _mtrep__TryGetRepositoryInfoResponse&mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__TryGetRepositoryInfo(
    struct soap *soap,
    // input parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // output parameters:
    _mtrep__TryGetRepositoryInfoResponse&mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	TryGetRepositoryInfo SOAP
//gsoap mtrep7 service method-style:	TryGetRepositoryInfo document
//gsoap mtrep7 service method-encoding:	TryGetRepositoryInfo literal
//gsoap mtrep7 service method-input-action:	TryGetRepositoryInfo http://miktex.org/2006/06/repository/TryGetRepositoryInfo
//gsoap mtrep7 service method-output-action:	TryGetRepositoryInfo http://miktex.org/2006/06/repository/TryGetRepositoryInfoResponse
int __mtrep7__TryGetRepositoryInfo(
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,	///< Input parameter
    _mtrep__TryGetRepositoryInfoResponse&mtrep__TryGetRepositoryInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository" of service binding "RepositorySoap".
Pick out a random package repository (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/PickRepository"

  - Addressing input action: "http://miktex.org/2006/06/repository/PickRepository"

  - Addressing output action: "http://miktex.org/2006/06/repository/PickRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // output parameters:
    _mtrep__PickRepositoryResponse     &mtrep__PickRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository(
    struct soap *soap,
    // input parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // output parameters:
    _mtrep__PickRepositoryResponse     &mtrep__PickRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository SOAP
//gsoap mtrep7 service method-style:	PickRepository document
//gsoap mtrep7 service method-encoding:	PickRepository literal
//gsoap mtrep7 service method-input-action:	PickRepository http://miktex.org/2006/06/repository/PickRepository
//gsoap mtrep7 service method-output-action:	PickRepository http://miktex.org/2006/06/repository/PickRepositoryResponse
int __mtrep7__PickRepository(
    _mtrep__PickRepository*             mtrep__PickRepository,	///< Input parameter
    _mtrep__PickRepositoryResponse     &mtrep__PickRepositoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetAllRepositories                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetAllRepositories" of service binding "RepositorySoap".
Get all known package repositories (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/GetAllRepositories"

  - Addressing input action: "http://miktex.org/2006/06/repository/GetAllRepositories"

  - Addressing output action: "http://miktex.org/2006/06/repository/GetAllRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetAllRepositories(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // output parameters:
    _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetAllRepositories(
    struct soap *soap,
    // input parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // output parameters:
    _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetAllRepositories SOAP
//gsoap mtrep7 service method-style:	GetAllRepositories document
//gsoap mtrep7 service method-encoding:	GetAllRepositories literal
//gsoap mtrep7 service method-input-action:	GetAllRepositories http://miktex.org/2006/06/repository/GetAllRepositories
//gsoap mtrep7 service method-output-action:	GetAllRepositories http://miktex.org/2006/06/repository/GetAllRepositoriesResponse
int __mtrep7__GetAllRepositories(
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,	///< Input parameter
    _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories" of service binding "RepositorySoap".
Get a filtered list of known package repositories (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/GetRepositories"

  - Addressing input action: "http://miktex.org/2006/06/repository/GetRepositories"

  - Addressing output action: "http://miktex.org/2006/06/repository/GetRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // output parameters:
    _mtrep__GetRepositoriesResponse    &mtrep__GetRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories(
    struct soap *soap,
    // input parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // output parameters:
    _mtrep__GetRepositoriesResponse    &mtrep__GetRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories SOAP
//gsoap mtrep7 service method-style:	GetRepositories document
//gsoap mtrep7 service method-encoding:	GetRepositories literal
//gsoap mtrep7 service method-input-action:	GetRepositories http://miktex.org/2006/06/repository/GetRepositories
//gsoap mtrep7 service method-output-action:	GetRepositories http://miktex.org/2006/06/repository/GetRepositoriesResponse
int __mtrep7__GetRepositories(
    _mtrep__GetRepositories*            mtrep__GetRepositories,	///< Input parameter
    _mtrep__GetRepositoriesResponse    &mtrep__GetRepositoriesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetListCreationTime                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetListCreationTime" of service binding "RepositorySoap".
Get the creation date and time of the repository list.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/03/repository/GetListCreationTime"

  - Addressing input action: "http://miktex.org/2007/03/repository/GetListCreationTime"

  - Addressing output action: "http://miktex.org/2007/03/repository/GetListCreationTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetListCreationTime(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // output parameters:
    _mtrep2__GetListCreationTimeResponse&mtrep2__GetListCreationTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetListCreationTime(
    struct soap *soap,
    // input parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // output parameters:
    _mtrep2__GetListCreationTimeResponse&mtrep2__GetListCreationTimeResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetListCreationTime SOAP
//gsoap mtrep7 service method-style:	GetListCreationTime document
//gsoap mtrep7 service method-encoding:	GetListCreationTime literal
//gsoap mtrep7 service method-input-action:	GetListCreationTime http://miktex.org/2007/03/repository/GetListCreationTime
//gsoap mtrep7 service method-output-action:	GetListCreationTime http://miktex.org/2007/03/repository/GetListCreationTimeResponse
int __mtrep7__GetListCreationTime(
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,	///< Input parameter
    _mtrep2__GetListCreationTimeResponse&mtrep2__GetListCreationTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories2                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories2" of service binding "RepositorySoap".
Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/07/repository/GetRepositories2"

  - Addressing input action: "http://miktex.org/2007/07/repository/GetRepositories2"

  - Addressing output action: "http://miktex.org/2007/07/repository/GetRepositories2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // output parameters:
    _mtrep3__GetRepositories2Response  &mtrep3__GetRepositories2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories2(
    struct soap *soap,
    // input parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // output parameters:
    _mtrep3__GetRepositories2Response  &mtrep3__GetRepositories2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories2 SOAP
//gsoap mtrep7 service method-style:	GetRepositories2 document
//gsoap mtrep7 service method-encoding:	GetRepositories2 literal
//gsoap mtrep7 service method-input-action:	GetRepositories2 http://miktex.org/2007/07/repository/GetRepositories2
//gsoap mtrep7 service method-output-action:	GetRepositories2 http://miktex.org/2007/07/repository/GetRepositories2Response
int __mtrep7__GetRepositories2(
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,	///< Input parameter
    _mtrep3__GetRepositories2Response  &mtrep3__GetRepositories2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository2                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository2" of service binding "RepositorySoap".
Pick out a random package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/07/repository/PickRepository2"

  - Addressing input action: "http://miktex.org/2007/07/repository/PickRepository2"

  - Addressing output action: "http://miktex.org/2007/07/repository/PickRepository2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // output parameters:
    _mtrep3__PickRepository2Response   &mtrep3__PickRepository2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository2(
    struct soap *soap,
    // input parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // output parameters:
    _mtrep3__PickRepository2Response   &mtrep3__PickRepository2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository2 SOAP
//gsoap mtrep7 service method-style:	PickRepository2 document
//gsoap mtrep7 service method-encoding:	PickRepository2 literal
//gsoap mtrep7 service method-input-action:	PickRepository2 http://miktex.org/2007/07/repository/PickRepository2
//gsoap mtrep7 service method-output-action:	PickRepository2 http://miktex.org/2007/07/repository/PickRepository2Response
int __mtrep7__PickRepository2(
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,	///< Input parameter
    _mtrep3__PickRepository2Response   &mtrep3__PickRepository2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__TryGetRepositoryInfo2                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__TryGetRepositoryInfo2" of service binding "RepositorySoap".
Try to get information about a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2"

  - Addressing input action: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2"

  - Addressing output action: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__TryGetRepositoryInfo2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // output parameters:
    _mtrep3__TryGetRepositoryInfo2Response&mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__TryGetRepositoryInfo2(
    struct soap *soap,
    // input parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // output parameters:
    _mtrep3__TryGetRepositoryInfo2Response&mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	TryGetRepositoryInfo2 SOAP
//gsoap mtrep7 service method-style:	TryGetRepositoryInfo2 document
//gsoap mtrep7 service method-encoding:	TryGetRepositoryInfo2 literal
//gsoap mtrep7 service method-input-action:	TryGetRepositoryInfo2 http://miktex.org/2007/07/repository/TryGetRepositoryInfo2
//gsoap mtrep7 service method-output-action:	TryGetRepositoryInfo2 http://miktex.org/2007/07/repository/TryGetRepositoryInfo2Response
int __mtrep7__TryGetRepositoryInfo2(
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,	///< Input parameter
    _mtrep3__TryGetRepositoryInfo2Response&mtrep3__TryGetRepositoryInfo2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__VerifyRepository                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__VerifyRepository" of service binding "RepositorySoap".
Verify the integrity of a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/10/repository/VerifyRepository"

  - Addressing input action: "http://miktex.org/2007/10/repository/VerifyRepository"

  - Addressing output action: "http://miktex.org/2007/10/repository/VerifyRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__VerifyRepository(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // output parameters:
    _mtrep4__VerifyRepositoryResponse  &mtrep4__VerifyRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__VerifyRepository(
    struct soap *soap,
    // input parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // output parameters:
    _mtrep4__VerifyRepositoryResponse  &mtrep4__VerifyRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	VerifyRepository SOAP
//gsoap mtrep7 service method-style:	VerifyRepository document
//gsoap mtrep7 service method-encoding:	VerifyRepository literal
//gsoap mtrep7 service method-input-action:	VerifyRepository http://miktex.org/2007/10/repository/VerifyRepository
//gsoap mtrep7 service method-output-action:	VerifyRepository http://miktex.org/2007/10/repository/VerifyRepositoryResponse
int __mtrep7__VerifyRepository(
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,	///< Input parameter
    _mtrep4__VerifyRepositoryResponse  &mtrep4__VerifyRepositoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories3                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories3" of service binding "RepositorySoap".
Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2008/05/repository/GetRepositories3"

  - Addressing input action: "http://miktex.org/2008/05/repository/GetRepositories3"

  - Addressing output action: "http://miktex.org/2008/05/repository/GetRepositories3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep5__GetRepositories3*          mtrep5__GetRepositories3,
    // output parameters:
    _mtrep5__GetRepositories3Response  &mtrep5__GetRepositories3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories3(
    struct soap *soap,
    // input parameters:
    _mtrep5__GetRepositories3*          mtrep5__GetRepositories3,
    // output parameters:
    _mtrep5__GetRepositories3Response  &mtrep5__GetRepositories3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories3 SOAP
//gsoap mtrep7 service method-style:	GetRepositories3 document
//gsoap mtrep7 service method-encoding:	GetRepositories3 literal
//gsoap mtrep7 service method-input-action:	GetRepositories3 http://miktex.org/2008/05/repository/GetRepositories3
//gsoap mtrep7 service method-output-action:	GetRepositories3 http://miktex.org/2008/05/repository/GetRepositories3Response
int __mtrep7__GetRepositories3(
    _mtrep5__GetRepositories3*          mtrep5__GetRepositories3,	///< Input parameter
    _mtrep5__GetRepositories3Response  &mtrep5__GetRepositories3Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository3                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository3" of service binding "RepositorySoap".
Pick out a random package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2008/05/repository/PickRepository3"

  - Addressing input action: "http://miktex.org/2008/05/repository/PickRepository3"

  - Addressing output action: "http://miktex.org/2008/05/repository/PickRepository3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep5__PickRepository3*           mtrep5__PickRepository3,
    // output parameters:
    _mtrep5__PickRepository3Response   &mtrep5__PickRepository3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository3(
    struct soap *soap,
    // input parameters:
    _mtrep5__PickRepository3*           mtrep5__PickRepository3,
    // output parameters:
    _mtrep5__PickRepository3Response   &mtrep5__PickRepository3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository3 SOAP
//gsoap mtrep7 service method-style:	PickRepository3 document
//gsoap mtrep7 service method-encoding:	PickRepository3 literal
//gsoap mtrep7 service method-input-action:	PickRepository3 http://miktex.org/2008/05/repository/PickRepository3
//gsoap mtrep7 service method-output-action:	PickRepository3 http://miktex.org/2008/05/repository/PickRepository3Response
int __mtrep7__PickRepository3(
    _mtrep5__PickRepository3*           mtrep5__PickRepository3,	///< Input parameter
    _mtrep5__PickRepository3Response   &mtrep5__PickRepository3Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories4                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories4" of service binding "RepositorySoap".
Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/06/repository/GetRepositories4"

  - Addressing input action: "http://miktex.org/2015/06/repository/GetRepositories4"

  - Addressing output action: "http://miktex.org/2015/06/repository/GetRepositories4Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories4(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep6__GetRepositories4*          mtrep6__GetRepositories4,
    // output parameters:
    _mtrep6__GetRepositories4Response  &mtrep6__GetRepositories4Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories4(
    struct soap *soap,
    // input parameters:
    _mtrep6__GetRepositories4*          mtrep6__GetRepositories4,
    // output parameters:
    _mtrep6__GetRepositories4Response  &mtrep6__GetRepositories4Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories4 SOAP
//gsoap mtrep7 service method-style:	GetRepositories4 document
//gsoap mtrep7 service method-encoding:	GetRepositories4 literal
//gsoap mtrep7 service method-input-action:	GetRepositories4 http://miktex.org/2015/06/repository/GetRepositories4
//gsoap mtrep7 service method-output-action:	GetRepositories4 http://miktex.org/2015/06/repository/GetRepositories4Response
int __mtrep7__GetRepositories4(
    _mtrep6__GetRepositories4*          mtrep6__GetRepositories4,	///< Input parameter
    _mtrep6__GetRepositories4Response  &mtrep6__GetRepositories4Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository4                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository4" of service binding "RepositorySoap".
Pick out a random package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/06/repository/PickRepository4"

  - Addressing input action: "http://miktex.org/2015/06/repository/PickRepository4"

  - Addressing output action: "http://miktex.org/2015/06/repository/PickRepository4Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository4(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep6__PickRepository4*           mtrep6__PickRepository4,
    // output parameters:
    _mtrep6__PickRepository4Response   &mtrep6__PickRepository4Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository4(
    struct soap *soap,
    // input parameters:
    _mtrep6__PickRepository4*           mtrep6__PickRepository4,
    // output parameters:
    _mtrep6__PickRepository4Response   &mtrep6__PickRepository4Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository4 SOAP
//gsoap mtrep7 service method-style:	PickRepository4 document
//gsoap mtrep7 service method-encoding:	PickRepository4 literal
//gsoap mtrep7 service method-input-action:	PickRepository4 http://miktex.org/2015/06/repository/PickRepository4
//gsoap mtrep7 service method-output-action:	PickRepository4 http://miktex.org/2015/06/repository/PickRepository4Response
int __mtrep7__PickRepository4(
    _mtrep6__PickRepository4*           mtrep6__PickRepository4,	///< Input parameter
    _mtrep6__PickRepository4Response   &mtrep6__PickRepository4Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__VerifyRepository2                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__VerifyRepository2" of service binding "RepositorySoap".
Verify the integrity of a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/08/repository/VerifyRepository2"

  - Addressing input action: "http://miktex.org/2015/08/repository/VerifyRepository2"

  - Addressing output action: "http://miktex.org/2015/08/repository/VerifyRepository2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__VerifyRepository2(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep7__VerifyRepository2*         mtrep7__VerifyRepository2,
    // output parameters:
    _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__VerifyRepository2(
    struct soap *soap,
    // input parameters:
    _mtrep7__VerifyRepository2*         mtrep7__VerifyRepository2,
    // output parameters:
    _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	VerifyRepository2 SOAP
//gsoap mtrep7 service method-style:	VerifyRepository2 document
//gsoap mtrep7 service method-encoding:	VerifyRepository2 literal
//gsoap mtrep7 service method-input-action:	VerifyRepository2 http://miktex.org/2015/08/repository/VerifyRepository2
//gsoap mtrep7 service method-output-action:	VerifyRepository2 http://miktex.org/2015/08/repository/VerifyRepository2Response
int __mtrep7__VerifyRepository2(
    _mtrep7__VerifyRepository2*         mtrep7__VerifyRepository2,	///< Input parameter
    _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__TryGetRepositoryInfo3                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__TryGetRepositoryInfo3" of service binding "RepositorySoap".
Try to get information about a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3"

  - Addressing input action: "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3"

  - Addressing output action: "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__TryGetRepositoryInfo3(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep7__TryGetRepositoryInfo3*     mtrep7__TryGetRepositoryInfo3,
    // output parameters:
    _mtrep7__TryGetRepositoryInfo3Response&mtrep7__TryGetRepositoryInfo3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__TryGetRepositoryInfo3(
    struct soap *soap,
    // input parameters:
    _mtrep7__TryGetRepositoryInfo3*     mtrep7__TryGetRepositoryInfo3,
    // output parameters:
    _mtrep7__TryGetRepositoryInfo3Response&mtrep7__TryGetRepositoryInfo3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	TryGetRepositoryInfo3 SOAP
//gsoap mtrep7 service method-style:	TryGetRepositoryInfo3 document
//gsoap mtrep7 service method-encoding:	TryGetRepositoryInfo3 literal
//gsoap mtrep7 service method-input-action:	TryGetRepositoryInfo3 http://miktex.org/2015/08/repository/TryGetRepositoryInfo3
//gsoap mtrep7 service method-output-action:	TryGetRepositoryInfo3 http://miktex.org/2015/08/repository/TryGetRepositoryInfo3Response
int __mtrep7__TryGetRepositoryInfo3(
    _mtrep7__TryGetRepositoryInfo3*     mtrep7__TryGetRepositoryInfo3,	///< Input parameter
    _mtrep7__TryGetRepositoryInfo3Response&mtrep7__TryGetRepositoryInfo3Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__TryGetRepositoryInfo_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__TryGetRepositoryInfo_" of service binding "RepositorySoap".
Try to get information about a package repository (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/TryGetRepositoryInfo"

  - Addressing input action: "http://miktex.org/2006/06/repository/TryGetRepositoryInfo"

  - Addressing output action: "http://miktex.org/2006/06/repository/TryGetRepositoryInfoResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__TryGetRepositoryInfo_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // output parameters:
    _mtrep__TryGetRepositoryInfoResponse&mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__TryGetRepositoryInfo_(
    struct soap *soap,
    // input parameters:
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,
    // output parameters:
    _mtrep__TryGetRepositoryInfoResponse&mtrep__TryGetRepositoryInfoResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	TryGetRepositoryInfo_ SOAP
//gsoap mtrep7 service method-style:	TryGetRepositoryInfo_ document
//gsoap mtrep7 service method-encoding:	TryGetRepositoryInfo_ literal
//gsoap mtrep7 service method-input-action:	TryGetRepositoryInfo_ http://miktex.org/2006/06/repository/TryGetRepositoryInfo
//gsoap mtrep7 service method-output-action:	TryGetRepositoryInfo_ http://miktex.org/2006/06/repository/TryGetRepositoryInfoResponse
int __mtrep7__TryGetRepositoryInfo_(
    _mtrep__TryGetRepositoryInfo*       mtrep__TryGetRepositoryInfo,	///< Input parameter
    _mtrep__TryGetRepositoryInfoResponse&mtrep__TryGetRepositoryInfoResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository_                                                *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository_" of service binding "RepositorySoap".
Pick out a random package repository (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/PickRepository"

  - Addressing input action: "http://miktex.org/2006/06/repository/PickRepository"

  - Addressing output action: "http://miktex.org/2006/06/repository/PickRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // output parameters:
    _mtrep__PickRepositoryResponse     &mtrep__PickRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository_(
    struct soap *soap,
    // input parameters:
    _mtrep__PickRepository*             mtrep__PickRepository,
    // output parameters:
    _mtrep__PickRepositoryResponse     &mtrep__PickRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository_ SOAP
//gsoap mtrep7 service method-style:	PickRepository_ document
//gsoap mtrep7 service method-encoding:	PickRepository_ literal
//gsoap mtrep7 service method-input-action:	PickRepository_ http://miktex.org/2006/06/repository/PickRepository
//gsoap mtrep7 service method-output-action:	PickRepository_ http://miktex.org/2006/06/repository/PickRepositoryResponse
int __mtrep7__PickRepository_(
    _mtrep__PickRepository*             mtrep__PickRepository,	///< Input parameter
    _mtrep__PickRepositoryResponse     &mtrep__PickRepositoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetAllRepositories_                                            *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetAllRepositories_" of service binding "RepositorySoap".
Get all known package repositories (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/GetAllRepositories"

  - Addressing input action: "http://miktex.org/2006/06/repository/GetAllRepositories"

  - Addressing output action: "http://miktex.org/2006/06/repository/GetAllRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetAllRepositories_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // output parameters:
    _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetAllRepositories_(
    struct soap *soap,
    // input parameters:
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,
    // output parameters:
    _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetAllRepositories_ SOAP
//gsoap mtrep7 service method-style:	GetAllRepositories_ document
//gsoap mtrep7 service method-encoding:	GetAllRepositories_ literal
//gsoap mtrep7 service method-input-action:	GetAllRepositories_ http://miktex.org/2006/06/repository/GetAllRepositories
//gsoap mtrep7 service method-output-action:	GetAllRepositories_ http://miktex.org/2006/06/repository/GetAllRepositoriesResponse
int __mtrep7__GetAllRepositories_(
    _mtrep__GetAllRepositories*         mtrep__GetAllRepositories,	///< Input parameter
    _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories_" of service binding "RepositorySoap".
Get a filtered list of known package repositories (unsupported).

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2006/06/repository/GetRepositories"

  - Addressing input action: "http://miktex.org/2006/06/repository/GetRepositories"

  - Addressing output action: "http://miktex.org/2006/06/repository/GetRepositoriesResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // output parameters:
    _mtrep__GetRepositoriesResponse    &mtrep__GetRepositoriesResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories_(
    struct soap *soap,
    // input parameters:
    _mtrep__GetRepositories*            mtrep__GetRepositories,
    // output parameters:
    _mtrep__GetRepositoriesResponse    &mtrep__GetRepositoriesResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories_ SOAP
//gsoap mtrep7 service method-style:	GetRepositories_ document
//gsoap mtrep7 service method-encoding:	GetRepositories_ literal
//gsoap mtrep7 service method-input-action:	GetRepositories_ http://miktex.org/2006/06/repository/GetRepositories
//gsoap mtrep7 service method-output-action:	GetRepositories_ http://miktex.org/2006/06/repository/GetRepositoriesResponse
int __mtrep7__GetRepositories_(
    _mtrep__GetRepositories*            mtrep__GetRepositories,	///< Input parameter
    _mtrep__GetRepositoriesResponse    &mtrep__GetRepositoriesResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetListCreationTime_                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetListCreationTime_" of service binding "RepositorySoap".
Get the creation date and time of the repository list.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/03/repository/GetListCreationTime"

  - Addressing input action: "http://miktex.org/2007/03/repository/GetListCreationTime"

  - Addressing output action: "http://miktex.org/2007/03/repository/GetListCreationTimeResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetListCreationTime_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // output parameters:
    _mtrep2__GetListCreationTimeResponse&mtrep2__GetListCreationTimeResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetListCreationTime_(
    struct soap *soap,
    // input parameters:
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,
    // output parameters:
    _mtrep2__GetListCreationTimeResponse&mtrep2__GetListCreationTimeResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetListCreationTime_ SOAP
//gsoap mtrep7 service method-style:	GetListCreationTime_ document
//gsoap mtrep7 service method-encoding:	GetListCreationTime_ literal
//gsoap mtrep7 service method-input-action:	GetListCreationTime_ http://miktex.org/2007/03/repository/GetListCreationTime
//gsoap mtrep7 service method-output-action:	GetListCreationTime_ http://miktex.org/2007/03/repository/GetListCreationTimeResponse
int __mtrep7__GetListCreationTime_(
    _mtrep2__GetListCreationTime*       mtrep2__GetListCreationTime,	///< Input parameter
    _mtrep2__GetListCreationTimeResponse&mtrep2__GetListCreationTimeResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories2_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories2_" of service binding "RepositorySoap".
Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/07/repository/GetRepositories2"

  - Addressing input action: "http://miktex.org/2007/07/repository/GetRepositories2"

  - Addressing output action: "http://miktex.org/2007/07/repository/GetRepositories2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // output parameters:
    _mtrep3__GetRepositories2Response  &mtrep3__GetRepositories2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories2_(
    struct soap *soap,
    // input parameters:
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,
    // output parameters:
    _mtrep3__GetRepositories2Response  &mtrep3__GetRepositories2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories2_ SOAP
//gsoap mtrep7 service method-style:	GetRepositories2_ document
//gsoap mtrep7 service method-encoding:	GetRepositories2_ literal
//gsoap mtrep7 service method-input-action:	GetRepositories2_ http://miktex.org/2007/07/repository/GetRepositories2
//gsoap mtrep7 service method-output-action:	GetRepositories2_ http://miktex.org/2007/07/repository/GetRepositories2Response
int __mtrep7__GetRepositories2_(
    _mtrep3__GetRepositories2*          mtrep3__GetRepositories2,	///< Input parameter
    _mtrep3__GetRepositories2Response  &mtrep3__GetRepositories2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository2_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository2_" of service binding "RepositorySoap".
Pick out a random package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/07/repository/PickRepository2"

  - Addressing input action: "http://miktex.org/2007/07/repository/PickRepository2"

  - Addressing output action: "http://miktex.org/2007/07/repository/PickRepository2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // output parameters:
    _mtrep3__PickRepository2Response   &mtrep3__PickRepository2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository2_(
    struct soap *soap,
    // input parameters:
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,
    // output parameters:
    _mtrep3__PickRepository2Response   &mtrep3__PickRepository2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository2_ SOAP
//gsoap mtrep7 service method-style:	PickRepository2_ document
//gsoap mtrep7 service method-encoding:	PickRepository2_ literal
//gsoap mtrep7 service method-input-action:	PickRepository2_ http://miktex.org/2007/07/repository/PickRepository2
//gsoap mtrep7 service method-output-action:	PickRepository2_ http://miktex.org/2007/07/repository/PickRepository2Response
int __mtrep7__PickRepository2_(
    _mtrep3__PickRepository2*           mtrep3__PickRepository2,	///< Input parameter
    _mtrep3__PickRepository2Response   &mtrep3__PickRepository2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__TryGetRepositoryInfo2_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__TryGetRepositoryInfo2_" of service binding "RepositorySoap".
Try to get information about a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2"

  - Addressing input action: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2"

  - Addressing output action: "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__TryGetRepositoryInfo2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // output parameters:
    _mtrep3__TryGetRepositoryInfo2Response&mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__TryGetRepositoryInfo2_(
    struct soap *soap,
    // input parameters:
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,
    // output parameters:
    _mtrep3__TryGetRepositoryInfo2Response&mtrep3__TryGetRepositoryInfo2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	TryGetRepositoryInfo2_ SOAP
//gsoap mtrep7 service method-style:	TryGetRepositoryInfo2_ document
//gsoap mtrep7 service method-encoding:	TryGetRepositoryInfo2_ literal
//gsoap mtrep7 service method-input-action:	TryGetRepositoryInfo2_ http://miktex.org/2007/07/repository/TryGetRepositoryInfo2
//gsoap mtrep7 service method-output-action:	TryGetRepositoryInfo2_ http://miktex.org/2007/07/repository/TryGetRepositoryInfo2Response
int __mtrep7__TryGetRepositoryInfo2_(
    _mtrep3__TryGetRepositoryInfo2*     mtrep3__TryGetRepositoryInfo2,	///< Input parameter
    _mtrep3__TryGetRepositoryInfo2Response&mtrep3__TryGetRepositoryInfo2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__VerifyRepository_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__VerifyRepository_" of service binding "RepositorySoap".
Verify the integrity of a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2007/10/repository/VerifyRepository"

  - Addressing input action: "http://miktex.org/2007/10/repository/VerifyRepository"

  - Addressing output action: "http://miktex.org/2007/10/repository/VerifyRepositoryResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__VerifyRepository_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // output parameters:
    _mtrep4__VerifyRepositoryResponse  &mtrep4__VerifyRepositoryResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__VerifyRepository_(
    struct soap *soap,
    // input parameters:
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,
    // output parameters:
    _mtrep4__VerifyRepositoryResponse  &mtrep4__VerifyRepositoryResponse
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	VerifyRepository_ SOAP
//gsoap mtrep7 service method-style:	VerifyRepository_ document
//gsoap mtrep7 service method-encoding:	VerifyRepository_ literal
//gsoap mtrep7 service method-input-action:	VerifyRepository_ http://miktex.org/2007/10/repository/VerifyRepository
//gsoap mtrep7 service method-output-action:	VerifyRepository_ http://miktex.org/2007/10/repository/VerifyRepositoryResponse
int __mtrep7__VerifyRepository_(
    _mtrep4__VerifyRepository*          mtrep4__VerifyRepository,	///< Input parameter
    _mtrep4__VerifyRepositoryResponse  &mtrep4__VerifyRepositoryResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories3_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories3_" of service binding "RepositorySoap".
Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2008/05/repository/GetRepositories3"

  - Addressing input action: "http://miktex.org/2008/05/repository/GetRepositories3"

  - Addressing output action: "http://miktex.org/2008/05/repository/GetRepositories3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories3_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep5__GetRepositories3*          mtrep5__GetRepositories3,
    // output parameters:
    _mtrep5__GetRepositories3Response  &mtrep5__GetRepositories3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories3_(
    struct soap *soap,
    // input parameters:
    _mtrep5__GetRepositories3*          mtrep5__GetRepositories3,
    // output parameters:
    _mtrep5__GetRepositories3Response  &mtrep5__GetRepositories3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories3_ SOAP
//gsoap mtrep7 service method-style:	GetRepositories3_ document
//gsoap mtrep7 service method-encoding:	GetRepositories3_ literal
//gsoap mtrep7 service method-input-action:	GetRepositories3_ http://miktex.org/2008/05/repository/GetRepositories3
//gsoap mtrep7 service method-output-action:	GetRepositories3_ http://miktex.org/2008/05/repository/GetRepositories3Response
int __mtrep7__GetRepositories3_(
    _mtrep5__GetRepositories3*          mtrep5__GetRepositories3,	///< Input parameter
    _mtrep5__GetRepositories3Response  &mtrep5__GetRepositories3Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository3_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository3_" of service binding "RepositorySoap".
Pick out a random package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2008/05/repository/PickRepository3"

  - Addressing input action: "http://miktex.org/2008/05/repository/PickRepository3"

  - Addressing output action: "http://miktex.org/2008/05/repository/PickRepository3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository3_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep5__PickRepository3*           mtrep5__PickRepository3,
    // output parameters:
    _mtrep5__PickRepository3Response   &mtrep5__PickRepository3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository3_(
    struct soap *soap,
    // input parameters:
    _mtrep5__PickRepository3*           mtrep5__PickRepository3,
    // output parameters:
    _mtrep5__PickRepository3Response   &mtrep5__PickRepository3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository3_ SOAP
//gsoap mtrep7 service method-style:	PickRepository3_ document
//gsoap mtrep7 service method-encoding:	PickRepository3_ literal
//gsoap mtrep7 service method-input-action:	PickRepository3_ http://miktex.org/2008/05/repository/PickRepository3
//gsoap mtrep7 service method-output-action:	PickRepository3_ http://miktex.org/2008/05/repository/PickRepository3Response
int __mtrep7__PickRepository3_(
    _mtrep5__PickRepository3*           mtrep5__PickRepository3,	///< Input parameter
    _mtrep5__PickRepository3Response   &mtrep5__PickRepository3Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__GetRepositories4_                                              *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__GetRepositories4_" of service binding "RepositorySoap".
Get a filtered list of known package repositories.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/06/repository/GetRepositories4"

  - Addressing input action: "http://miktex.org/2015/06/repository/GetRepositories4"

  - Addressing output action: "http://miktex.org/2015/06/repository/GetRepositories4Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__GetRepositories4_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep6__GetRepositories4*          mtrep6__GetRepositories4,
    // output parameters:
    _mtrep6__GetRepositories4Response  &mtrep6__GetRepositories4Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__GetRepositories4_(
    struct soap *soap,
    // input parameters:
    _mtrep6__GetRepositories4*          mtrep6__GetRepositories4,
    // output parameters:
    _mtrep6__GetRepositories4Response  &mtrep6__GetRepositories4Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	GetRepositories4_ SOAP
//gsoap mtrep7 service method-style:	GetRepositories4_ document
//gsoap mtrep7 service method-encoding:	GetRepositories4_ literal
//gsoap mtrep7 service method-input-action:	GetRepositories4_ http://miktex.org/2015/06/repository/GetRepositories4
//gsoap mtrep7 service method-output-action:	GetRepositories4_ http://miktex.org/2015/06/repository/GetRepositories4Response
int __mtrep7__GetRepositories4_(
    _mtrep6__GetRepositories4*          mtrep6__GetRepositories4,	///< Input parameter
    _mtrep6__GetRepositories4Response  &mtrep6__GetRepositories4Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__PickRepository4_                                               *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__PickRepository4_" of service binding "RepositorySoap".
Pick out a random package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/06/repository/PickRepository4"

  - Addressing input action: "http://miktex.org/2015/06/repository/PickRepository4"

  - Addressing output action: "http://miktex.org/2015/06/repository/PickRepository4Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__PickRepository4_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep6__PickRepository4*           mtrep6__PickRepository4,
    // output parameters:
    _mtrep6__PickRepository4Response   &mtrep6__PickRepository4Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__PickRepository4_(
    struct soap *soap,
    // input parameters:
    _mtrep6__PickRepository4*           mtrep6__PickRepository4,
    // output parameters:
    _mtrep6__PickRepository4Response   &mtrep6__PickRepository4Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	PickRepository4_ SOAP
//gsoap mtrep7 service method-style:	PickRepository4_ document
//gsoap mtrep7 service method-encoding:	PickRepository4_ literal
//gsoap mtrep7 service method-input-action:	PickRepository4_ http://miktex.org/2015/06/repository/PickRepository4
//gsoap mtrep7 service method-output-action:	PickRepository4_ http://miktex.org/2015/06/repository/PickRepository4Response
int __mtrep7__PickRepository4_(
    _mtrep6__PickRepository4*           mtrep6__PickRepository4,	///< Input parameter
    _mtrep6__PickRepository4Response   &mtrep6__PickRepository4Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__VerifyRepository2_                                             *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__VerifyRepository2_" of service binding "RepositorySoap".
Verify the integrity of a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/08/repository/VerifyRepository2"

  - Addressing input action: "http://miktex.org/2015/08/repository/VerifyRepository2"

  - Addressing output action: "http://miktex.org/2015/08/repository/VerifyRepository2Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__VerifyRepository2_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep7__VerifyRepository2*         mtrep7__VerifyRepository2,
    // output parameters:
    _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__VerifyRepository2_(
    struct soap *soap,
    // input parameters:
    _mtrep7__VerifyRepository2*         mtrep7__VerifyRepository2,
    // output parameters:
    _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	VerifyRepository2_ SOAP
//gsoap mtrep7 service method-style:	VerifyRepository2_ document
//gsoap mtrep7 service method-encoding:	VerifyRepository2_ literal
//gsoap mtrep7 service method-input-action:	VerifyRepository2_ http://miktex.org/2015/08/repository/VerifyRepository2
//gsoap mtrep7 service method-output-action:	VerifyRepository2_ http://miktex.org/2015/08/repository/VerifyRepository2Response
int __mtrep7__VerifyRepository2_(
    _mtrep7__VerifyRepository2*         mtrep7__VerifyRepository2,	///< Input parameter
    _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __mtrep7__TryGetRepositoryInfo3_                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__mtrep7__TryGetRepositoryInfo3_" of service binding "RepositorySoap".
Try to get information about a package repository.

  - SOAP document/literal style messaging

  - Action or location: "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3"

  - Addressing input action: "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3"

  - Addressing output action: "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3Response"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___mtrep7__TryGetRepositoryInfo3_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _mtrep7__TryGetRepositoryInfo3*     mtrep7__TryGetRepositoryInfo3,
    // output parameters:
    _mtrep7__TryGetRepositoryInfo3Response&mtrep7__TryGetRepositoryInfo3Response
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __mtrep7__TryGetRepositoryInfo3_(
    struct soap *soap,
    // input parameters:
    _mtrep7__TryGetRepositoryInfo3*     mtrep7__TryGetRepositoryInfo3,
    // output parameters:
    _mtrep7__TryGetRepositoryInfo3Response&mtrep7__TryGetRepositoryInfo3Response
  );
@endcode

C++ proxy class (defined in soapRepositorySoapProxy.h):
@code
  class RepositorySoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapRepositorySoapService.h):
@code
  class RepositorySoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap mtrep7 service method-protocol:	TryGetRepositoryInfo3_ SOAP
//gsoap mtrep7 service method-style:	TryGetRepositoryInfo3_ document
//gsoap mtrep7 service method-encoding:	TryGetRepositoryInfo3_ literal
//gsoap mtrep7 service method-input-action:	TryGetRepositoryInfo3_ http://miktex.org/2015/08/repository/TryGetRepositoryInfo3
//gsoap mtrep7 service method-output-action:	TryGetRepositoryInfo3_ http://miktex.org/2015/08/repository/TryGetRepositoryInfo3Response
int __mtrep7__TryGetRepositoryInfo3_(
    _mtrep7__TryGetRepositoryInfo3*     mtrep7__TryGetRepositoryInfo3,	///< Input parameter
    _mtrep7__TryGetRepositoryInfo3Response&mtrep7__TryGetRepositoryInfo3Response	///< Output parameter
);

/**

@page RepositorySoap Binding "RepositorySoap"

@section RepositorySoap_policy_enablers Policy Enablers of Binding "RepositorySoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section mtrep Top-level root elements of schema "http://miktex.org/2006/06/repository"

  - <mtrep:TryGetRepositoryInfo> @ref _mtrep__TryGetRepositoryInfo
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__TryGetRepositoryInfo(struct soap*, _mtrep__TryGetRepositoryInfo*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__TryGetRepositoryInfo(struct soap*, _mtrep__TryGetRepositoryInfo*);
    @endcode

  - <mtrep:TryGetRepositoryInfoResponse> @ref _mtrep__TryGetRepositoryInfoResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__TryGetRepositoryInfoResponse(struct soap*, _mtrep__TryGetRepositoryInfoResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__TryGetRepositoryInfoResponse(struct soap*, _mtrep__TryGetRepositoryInfoResponse*);
    @endcode

  - <mtrep:PickRepository> @ref _mtrep__PickRepository
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__PickRepository(struct soap*, _mtrep__PickRepository*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__PickRepository(struct soap*, _mtrep__PickRepository*);
    @endcode

  - <mtrep:PickRepositoryResponse> @ref _mtrep__PickRepositoryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__PickRepositoryResponse(struct soap*, _mtrep__PickRepositoryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__PickRepositoryResponse(struct soap*, _mtrep__PickRepositoryResponse*);
    @endcode

  - <mtrep:GetAllRepositories> @ref _mtrep__GetAllRepositories
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetAllRepositories(struct soap*, _mtrep__GetAllRepositories*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetAllRepositories(struct soap*, _mtrep__GetAllRepositories*);
    @endcode

  - <mtrep:GetAllRepositoriesResponse> @ref _mtrep__GetAllRepositoriesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetAllRepositoriesResponse(struct soap*, _mtrep__GetAllRepositoriesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetAllRepositoriesResponse(struct soap*, _mtrep__GetAllRepositoriesResponse*);
    @endcode

  - <mtrep:GetRepositories> @ref _mtrep__GetRepositories
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetRepositories(struct soap*, _mtrep__GetRepositories*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetRepositories(struct soap*, _mtrep__GetRepositories*);
    @endcode

  - <mtrep:GetRepositoriesResponse> @ref _mtrep__GetRepositoriesResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep__GetRepositoriesResponse(struct soap*, _mtrep__GetRepositoriesResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep__GetRepositoriesResponse(struct soap*, _mtrep__GetRepositoriesResponse*);
    @endcode

@section mtrep2 Top-level root elements of schema "http://miktex.org/2007/03/repository"

  - <mtrep2:GetListCreationTime> @ref _mtrep2__GetListCreationTime
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep2__GetListCreationTime(struct soap*, _mtrep2__GetListCreationTime*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep2__GetListCreationTime(struct soap*, _mtrep2__GetListCreationTime*);
    @endcode

  - <mtrep2:GetListCreationTimeResponse> @ref _mtrep2__GetListCreationTimeResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep2__GetListCreationTimeResponse(struct soap*, _mtrep2__GetListCreationTimeResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep2__GetListCreationTimeResponse(struct soap*, _mtrep2__GetListCreationTimeResponse*);
    @endcode

@section mtrep3 Top-level root elements of schema "http://miktex.org/2007/07/repository"

  - <mtrep3:GetRepositories2> @ref _mtrep3__GetRepositories2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__GetRepositories2(struct soap*, _mtrep3__GetRepositories2*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__GetRepositories2(struct soap*, _mtrep3__GetRepositories2*);
    @endcode

  - <mtrep3:GetRepositories2Response> @ref _mtrep3__GetRepositories2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__GetRepositories2Response(struct soap*, _mtrep3__GetRepositories2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__GetRepositories2Response(struct soap*, _mtrep3__GetRepositories2Response*);
    @endcode

  - <mtrep3:PickRepository2> @ref _mtrep3__PickRepository2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__PickRepository2(struct soap*, _mtrep3__PickRepository2*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__PickRepository2(struct soap*, _mtrep3__PickRepository2*);
    @endcode

  - <mtrep3:PickRepository2Response> @ref _mtrep3__PickRepository2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__PickRepository2Response(struct soap*, _mtrep3__PickRepository2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__PickRepository2Response(struct soap*, _mtrep3__PickRepository2Response*);
    @endcode

  - <mtrep3:TryGetRepositoryInfo2> @ref _mtrep3__TryGetRepositoryInfo2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__TryGetRepositoryInfo2(struct soap*, _mtrep3__TryGetRepositoryInfo2*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__TryGetRepositoryInfo2(struct soap*, _mtrep3__TryGetRepositoryInfo2*);
    @endcode

  - <mtrep3:TryGetRepositoryInfo2Response> @ref _mtrep3__TryGetRepositoryInfo2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep3__TryGetRepositoryInfo2Response(struct soap*, _mtrep3__TryGetRepositoryInfo2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep3__TryGetRepositoryInfo2Response(struct soap*, _mtrep3__TryGetRepositoryInfo2Response*);
    @endcode

@section mtrep4 Top-level root elements of schema "http://miktex.org/2007/10/repository"

  - <mtrep4:VerifyRepository> @ref _mtrep4__VerifyRepository
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep4__VerifyRepository(struct soap*, _mtrep4__VerifyRepository*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep4__VerifyRepository(struct soap*, _mtrep4__VerifyRepository*);
    @endcode

  - <mtrep4:VerifyRepositoryResponse> @ref _mtrep4__VerifyRepositoryResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep4__VerifyRepositoryResponse(struct soap*, _mtrep4__VerifyRepositoryResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep4__VerifyRepositoryResponse(struct soap*, _mtrep4__VerifyRepositoryResponse*);
    @endcode

@section mtrep5 Top-level root elements of schema "http://miktex.org/2008/05/repository"

  - <mtrep5:GetRepositories3> @ref _mtrep5__GetRepositories3
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep5__GetRepositories3(struct soap*, _mtrep5__GetRepositories3*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep5__GetRepositories3(struct soap*, _mtrep5__GetRepositories3*);
    @endcode

  - <mtrep5:GetRepositories3Response> @ref _mtrep5__GetRepositories3Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep5__GetRepositories3Response(struct soap*, _mtrep5__GetRepositories3Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep5__GetRepositories3Response(struct soap*, _mtrep5__GetRepositories3Response*);
    @endcode

  - <mtrep5:PickRepository3> @ref _mtrep5__PickRepository3
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep5__PickRepository3(struct soap*, _mtrep5__PickRepository3*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep5__PickRepository3(struct soap*, _mtrep5__PickRepository3*);
    @endcode

  - <mtrep5:PickRepository3Response> @ref _mtrep5__PickRepository3Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep5__PickRepository3Response(struct soap*, _mtrep5__PickRepository3Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep5__PickRepository3Response(struct soap*, _mtrep5__PickRepository3Response*);
    @endcode

@section mtrep6 Top-level root elements of schema "http://miktex.org/2015/06/repository"

  - <mtrep6:GetRepositories4> @ref _mtrep6__GetRepositories4
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep6__GetRepositories4(struct soap*, _mtrep6__GetRepositories4*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep6__GetRepositories4(struct soap*, _mtrep6__GetRepositories4*);
    @endcode

  - <mtrep6:GetRepositories4Response> @ref _mtrep6__GetRepositories4Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep6__GetRepositories4Response(struct soap*, _mtrep6__GetRepositories4Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep6__GetRepositories4Response(struct soap*, _mtrep6__GetRepositories4Response*);
    @endcode

  - <mtrep6:PickRepository4> @ref _mtrep6__PickRepository4
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep6__PickRepository4(struct soap*, _mtrep6__PickRepository4*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep6__PickRepository4(struct soap*, _mtrep6__PickRepository4*);
    @endcode

  - <mtrep6:PickRepository4Response> @ref _mtrep6__PickRepository4Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep6__PickRepository4Response(struct soap*, _mtrep6__PickRepository4Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep6__PickRepository4Response(struct soap*, _mtrep6__PickRepository4Response*);
    @endcode

@section mtrep7 Top-level root elements of schema "http://miktex.org/2015/08/repository"

  - <mtrep7:VerifyRepository2> @ref _mtrep7__VerifyRepository2
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep7__VerifyRepository2(struct soap*, _mtrep7__VerifyRepository2*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep7__VerifyRepository2(struct soap*, _mtrep7__VerifyRepository2*);
    @endcode

  - <mtrep7:VerifyRepository2Response> @ref _mtrep7__VerifyRepository2Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep7__VerifyRepository2Response(struct soap*, _mtrep7__VerifyRepository2Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep7__VerifyRepository2Response(struct soap*, _mtrep7__VerifyRepository2Response*);
    @endcode

  - <mtrep7:TryGetRepositoryInfo3> @ref _mtrep7__TryGetRepositoryInfo3
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep7__TryGetRepositoryInfo3(struct soap*, _mtrep7__TryGetRepositoryInfo3*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep7__TryGetRepositoryInfo3(struct soap*, _mtrep7__TryGetRepositoryInfo3*);
    @endcode

  - <mtrep7:TryGetRepositoryInfo3Response> @ref _mtrep7__TryGetRepositoryInfo3Response
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__mtrep7__TryGetRepositoryInfo3Response(struct soap*, _mtrep7__TryGetRepositoryInfo3Response*);
    // Writer (returns SOAP_OK on success):
    soap_write__mtrep7__TryGetRepositoryInfo3Response(struct soap*, _mtrep7__TryGetRepositoryInfo3Response*);
    @endcode

*/

/* End of Repository.h */
