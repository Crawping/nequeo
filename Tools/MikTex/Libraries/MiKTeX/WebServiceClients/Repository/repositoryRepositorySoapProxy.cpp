/* repositoryRepositorySoapProxy.cpp
   Generated by gSOAP 2.8.29 for Repository.h

gSOAP XML Web services tools
Copyright (C) 2000-2016, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "repositoryRepositorySoapProxy.h"

RepositorySoapProxy::RepositorySoapProxy() : soap(SOAP_IO_DEFAULT)
{	RepositorySoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

RepositorySoapProxy::RepositorySoapProxy(const RepositorySoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

RepositorySoapProxy::RepositorySoapProxy(const struct soap &_soap) : soap(_soap)
{ }

RepositorySoapProxy::RepositorySoapProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	RepositorySoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

RepositorySoapProxy::RepositorySoapProxy(soap_mode iomode) : soap(iomode)
{	RepositorySoapProxy_init(iomode, iomode);
}

RepositorySoapProxy::RepositorySoapProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	RepositorySoapProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

RepositorySoapProxy::RepositorySoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	RepositorySoapProxy_init(imode, omode);
}

RepositorySoapProxy::~RepositorySoapProxy()
{
	this->destroy();
	}

void RepositorySoapProxy::RepositorySoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
        {"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"mtrep", "http://miktex.org/2006/06/repository", NULL, NULL},
        {"mtrep2", "http://miktex.org/2007/03/repository", NULL, NULL},
        {"mtrep3", "http://miktex.org/2007/07/repository", NULL, NULL},
        {"mtrep4", "http://miktex.org/2007/10/repository", NULL, NULL},
        {"mtrep5", "http://miktex.org/2008/05/repository", NULL, NULL},
        {"mtrep6", "http://miktex.org/2015/06/repository", NULL, NULL},
        {"mtrep7", "http://miktex.org/2015/08/repository", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
RepositorySoapProxy *RepositorySoapProxy::copy()
{	RepositorySoapProxy *dup = SOAP_NEW_COPY(RepositorySoapProxy(*(struct soap*)this));
	return dup;
}
#endif

RepositorySoapProxy& RepositorySoapProxy::operator=(const RepositorySoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void RepositorySoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void RepositorySoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	RepositorySoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void RepositorySoapProxy::soap_noheader()
{	this->header = NULL;
}

const SOAP_ENV__Header *RepositorySoapProxy::soap_header()
{	return this->header;
}

const SOAP_ENV__Fault *RepositorySoapProxy::soap_fault()
{	return this->fault;
}

const char *RepositorySoapProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *RepositorySoapProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int RepositorySoapProxy::soap_close_socket()
{	return soap_closesock(this);
}

int RepositorySoapProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void RepositorySoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void RepositorySoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *RepositorySoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int RepositorySoapProxy::TryGetRepositoryInfo(const char *endpoint, const char *soap_action, _mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo, _mtrep__TryGetRepositoryInfoResponse &mtrep__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __mtrep7__TryGetRepositoryInfo soap_tmp___mtrep7__TryGetRepositoryInfo;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/TryGetRepositoryInfo";
	soap_tmp___mtrep7__TryGetRepositoryInfo.mtrep__TryGetRepositoryInfo = mtrep__TryGetRepositoryInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__TryGetRepositoryInfo(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__TryGetRepositoryInfo(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo, "-mtrep7:TryGetRepositoryInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__TryGetRepositoryInfo(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo, "-mtrep7:TryGetRepositoryInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse.soap_get(soap, "mtrep:TryGetRepositoryInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository(const char *endpoint, const char *soap_action, _mtrep__PickRepository *mtrep__PickRepository, _mtrep__PickRepositoryResponse &mtrep__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository soap_tmp___mtrep7__PickRepository;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/PickRepository";
	soap_tmp___mtrep7__PickRepository.mtrep__PickRepository = mtrep__PickRepository;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository(soap, &soap_tmp___mtrep7__PickRepository);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository(soap, &soap_tmp___mtrep7__PickRepository, "-mtrep7:PickRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository(soap, &soap_tmp___mtrep7__PickRepository, "-mtrep7:PickRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__PickRepositoryResponse)
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse.soap_get(soap, "mtrep:PickRepositoryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories(const char *endpoint, const char *soap_action, _mtrep__GetAllRepositories *mtrep__GetAllRepositories, _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep7__GetAllRepositories soap_tmp___mtrep7__GetAllRepositories;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/GetAllRepositories";
	soap_tmp___mtrep7__GetAllRepositories.mtrep__GetAllRepositories = mtrep__GetAllRepositories;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetAllRepositories(soap, &soap_tmp___mtrep7__GetAllRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetAllRepositories(soap, &soap_tmp___mtrep7__GetAllRepositories, "-mtrep7:GetAllRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetAllRepositories(soap, &soap_tmp___mtrep7__GetAllRepositories, "-mtrep7:GetAllRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse.soap_get(soap, "mtrep:GetAllRepositoriesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories(const char *endpoint, const char *soap_action, _mtrep__GetRepositories *mtrep__GetRepositories, _mtrep__GetRepositoriesResponse &mtrep__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories soap_tmp___mtrep7__GetRepositories;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/GetRepositories";
	soap_tmp___mtrep7__GetRepositories.mtrep__GetRepositories = mtrep__GetRepositories;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories(soap, &soap_tmp___mtrep7__GetRepositories);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories(soap, &soap_tmp___mtrep7__GetRepositories, "-mtrep7:GetRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories(soap, &soap_tmp___mtrep7__GetRepositories, "-mtrep7:GetRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__GetRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse.soap_get(soap, "mtrep:GetRepositoriesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetListCreationTime(const char *endpoint, const char *soap_action, _mtrep2__GetListCreationTime *mtrep2__GetListCreationTime, _mtrep2__GetListCreationTimeResponse &mtrep2__GetListCreationTimeResponse)
{	struct soap *soap = this;
	struct __mtrep7__GetListCreationTime soap_tmp___mtrep7__GetListCreationTime;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/03/repository/GetListCreationTime";
	soap_tmp___mtrep7__GetListCreationTime.mtrep2__GetListCreationTime = mtrep2__GetListCreationTime;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetListCreationTime(soap, &soap_tmp___mtrep7__GetListCreationTime);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetListCreationTime(soap, &soap_tmp___mtrep7__GetListCreationTime, "-mtrep7:GetListCreationTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetListCreationTime(soap, &soap_tmp___mtrep7__GetListCreationTime, "-mtrep7:GetListCreationTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep2__GetListCreationTimeResponse)
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse.soap_get(soap, "mtrep2:GetListCreationTimeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories2(const char *endpoint, const char *soap_action, _mtrep3__GetRepositories2 *mtrep3__GetRepositories2, _mtrep3__GetRepositories2Response &mtrep3__GetRepositories2Response)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories2 soap_tmp___mtrep7__GetRepositories2;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/07/repository/GetRepositories2";
	soap_tmp___mtrep7__GetRepositories2.mtrep3__GetRepositories2 = mtrep3__GetRepositories2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories2(soap, &soap_tmp___mtrep7__GetRepositories2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories2(soap, &soap_tmp___mtrep7__GetRepositories2, "-mtrep7:GetRepositories2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories2(soap, &soap_tmp___mtrep7__GetRepositories2, "-mtrep7:GetRepositories2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep3__GetRepositories2Response)
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response.soap_get(soap, "mtrep3:GetRepositories2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository2(const char *endpoint, const char *soap_action, _mtrep3__PickRepository2 *mtrep3__PickRepository2, _mtrep3__PickRepository2Response &mtrep3__PickRepository2Response)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository2 soap_tmp___mtrep7__PickRepository2;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/07/repository/PickRepository2";
	soap_tmp___mtrep7__PickRepository2.mtrep3__PickRepository2 = mtrep3__PickRepository2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository2(soap, &soap_tmp___mtrep7__PickRepository2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository2(soap, &soap_tmp___mtrep7__PickRepository2, "-mtrep7:PickRepository2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository2(soap, &soap_tmp___mtrep7__PickRepository2, "-mtrep7:PickRepository2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep3__PickRepository2Response)
		return soap_closesock(soap);
	mtrep3__PickRepository2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__PickRepository2Response.soap_get(soap, "mtrep3:PickRepository2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo2(const char *endpoint, const char *soap_action, _mtrep3__TryGetRepositoryInfo2 *mtrep3__TryGetRepositoryInfo2, _mtrep3__TryGetRepositoryInfo2Response &mtrep3__TryGetRepositoryInfo2Response)
{	struct soap *soap = this;
	struct __mtrep7__TryGetRepositoryInfo2 soap_tmp___mtrep7__TryGetRepositoryInfo2;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2";
	soap_tmp___mtrep7__TryGetRepositoryInfo2.mtrep3__TryGetRepositoryInfo2 = mtrep3__TryGetRepositoryInfo2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__TryGetRepositoryInfo2(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__TryGetRepositoryInfo2(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo2, "-mtrep7:TryGetRepositoryInfo2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__TryGetRepositoryInfo2(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo2, "-mtrep7:TryGetRepositoryInfo2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep3__TryGetRepositoryInfo2Response)
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response.soap_get(soap, "mtrep3:TryGetRepositoryInfo2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::VerifyRepository(const char *endpoint, const char *soap_action, _mtrep4__VerifyRepository *mtrep4__VerifyRepository, _mtrep4__VerifyRepositoryResponse &mtrep4__VerifyRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep7__VerifyRepository soap_tmp___mtrep7__VerifyRepository;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/10/repository/VerifyRepository";
	soap_tmp___mtrep7__VerifyRepository.mtrep4__VerifyRepository = mtrep4__VerifyRepository;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__VerifyRepository(soap, &soap_tmp___mtrep7__VerifyRepository);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__VerifyRepository(soap, &soap_tmp___mtrep7__VerifyRepository, "-mtrep7:VerifyRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__VerifyRepository(soap, &soap_tmp___mtrep7__VerifyRepository, "-mtrep7:VerifyRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep4__VerifyRepositoryResponse)
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse.soap_get(soap, "mtrep4:VerifyRepositoryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories3(const char *endpoint, const char *soap_action, _mtrep5__GetRepositories3 *mtrep5__GetRepositories3, _mtrep5__GetRepositories3Response &mtrep5__GetRepositories3Response)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories3 soap_tmp___mtrep7__GetRepositories3;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2008/05/repository/GetRepositories3";
	soap_tmp___mtrep7__GetRepositories3.mtrep5__GetRepositories3 = mtrep5__GetRepositories3;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories3(soap, &soap_tmp___mtrep7__GetRepositories3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories3(soap, &soap_tmp___mtrep7__GetRepositories3, "-mtrep7:GetRepositories3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories3(soap, &soap_tmp___mtrep7__GetRepositories3, "-mtrep7:GetRepositories3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep5__GetRepositories3Response)
		return soap_closesock(soap);
	mtrep5__GetRepositories3Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep5__GetRepositories3Response.soap_get(soap, "mtrep5:GetRepositories3Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository3(const char *endpoint, const char *soap_action, _mtrep5__PickRepository3 *mtrep5__PickRepository3, _mtrep5__PickRepository3Response &mtrep5__PickRepository3Response)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository3 soap_tmp___mtrep7__PickRepository3;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2008/05/repository/PickRepository3";
	soap_tmp___mtrep7__PickRepository3.mtrep5__PickRepository3 = mtrep5__PickRepository3;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository3(soap, &soap_tmp___mtrep7__PickRepository3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository3(soap, &soap_tmp___mtrep7__PickRepository3, "-mtrep7:PickRepository3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository3(soap, &soap_tmp___mtrep7__PickRepository3, "-mtrep7:PickRepository3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep5__PickRepository3Response)
		return soap_closesock(soap);
	mtrep5__PickRepository3Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep5__PickRepository3Response.soap_get(soap, "mtrep5:PickRepository3Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories4(const char *endpoint, const char *soap_action, _mtrep6__GetRepositories4 *mtrep6__GetRepositories4, _mtrep6__GetRepositories4Response &mtrep6__GetRepositories4Response)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories4 soap_tmp___mtrep7__GetRepositories4;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/06/repository/GetRepositories4";
	soap_tmp___mtrep7__GetRepositories4.mtrep6__GetRepositories4 = mtrep6__GetRepositories4;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories4(soap, &soap_tmp___mtrep7__GetRepositories4);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories4(soap, &soap_tmp___mtrep7__GetRepositories4, "-mtrep7:GetRepositories4", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories4(soap, &soap_tmp___mtrep7__GetRepositories4, "-mtrep7:GetRepositories4", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep6__GetRepositories4Response)
		return soap_closesock(soap);
	mtrep6__GetRepositories4Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep6__GetRepositories4Response.soap_get(soap, "mtrep6:GetRepositories4Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository4(const char *endpoint, const char *soap_action, _mtrep6__PickRepository4 *mtrep6__PickRepository4, _mtrep6__PickRepository4Response &mtrep6__PickRepository4Response)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository4 soap_tmp___mtrep7__PickRepository4;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/06/repository/PickRepository4";
	soap_tmp___mtrep7__PickRepository4.mtrep6__PickRepository4 = mtrep6__PickRepository4;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository4(soap, &soap_tmp___mtrep7__PickRepository4);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository4(soap, &soap_tmp___mtrep7__PickRepository4, "-mtrep7:PickRepository4", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository4(soap, &soap_tmp___mtrep7__PickRepository4, "-mtrep7:PickRepository4", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep6__PickRepository4Response)
		return soap_closesock(soap);
	mtrep6__PickRepository4Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep6__PickRepository4Response.soap_get(soap, "mtrep6:PickRepository4Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::VerifyRepository2(const char *endpoint, const char *soap_action, _mtrep7__VerifyRepository2 *mtrep7__VerifyRepository2, _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response)
{	struct soap *soap = this;
	struct __mtrep7__VerifyRepository2 soap_tmp___mtrep7__VerifyRepository2;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/08/repository/VerifyRepository2";
	soap_tmp___mtrep7__VerifyRepository2.mtrep7__VerifyRepository2 = mtrep7__VerifyRepository2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__VerifyRepository2(soap, &soap_tmp___mtrep7__VerifyRepository2);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__VerifyRepository2(soap, &soap_tmp___mtrep7__VerifyRepository2, "-mtrep7:VerifyRepository2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__VerifyRepository2(soap, &soap_tmp___mtrep7__VerifyRepository2, "-mtrep7:VerifyRepository2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep7__VerifyRepository2Response)
		return soap_closesock(soap);
	mtrep7__VerifyRepository2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep7__VerifyRepository2Response.soap_get(soap, "mtrep7:VerifyRepository2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo3(const char *endpoint, const char *soap_action, _mtrep7__TryGetRepositoryInfo3 *mtrep7__TryGetRepositoryInfo3, _mtrep7__TryGetRepositoryInfo3Response &mtrep7__TryGetRepositoryInfo3Response)
{	struct soap *soap = this;
	struct __mtrep7__TryGetRepositoryInfo3 soap_tmp___mtrep7__TryGetRepositoryInfo3;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3";
	soap_tmp___mtrep7__TryGetRepositoryInfo3.mtrep7__TryGetRepositoryInfo3 = mtrep7__TryGetRepositoryInfo3;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__TryGetRepositoryInfo3(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo3);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__TryGetRepositoryInfo3(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo3, "-mtrep7:TryGetRepositoryInfo3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__TryGetRepositoryInfo3(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo3, "-mtrep7:TryGetRepositoryInfo3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep7__TryGetRepositoryInfo3Response)
		return soap_closesock(soap);
	mtrep7__TryGetRepositoryInfo3Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep7__TryGetRepositoryInfo3Response.soap_get(soap, "mtrep7:TryGetRepositoryInfo3Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo_(const char *endpoint, const char *soap_action, _mtrep__TryGetRepositoryInfo *mtrep__TryGetRepositoryInfo, _mtrep__TryGetRepositoryInfoResponse &mtrep__TryGetRepositoryInfoResponse)
{	struct soap *soap = this;
	struct __mtrep7__TryGetRepositoryInfo_ soap_tmp___mtrep7__TryGetRepositoryInfo_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/TryGetRepositoryInfo";
	soap_tmp___mtrep7__TryGetRepositoryInfo_.mtrep__TryGetRepositoryInfo = mtrep__TryGetRepositoryInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__TryGetRepositoryInfo_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__TryGetRepositoryInfo_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo_, "-mtrep7:TryGetRepositoryInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__TryGetRepositoryInfo_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo_, "-mtrep7:TryGetRepositoryInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__TryGetRepositoryInfoResponse)
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__TryGetRepositoryInfoResponse.soap_get(soap, "mtrep:TryGetRepositoryInfoResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository_(const char *endpoint, const char *soap_action, _mtrep__PickRepository *mtrep__PickRepository, _mtrep__PickRepositoryResponse &mtrep__PickRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository_ soap_tmp___mtrep7__PickRepository_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/PickRepository";
	soap_tmp___mtrep7__PickRepository_.mtrep__PickRepository = mtrep__PickRepository;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository_(soap, &soap_tmp___mtrep7__PickRepository_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository_(soap, &soap_tmp___mtrep7__PickRepository_, "-mtrep7:PickRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository_(soap, &soap_tmp___mtrep7__PickRepository_, "-mtrep7:PickRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__PickRepositoryResponse)
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__PickRepositoryResponse.soap_get(soap, "mtrep:PickRepositoryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetAllRepositories_(const char *endpoint, const char *soap_action, _mtrep__GetAllRepositories *mtrep__GetAllRepositories, _mtrep__GetAllRepositoriesResponse &mtrep__GetAllRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep7__GetAllRepositories_ soap_tmp___mtrep7__GetAllRepositories_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/GetAllRepositories";
	soap_tmp___mtrep7__GetAllRepositories_.mtrep__GetAllRepositories = mtrep__GetAllRepositories;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetAllRepositories_(soap, &soap_tmp___mtrep7__GetAllRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetAllRepositories_(soap, &soap_tmp___mtrep7__GetAllRepositories_, "-mtrep7:GetAllRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetAllRepositories_(soap, &soap_tmp___mtrep7__GetAllRepositories_, "-mtrep7:GetAllRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__GetAllRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetAllRepositoriesResponse.soap_get(soap, "mtrep:GetAllRepositoriesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories_(const char *endpoint, const char *soap_action, _mtrep__GetRepositories *mtrep__GetRepositories, _mtrep__GetRepositoriesResponse &mtrep__GetRepositoriesResponse)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories_ soap_tmp___mtrep7__GetRepositories_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2006/06/repository/GetRepositories";
	soap_tmp___mtrep7__GetRepositories_.mtrep__GetRepositories = mtrep__GetRepositories;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories_(soap, &soap_tmp___mtrep7__GetRepositories_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories_(soap, &soap_tmp___mtrep7__GetRepositories_, "-mtrep7:GetRepositories", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories_(soap, &soap_tmp___mtrep7__GetRepositories_, "-mtrep7:GetRepositories", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep__GetRepositoriesResponse)
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep__GetRepositoriesResponse.soap_get(soap, "mtrep:GetRepositoriesResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetListCreationTime_(const char *endpoint, const char *soap_action, _mtrep2__GetListCreationTime *mtrep2__GetListCreationTime, _mtrep2__GetListCreationTimeResponse &mtrep2__GetListCreationTimeResponse)
{	struct soap *soap = this;
	struct __mtrep7__GetListCreationTime_ soap_tmp___mtrep7__GetListCreationTime_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/03/repository/GetListCreationTime";
	soap_tmp___mtrep7__GetListCreationTime_.mtrep2__GetListCreationTime = mtrep2__GetListCreationTime;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetListCreationTime_(soap, &soap_tmp___mtrep7__GetListCreationTime_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetListCreationTime_(soap, &soap_tmp___mtrep7__GetListCreationTime_, "-mtrep7:GetListCreationTime", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetListCreationTime_(soap, &soap_tmp___mtrep7__GetListCreationTime_, "-mtrep7:GetListCreationTime", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep2__GetListCreationTimeResponse)
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep2__GetListCreationTimeResponse.soap_get(soap, "mtrep2:GetListCreationTimeResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories2_(const char *endpoint, const char *soap_action, _mtrep3__GetRepositories2 *mtrep3__GetRepositories2, _mtrep3__GetRepositories2Response &mtrep3__GetRepositories2Response)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories2_ soap_tmp___mtrep7__GetRepositories2_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/07/repository/GetRepositories2";
	soap_tmp___mtrep7__GetRepositories2_.mtrep3__GetRepositories2 = mtrep3__GetRepositories2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories2_(soap, &soap_tmp___mtrep7__GetRepositories2_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories2_(soap, &soap_tmp___mtrep7__GetRepositories2_, "-mtrep7:GetRepositories2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories2_(soap, &soap_tmp___mtrep7__GetRepositories2_, "-mtrep7:GetRepositories2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep3__GetRepositories2Response)
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__GetRepositories2Response.soap_get(soap, "mtrep3:GetRepositories2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository2_(const char *endpoint, const char *soap_action, _mtrep3__PickRepository2 *mtrep3__PickRepository2, _mtrep3__PickRepository2Response &mtrep3__PickRepository2Response)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository2_ soap_tmp___mtrep7__PickRepository2_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/07/repository/PickRepository2";
	soap_tmp___mtrep7__PickRepository2_.mtrep3__PickRepository2 = mtrep3__PickRepository2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository2_(soap, &soap_tmp___mtrep7__PickRepository2_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository2_(soap, &soap_tmp___mtrep7__PickRepository2_, "-mtrep7:PickRepository2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository2_(soap, &soap_tmp___mtrep7__PickRepository2_, "-mtrep7:PickRepository2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep3__PickRepository2Response)
		return soap_closesock(soap);
	mtrep3__PickRepository2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__PickRepository2Response.soap_get(soap, "mtrep3:PickRepository2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo2_(const char *endpoint, const char *soap_action, _mtrep3__TryGetRepositoryInfo2 *mtrep3__TryGetRepositoryInfo2, _mtrep3__TryGetRepositoryInfo2Response &mtrep3__TryGetRepositoryInfo2Response)
{	struct soap *soap = this;
	struct __mtrep7__TryGetRepositoryInfo2_ soap_tmp___mtrep7__TryGetRepositoryInfo2_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/07/repository/TryGetRepositoryInfo2";
	soap_tmp___mtrep7__TryGetRepositoryInfo2_.mtrep3__TryGetRepositoryInfo2 = mtrep3__TryGetRepositoryInfo2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__TryGetRepositoryInfo2_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo2_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__TryGetRepositoryInfo2_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo2_, "-mtrep7:TryGetRepositoryInfo2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__TryGetRepositoryInfo2_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo2_, "-mtrep7:TryGetRepositoryInfo2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep3__TryGetRepositoryInfo2Response)
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep3__TryGetRepositoryInfo2Response.soap_get(soap, "mtrep3:TryGetRepositoryInfo2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::VerifyRepository_(const char *endpoint, const char *soap_action, _mtrep4__VerifyRepository *mtrep4__VerifyRepository, _mtrep4__VerifyRepositoryResponse &mtrep4__VerifyRepositoryResponse)
{	struct soap *soap = this;
	struct __mtrep7__VerifyRepository_ soap_tmp___mtrep7__VerifyRepository_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2007/10/repository/VerifyRepository";
	soap_tmp___mtrep7__VerifyRepository_.mtrep4__VerifyRepository = mtrep4__VerifyRepository;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__VerifyRepository_(soap, &soap_tmp___mtrep7__VerifyRepository_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__VerifyRepository_(soap, &soap_tmp___mtrep7__VerifyRepository_, "-mtrep7:VerifyRepository", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__VerifyRepository_(soap, &soap_tmp___mtrep7__VerifyRepository_, "-mtrep7:VerifyRepository", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep4__VerifyRepositoryResponse)
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep4__VerifyRepositoryResponse.soap_get(soap, "mtrep4:VerifyRepositoryResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories3_(const char *endpoint, const char *soap_action, _mtrep5__GetRepositories3 *mtrep5__GetRepositories3, _mtrep5__GetRepositories3Response &mtrep5__GetRepositories3Response)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories3_ soap_tmp___mtrep7__GetRepositories3_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2008/05/repository/GetRepositories3";
	soap_tmp___mtrep7__GetRepositories3_.mtrep5__GetRepositories3 = mtrep5__GetRepositories3;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories3_(soap, &soap_tmp___mtrep7__GetRepositories3_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories3_(soap, &soap_tmp___mtrep7__GetRepositories3_, "-mtrep7:GetRepositories3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories3_(soap, &soap_tmp___mtrep7__GetRepositories3_, "-mtrep7:GetRepositories3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep5__GetRepositories3Response)
		return soap_closesock(soap);
	mtrep5__GetRepositories3Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep5__GetRepositories3Response.soap_get(soap, "mtrep5:GetRepositories3Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository3_(const char *endpoint, const char *soap_action, _mtrep5__PickRepository3 *mtrep5__PickRepository3, _mtrep5__PickRepository3Response &mtrep5__PickRepository3Response)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository3_ soap_tmp___mtrep7__PickRepository3_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2008/05/repository/PickRepository3";
	soap_tmp___mtrep7__PickRepository3_.mtrep5__PickRepository3 = mtrep5__PickRepository3;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository3_(soap, &soap_tmp___mtrep7__PickRepository3_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository3_(soap, &soap_tmp___mtrep7__PickRepository3_, "-mtrep7:PickRepository3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository3_(soap, &soap_tmp___mtrep7__PickRepository3_, "-mtrep7:PickRepository3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep5__PickRepository3Response)
		return soap_closesock(soap);
	mtrep5__PickRepository3Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep5__PickRepository3Response.soap_get(soap, "mtrep5:PickRepository3Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::GetRepositories4_(const char *endpoint, const char *soap_action, _mtrep6__GetRepositories4 *mtrep6__GetRepositories4, _mtrep6__GetRepositories4Response &mtrep6__GetRepositories4Response)
{	struct soap *soap = this;
	struct __mtrep7__GetRepositories4_ soap_tmp___mtrep7__GetRepositories4_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/06/repository/GetRepositories4";
	soap_tmp___mtrep7__GetRepositories4_.mtrep6__GetRepositories4 = mtrep6__GetRepositories4;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__GetRepositories4_(soap, &soap_tmp___mtrep7__GetRepositories4_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__GetRepositories4_(soap, &soap_tmp___mtrep7__GetRepositories4_, "-mtrep7:GetRepositories4", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__GetRepositories4_(soap, &soap_tmp___mtrep7__GetRepositories4_, "-mtrep7:GetRepositories4", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep6__GetRepositories4Response)
		return soap_closesock(soap);
	mtrep6__GetRepositories4Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep6__GetRepositories4Response.soap_get(soap, "mtrep6:GetRepositories4Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::PickRepository4_(const char *endpoint, const char *soap_action, _mtrep6__PickRepository4 *mtrep6__PickRepository4, _mtrep6__PickRepository4Response &mtrep6__PickRepository4Response)
{	struct soap *soap = this;
	struct __mtrep7__PickRepository4_ soap_tmp___mtrep7__PickRepository4_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/06/repository/PickRepository4";
	soap_tmp___mtrep7__PickRepository4_.mtrep6__PickRepository4 = mtrep6__PickRepository4;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__PickRepository4_(soap, &soap_tmp___mtrep7__PickRepository4_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__PickRepository4_(soap, &soap_tmp___mtrep7__PickRepository4_, "-mtrep7:PickRepository4", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__PickRepository4_(soap, &soap_tmp___mtrep7__PickRepository4_, "-mtrep7:PickRepository4", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep6__PickRepository4Response)
		return soap_closesock(soap);
	mtrep6__PickRepository4Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep6__PickRepository4Response.soap_get(soap, "mtrep6:PickRepository4Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::VerifyRepository2_(const char *endpoint, const char *soap_action, _mtrep7__VerifyRepository2 *mtrep7__VerifyRepository2, _mtrep7__VerifyRepository2Response &mtrep7__VerifyRepository2Response)
{	struct soap *soap = this;
	struct __mtrep7__VerifyRepository2_ soap_tmp___mtrep7__VerifyRepository2_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/08/repository/VerifyRepository2";
	soap_tmp___mtrep7__VerifyRepository2_.mtrep7__VerifyRepository2 = mtrep7__VerifyRepository2;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__VerifyRepository2_(soap, &soap_tmp___mtrep7__VerifyRepository2_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__VerifyRepository2_(soap, &soap_tmp___mtrep7__VerifyRepository2_, "-mtrep7:VerifyRepository2", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__VerifyRepository2_(soap, &soap_tmp___mtrep7__VerifyRepository2_, "-mtrep7:VerifyRepository2", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep7__VerifyRepository2Response)
		return soap_closesock(soap);
	mtrep7__VerifyRepository2Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep7__VerifyRepository2Response.soap_get(soap, "mtrep7:VerifyRepository2Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int RepositorySoapProxy::TryGetRepositoryInfo3_(const char *endpoint, const char *soap_action, _mtrep7__TryGetRepositoryInfo3 *mtrep7__TryGetRepositoryInfo3, _mtrep7__TryGetRepositoryInfo3Response &mtrep7__TryGetRepositoryInfo3Response)
{	struct soap *soap = this;
	struct __mtrep7__TryGetRepositoryInfo3_ soap_tmp___mtrep7__TryGetRepositoryInfo3_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://api.miktex.org/Repository.asmx";
	if (soap_action == NULL)
		soap_action = "http://miktex.org/2015/08/repository/TryGetRepositoryInfo3";
	soap_tmp___mtrep7__TryGetRepositoryInfo3_.mtrep7__TryGetRepositoryInfo3 = mtrep7__TryGetRepositoryInfo3;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize___mtrep7__TryGetRepositoryInfo3_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo3_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___mtrep7__TryGetRepositoryInfo3_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo3_, "-mtrep7:TryGetRepositoryInfo3", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___mtrep7__TryGetRepositoryInfo3_(soap, &soap_tmp___mtrep7__TryGetRepositoryInfo3_, "-mtrep7:TryGetRepositoryInfo3", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&mtrep7__TryGetRepositoryInfo3Response)
		return soap_closesock(soap);
	mtrep7__TryGetRepositoryInfo3Response.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	mtrep7__TryGetRepositoryInfo3Response.soap_get(soap, "mtrep7:TryGetRepositoryInfo3Response", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
