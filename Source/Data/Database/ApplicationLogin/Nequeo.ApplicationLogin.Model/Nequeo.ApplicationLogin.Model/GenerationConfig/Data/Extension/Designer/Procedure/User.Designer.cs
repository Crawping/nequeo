// Warning 169 (Disables the 'Never used' warning)
#pragma warning disable 169

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nequeo.DataAccess.ApplicationLogin.Data.Extension
{
    using System;
    using System.Text;
    using System.Data;
    using System.Threading;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.OleDb;
    using System.Data.Odbc;
    using System.Collections;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Data.Linq;
    using System.Data.Linq.SqlClient;
    using System.Data.Linq.Mapping;
    using Nequeo.Data.Base.Exception;
    using Nequeo.Data.DataAccess.Control.Generic;
    using Nequeo.Data.DataAccess.Control.Generic.Data;
    using Nequeo.Data.Enumeration;
    using Nequeo.Data.Controller.Custom;
    using Nequeo.Data.Controller.Extension;
    
    
    /// <summary>
    /// The user object class.
    /// </summary>
    public partial class User
    {
        
        /// <summary>
        /// Execute the getcolumnvalues routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <param name="columnName">Initial value of ColumnName.</param>
        /// <param name="columnIndicatorName">Initial value of ColumnIndicatorName.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetColumnValues", FunctionRoutineType.StoredProcedure)]
        public virtual object GetColumnValues([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase, [FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName, [FunctionParameterAttribute("@ColumnName", "varchar", -1, ParameterDirection.Input, true)] string columnName, [FunctionParameterAttribute("@ColumnIndicatorName", "varchar", -1, ParameterDirection.Input, true)] string columnIndicatorName)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase, tableName, columnName, columnIndicatorName);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getcurrenttablevalues routine.
        /// </summary>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <param name="primaryKeyName">Initial value of PrimaryKeyName.</param>
        /// <param name="primaryKeyID">Initial value of PrimaryKeyID.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetCurrentTableValues", FunctionRoutineType.StoredProcedure)]
        public virtual object GetCurrentTableValues([FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName, [FunctionParameterAttribute("@PrimaryKeyName", "varchar", -1, ParameterDirection.Input, true)] string primaryKeyName, [FunctionParameterAttribute("@PrimaryKeyID", "varchar", -1, ParameterDirection.Input, true)] string primaryKeyID)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName, primaryKeyName, primaryKeyID);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getdatabasecurrenttablevalues routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <param name="primaryKeyName">Initial value of PrimaryKeyName.</param>
        /// <param name="primaryKeyID">Initial value of PrimaryKeyID.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetDatabaseCurrentTableValues", FunctionRoutineType.StoredProcedure)]
        public virtual object GetDatabaseCurrentTableValues([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase, [FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName, [FunctionParameterAttribute("@PrimaryKeyName", "varchar", -1, ParameterDirection.Input, true)] string primaryKeyName, [FunctionParameterAttribute("@PrimaryKeyID", "varchar", -1, ParameterDirection.Input, true)] string primaryKeyID)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase, tableName, primaryKeyName, primaryKeyID);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getdatabaseforeignkeyvalues routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetDatabaseForeignKeyValues", FunctionRoutineType.StoredProcedure)]
        public virtual object GetDatabaseForeignKeyValues([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase, [FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase, tableName);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getdatabaseprimarykeys routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetDatabasePrimaryKeys", FunctionRoutineType.StoredProcedure)]
        public virtual object GetDatabasePrimaryKeys([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase, [FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase, tableName);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getdatabasereferencekeys routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetDatabaseReferenceKeys", FunctionRoutineType.StoredProcedure)]
        public virtual object GetDatabaseReferenceKeys([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase, [FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase, tableName);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getforeignkeyvalues routine.
        /// </summary>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetForeignKeyValues", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetForeignKeyValuesResult> GetForeignKeyValues()
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((List<Data.Extended.GetForeignKeyValuesResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getfunction routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetFunction", FunctionRoutineType.StoredProcedure)]
        public virtual object GetFunction([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getprocedure routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetProcedure", FunctionRoutineType.StoredProcedure)]
        public virtual object GetProcedure([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getprocedurecolumns routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <param name="owner">Initial value of Owner.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetProcedureColumns", FunctionRoutineType.StoredProcedure)]
        public virtual object GetProcedureColumns([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase, [FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName, [FunctionParameterAttribute("@Owner", "varchar", -1, ParameterDirection.Input, true)] string owner)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase, tableName, owner);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the gettablecolumns routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <param name="owner">Initial value of Owner.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetTableColumns", FunctionRoutineType.StoredProcedure)]
        public virtual object GetTableColumns([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase, [FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName, [FunctionParameterAttribute("@Owner", "varchar", -1, ParameterDirection.Input, true)] string owner)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase, tableName, owner);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the gettableforeignkeyvalues routine.
        /// </summary>
        /// <param name="tableName">Initial value of TableName.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetTableForeignKeyValues", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetTableForeignKeyValuesResult> GetTableForeignKeyValues([FunctionParameterAttribute("@TableName", "varchar", -1, ParameterDirection.Input, true)] string tableName)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tableName);
            return ((List<Data.Extended.GetTableForeignKeyValuesResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the gettables routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetTables", FunctionRoutineType.StoredProcedure)]
        public virtual object GetTables([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getuserscreenaccess routine.
        /// </summary>
        /// <param name="userID">Initial value of UserID.</param>
        /// <param name="applicationID">Initial value of ApplicationID.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetUserScreenAccess", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetUserScreenAccessResult> GetUserScreenAccess([FunctionParameterAttribute("@UserID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> userID, [FunctionParameterAttribute("@ApplicationID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> applicationID)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, applicationID);
            return ((List<Data.Extended.GetUserScreenAccessResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getviews routine.
        /// </summary>
        /// <param name="dataBase">Initial value of DataBase.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetViews", FunctionRoutineType.StoredProcedure)]
        public virtual object GetViews([FunctionParameterAttribute("@DataBase", "varchar", -1, ParameterDirection.Input, true)] string dataBase)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), dataBase);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the insertchangelog routine.
        /// </summary>
        /// <param name="userID">Initial value of UserID.</param>
        /// <param name="screenID">Initial value of ScreenID.</param>
        /// <param name="applicationID">Initial value of ApplicationID.</param>
        /// <param name="change">Initial value of Change.</param>
        /// <param name="primaryKeyID">Initial value of PrimaryKeyID.</param>
        /// <param name="iPAddress">Initial value of IPAddress.</param>
        /// <param name="changeLogID">Return value of ChangeLogID.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.InsertChangeLog", FunctionRoutineType.StoredProcedure)]
        public virtual object InsertChangeLog([FunctionParameterAttribute("@UserID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> userID, [FunctionParameterAttribute("@ScreenID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> screenID, [FunctionParameterAttribute("@ApplicationID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> applicationID, [FunctionParameterAttribute("@Change", "text", -1, ParameterDirection.Input, true)] string change, [FunctionParameterAttribute("@PrimaryKeyID", "varchar", 200, ParameterDirection.Input, true)] string primaryKeyID, [FunctionParameterAttribute("@IPAddress", "varchar", 500, ParameterDirection.Input, true)] string iPAddress, [FunctionParameterAttribute("@ChangeLogID", "bigint", 8, ParameterDirection.Output, true)] ref System.Nullable<System.Int64> changeLogID)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, screenID, applicationID, change, primaryKeyID, iPAddress, changeLogID);
            changeLogID = ((System.Nullable<System.Int64>)(result.GetParameterValue(6)));
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the inserterrorlog routine.
        /// </summary>
        /// <param name="applicationIdentifier">Initial value of ApplicationIdentifier.</param>
        /// <param name="processName">Initial value of ProcessName.</param>
        /// <param name="errorCode">Initial value of ErrorCode.</param>
        /// <param name="errorDescription">Initial value of ErrorDescription.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.InsertErrorLog", FunctionRoutineType.StoredProcedure)]
        public virtual object InsertErrorLog([FunctionParameterAttribute("@ApplicationIdentifier", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> applicationIdentifier, [FunctionParameterAttribute("@ProcessName", "varchar", 200, ParameterDirection.Input, true)] string processName, [FunctionParameterAttribute("@ErrorCode", "varchar", 50, ParameterDirection.Input, true)] string errorCode, [FunctionParameterAttribute("@ErrorDescription", "varchar", -1, ParameterDirection.Input, true)] string errorDescription)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), applicationIdentifier, processName, errorCode, errorDescription);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the insertloginhistory routine.
        /// </summary>
        /// <param name="userID">Initial value of UserID.</param>
        /// <param name="applicationID">Initial value of ApplicationID.</param>
        /// <param name="iPAddress">Initial value of IPAddress.</param>
        /// <param name="loginHistoryID">Return value of LoginHistoryID.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.InsertLoginHistory", FunctionRoutineType.StoredProcedure)]
        public virtual object InsertLoginHistory([FunctionParameterAttribute("@UserID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> userID, [FunctionParameterAttribute("@ApplicationID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> applicationID, [FunctionParameterAttribute("@IPAddress", "varchar", 500, ParameterDirection.Input, true)] string iPAddress, [FunctionParameterAttribute("@LoginHistoryID", "bigint", 8, ParameterDirection.Output, true)] ref System.Nullable<System.Int64> loginHistoryID)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, applicationID, iPAddress, loginHistoryID);
            loginHistoryID = ((System.Nullable<System.Int64>)(result.GetParameterValue(3)));
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the inserttabletype_byte routine.
        /// </summary>
        /// <param name="image">Initial value of Image.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.InsertTableType_Byte", FunctionRoutineType.StoredProcedure)]
        public virtual object InsertTableType_Byte([FunctionParameterAttribute("@Image", "image", -1, ParameterDirection.Input, true)] byte[] image)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), image);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the inserttabletype_ntext routine.
        /// </summary>
        /// <param name="nTextValue">Initial value of NTextValue.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.InsertTableType_NText", FunctionRoutineType.StoredProcedure)]
        public virtual object InsertTableType_NText([FunctionParameterAttribute("@NTextValue", "ntext", -1, ParameterDirection.Input, true)] string nTextValue)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nTextValue);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the sp_alterdiagram routine.
        /// </summary>
        /// <param name="diagramname">Initial value of diagramname.</param>
        /// <param name="owner_id">Initial value of owner_id.</param>
        /// <param name="version">Initial value of version.</param>
        /// <param name="definition">Initial value of definition.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.sp_alterdiagram", FunctionRoutineType.StoredProcedure)]
        public virtual object sp_alterdiagram([FunctionParameterAttribute("@diagramname", "nvarchar", 128, ParameterDirection.Input, true)] string diagramname, [FunctionParameterAttribute("@owner_id", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> owner_id, [FunctionParameterAttribute("@version", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> version, [FunctionParameterAttribute("@definition", "varbinary", -1, ParameterDirection.Input, true)] byte[] definition)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the sp_creatediagram routine.
        /// </summary>
        /// <param name="diagramname">Initial value of diagramname.</param>
        /// <param name="owner_id">Initial value of owner_id.</param>
        /// <param name="version">Initial value of version.</param>
        /// <param name="definition">Initial value of definition.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.sp_creatediagram", FunctionRoutineType.StoredProcedure)]
        public virtual object sp_creatediagram([FunctionParameterAttribute("@diagramname", "nvarchar", 128, ParameterDirection.Input, true)] string diagramname, [FunctionParameterAttribute("@owner_id", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> owner_id, [FunctionParameterAttribute("@version", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> version, [FunctionParameterAttribute("@definition", "varbinary", -1, ParameterDirection.Input, true)] byte[] definition)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, version, definition);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the sp_dropdiagram routine.
        /// </summary>
        /// <param name="diagramname">Initial value of diagramname.</param>
        /// <param name="owner_id">Initial value of owner_id.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.sp_dropdiagram", FunctionRoutineType.StoredProcedure)]
        public virtual object sp_dropdiagram([FunctionParameterAttribute("@diagramname", "nvarchar", 128, ParameterDirection.Input, true)] string diagramname, [FunctionParameterAttribute("@owner_id", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> owner_id)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the sp_helpdiagramdefinition routine.
        /// </summary>
        /// <param name="diagramname">Initial value of diagramname.</param>
        /// <param name="owner_id">Initial value of owner_id.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.sp_helpdiagramdefinition", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.sp_helpdiagramdefinitionResult> sp_helpdiagramdefinition([FunctionParameterAttribute("@diagramname", "nvarchar", 128, ParameterDirection.Input, true)] string diagramname, [FunctionParameterAttribute("@owner_id", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> owner_id)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
            return ((List<Data.Extended.sp_helpdiagramdefinitionResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the sp_helpdiagrams routine.
        /// </summary>
        /// <param name="diagramname">Initial value of diagramname.</param>
        /// <param name="owner_id">Initial value of owner_id.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.sp_helpdiagrams", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.sp_helpdiagramsResult> sp_helpdiagrams([FunctionParameterAttribute("@diagramname", "nvarchar", 128, ParameterDirection.Input, true)] string diagramname, [FunctionParameterAttribute("@owner_id", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> owner_id)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id);
            return ((List<Data.Extended.sp_helpdiagramsResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the sp_renamediagram routine.
        /// </summary>
        /// <param name="diagramname">Initial value of diagramname.</param>
        /// <param name="owner_id">Initial value of owner_id.</param>
        /// <param name="new_diagramname">Initial value of new_diagramname.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.sp_renamediagram", FunctionRoutineType.StoredProcedure)]
        public virtual object sp_renamediagram([FunctionParameterAttribute("@diagramname", "nvarchar", 128, ParameterDirection.Input, true)] string diagramname, [FunctionParameterAttribute("@owner_id", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> owner_id, [FunctionParameterAttribute("@new_diagramname", "nvarchar", 128, ParameterDirection.Input, true)] string new_diagramname)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), diagramname, owner_id, new_diagramname);
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the sp_upgraddiagrams routine.
        /// </summary>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.sp_upgraddiagrams", FunctionRoutineType.StoredProcedure)]
        public virtual object sp_upgraddiagrams()
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
            return ((object)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the updateloginhistory routine.
        /// </summary>
        /// <param name="loginHistoryID">Initial value of LoginHistoryID.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.UpdateLoginHistory", FunctionRoutineType.StoredProcedure)]
        public virtual object UpdateLoginHistory([FunctionParameterAttribute("@LoginHistoryID", "bigint", 8, ParameterDirection.Input, true)] System.Nullable<System.Int64> loginHistoryID)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), loginHistoryID);
            return ((object)(result.ReturnValue));
        }
    }
}
namespace Nequeo.DataAccess.ApplicationLogin.Data.Extended
{
    using System;
    using System.Text;
    using System.Data;
    using System.Threading;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.OleDb;
    using System.Data.Odbc;
    using System.Collections;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Data.Linq;
    using System.Data.Linq.SqlClient;
    using System.Data.Linq.Mapping;
    using Nequeo.Data.Base.Exception;
    using Nequeo.Data.DataAccess.Control.Generic;
    using Nequeo.Data.DataAccess.Control.Generic.Data;
    using Nequeo.Data.Enumeration;
    using Nequeo.Data.Controller.Custom;
    using Nequeo.Data.Controller.Extension;
    
    
    /// <summary>
    /// The getforeignkeyvaluesresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetForeignKeyValuesResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetForeignKeyValuesResult : DataBase
    {
        
        private string _TableName;
        
        private string _ColumnName;
        
        private System.Nullable<System.Boolean> _IsNullable;
        
        private System.Nullable<System.Int64> _Length;
        
        private string _ColumnType;
        
        private string _ForeignKeyTable;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetForeignKeyValuesResult()
        {
            OnCreated();
        }
        
        /// <summary>
        /// Gets sets, the tablename property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the tablename property for the object.")]
        [DataMemberAttribute(Name = "TableName")]
        [XmlElementAttribute(ElementName = "TableName", IsNullable = true)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the columnname property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the columnname property for the object.")]
        [DataMemberAttribute(Name = "ColumnName")]
        [XmlElementAttribute(ElementName = "ColumnName", IsNullable = true)]
        public string ColumnName
        {
            get
            {
                return this._ColumnName;
            }
            set
            {
                if ((this._ColumnName != value))
                {
                    this._ColumnName = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the isnullable property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the isnullable property for the object.")]
        [DataMemberAttribute(Name = "IsNullable")]
        [XmlElementAttribute(ElementName = "IsNullable", IsNullable = true)]
        public System.Nullable<System.Boolean> IsNullable
        {
            get
            {
                return this._IsNullable;
            }
            set
            {
                if ((this._IsNullable != value))
                {
                    this._IsNullable = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the length property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the length property for the object.")]
        [DataMemberAttribute(Name = "Length")]
        [XmlElementAttribute(ElementName = "Length", IsNullable = true)]
        public System.Nullable<System.Int64> Length
        {
            get
            {
                return this._Length;
            }
            set
            {
                if ((this._Length != value))
                {
                    this._Length = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the columntype property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the columntype property for the object.")]
        [DataMemberAttribute(Name = "ColumnType")]
        [XmlElementAttribute(ElementName = "ColumnType", IsNullable = true)]
        public string ColumnType
        {
            get
            {
                return this._ColumnType;
            }
            set
            {
                if ((this._ColumnType != value))
                {
                    this._ColumnType = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the foreignkeytable property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the foreignkeytable property for the object.")]
        [DataMemberAttribute(Name = "ForeignKeyTable")]
        [XmlElementAttribute(ElementName = "ForeignKeyTable", IsNullable = true)]
        public string ForeignKeyTable
        {
            get
            {
                return this._ForeignKeyTable;
            }
            set
            {
                if ((this._ForeignKeyTable != value))
                {
                    this._ForeignKeyTable = value;
                }
            }
        }
        
        /// <summary>
        /// Create a new getforeignkeyvaluesresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetForeignKeyValuesResult entity.</returns>
        public static Data.Extended.GetForeignKeyValuesResult CreateGetForeignKeyValuesResult()
        {
            Data.Extended.GetForeignKeyValuesResult getForeignKeyValuesResult = new Data.Extended.GetForeignKeyValuesResult();
            return getForeignKeyValuesResult;
        }
    }
    
    /// <summary>
    /// The gettableforeignkeyvaluesresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetTableForeignKeyValuesResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetTableForeignKeyValuesResult : DataBase
    {
        
        private string _TableName;
        
        private string _ColumnName;
        
        private System.Nullable<System.Boolean> _IsNullable;
        
        private System.Nullable<System.Int64> _Length;
        
        private string _ColumnType;
        
        private string _ForeignKeyTable;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetTableForeignKeyValuesResult()
        {
            OnCreated();
        }
        
        /// <summary>
        /// Gets sets, the tablename property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the tablename property for the object.")]
        [DataMemberAttribute(Name = "TableName")]
        [XmlElementAttribute(ElementName = "TableName", IsNullable = true)]
        public string TableName
        {
            get
            {
                return this._TableName;
            }
            set
            {
                if ((this._TableName != value))
                {
                    this._TableName = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the columnname property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the columnname property for the object.")]
        [DataMemberAttribute(Name = "ColumnName")]
        [XmlElementAttribute(ElementName = "ColumnName", IsNullable = true)]
        public string ColumnName
        {
            get
            {
                return this._ColumnName;
            }
            set
            {
                if ((this._ColumnName != value))
                {
                    this._ColumnName = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the isnullable property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the isnullable property for the object.")]
        [DataMemberAttribute(Name = "IsNullable")]
        [XmlElementAttribute(ElementName = "IsNullable", IsNullable = true)]
        public System.Nullable<System.Boolean> IsNullable
        {
            get
            {
                return this._IsNullable;
            }
            set
            {
                if ((this._IsNullable != value))
                {
                    this._IsNullable = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the length property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the length property for the object.")]
        [DataMemberAttribute(Name = "Length")]
        [XmlElementAttribute(ElementName = "Length", IsNullable = true)]
        public System.Nullable<System.Int64> Length
        {
            get
            {
                return this._Length;
            }
            set
            {
                if ((this._Length != value))
                {
                    this._Length = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the columntype property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the columntype property for the object.")]
        [DataMemberAttribute(Name = "ColumnType")]
        [XmlElementAttribute(ElementName = "ColumnType", IsNullable = true)]
        public string ColumnType
        {
            get
            {
                return this._ColumnType;
            }
            set
            {
                if ((this._ColumnType != value))
                {
                    this._ColumnType = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the foreignkeytable property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the foreignkeytable property for the object.")]
        [DataMemberAttribute(Name = "ForeignKeyTable")]
        [XmlElementAttribute(ElementName = "ForeignKeyTable", IsNullable = true)]
        public string ForeignKeyTable
        {
            get
            {
                return this._ForeignKeyTable;
            }
            set
            {
                if ((this._ForeignKeyTable != value))
                {
                    this._ForeignKeyTable = value;
                }
            }
        }
        
        /// <summary>
        /// Create a new gettableforeignkeyvaluesresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetTableForeignKeyValuesResult entity.</returns>
        public static Data.Extended.GetTableForeignKeyValuesResult CreateGetTableForeignKeyValuesResult()
        {
            Data.Extended.GetTableForeignKeyValuesResult getTableForeignKeyValuesResult = new Data.Extended.GetTableForeignKeyValuesResult();
            return getTableForeignKeyValuesResult;
        }
    }
    
    /// <summary>
    /// The getuserscreenaccessresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetUserScreenAccessResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetUserScreenAccessResult : DataBase
    {
        
        private bool _Suspended;
        
        private System.Nullable<System.Int64> _ScreenCode;
        
        private System.Nullable<System.Int64> _AccessCode;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetUserScreenAccessResult()
        {
            OnCreated();
        }
        
        /// <summary>
        /// Gets sets, the suspended property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the suspended property for the object.")]
        [DataMemberAttribute(Name = "Suspended")]
        [XmlElementAttribute(ElementName = "Suspended", IsNullable = false)]
        public bool Suspended
        {
            get
            {
                return this._Suspended;
            }
            set
            {
                if ((this._Suspended != value))
                {
                    this._Suspended = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the screencode property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the screencode property for the object.")]
        [DataMemberAttribute(Name = "ScreenCode")]
        [XmlElementAttribute(ElementName = "ScreenCode", IsNullable = true)]
        public System.Nullable<System.Int64> ScreenCode
        {
            get
            {
                return this._ScreenCode;
            }
            set
            {
                if ((this._ScreenCode != value))
                {
                    this._ScreenCode = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the accesscode property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the accesscode property for the object.")]
        [DataMemberAttribute(Name = "AccessCode")]
        [XmlElementAttribute(ElementName = "AccessCode", IsNullable = true)]
        public System.Nullable<System.Int64> AccessCode
        {
            get
            {
                return this._AccessCode;
            }
            set
            {
                if ((this._AccessCode != value))
                {
                    this._AccessCode = value;
                }
            }
        }
        
        /// <summary>
        /// Create a new getuserscreenaccessresult data entity.
        /// </summary>
        /// <param name="suspended">Initial value of Suspended.</param>
        /// <returns>The Data.Extended.GetUserScreenAccessResult entity.</returns>
        public static Data.Extended.GetUserScreenAccessResult CreateGetUserScreenAccessResult(bool suspended)
        {
            Data.Extended.GetUserScreenAccessResult getUserScreenAccessResult = new Data.Extended.GetUserScreenAccessResult();
            getUserScreenAccessResult.Suspended = suspended;
            return getUserScreenAccessResult;
        }
    }
    
    /// <summary>
    /// The sp_helpdiagramdefinitionresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "sp_helpdiagramdefinitionResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class sp_helpdiagramdefinitionResult : DataBase
    {
        
        private System.Nullable<System.Int32> _version;
        
        private byte[] _definition;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public sp_helpdiagramdefinitionResult()
        {
            OnCreated();
        }
        
        /// <summary>
        /// Gets sets, the version property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the version property for the object.")]
        [DataMemberAttribute(Name = "version")]
        [XmlElementAttribute(ElementName = "version", IsNullable = true)]
        public System.Nullable<System.Int32> version
        {
            get
            {
                return this._version;
            }
            set
            {
                if ((this._version != value))
                {
                    this._version = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the definition property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the definition property for the object.")]
        [DataMemberAttribute(Name = "definition")]
        [XmlArrayAttribute(ElementName = "definition", IsNullable = true)]
        public byte[] definition
        {
            get
            {
                return this._definition;
            }
            set
            {
                if ((this._definition != value))
                {
                    this._definition = value;
                }
            }
        }
        
        /// <summary>
        /// Create a new sp_helpdiagramdefinitionresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.sp_helpdiagramdefinitionResult entity.</returns>
        public static Data.Extended.sp_helpdiagramdefinitionResult Createsp_helpdiagramdefinitionResult()
        {
            Data.Extended.sp_helpdiagramdefinitionResult sp_helpdiagramdefinitionResult = new Data.Extended.sp_helpdiagramdefinitionResult();
            return sp_helpdiagramdefinitionResult;
        }
    }
    
    /// <summary>
    /// The sp_helpdiagramsresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "sp_helpdiagramsResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class sp_helpdiagramsResult : DataBase
    {
        
        private string _Database;
        
        private string _Name;
        
        private int _ID;
        
        private string _Owner;
        
        private int _OwnerID;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public sp_helpdiagramsResult()
        {
            OnCreated();
        }
        
        /// <summary>
        /// Gets sets, the database property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the database property for the object.")]
        [DataMemberAttribute(Name = "Database")]
        [XmlElementAttribute(ElementName = "Database", IsNullable = true)]
        public string Database
        {
            get
            {
                return this._Database;
            }
            set
            {
                if ((this._Database != value))
                {
                    this._Database = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the name property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the name property for the object.")]
        [DataMemberAttribute(Name = "Name")]
        [XmlElementAttribute(ElementName = "Name", IsNullable = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this._Name = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the id property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the id property for the object.")]
        [DataMemberAttribute(Name = "ID")]
        [XmlElementAttribute(ElementName = "ID", IsNullable = false)]
        public int ID
        {
            get
            {
                return this._ID;
            }
            set
            {
                if ((this._ID != value))
                {
                    this._ID = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the owner property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the owner property for the object.")]
        [DataMemberAttribute(Name = "Owner")]
        [XmlElementAttribute(ElementName = "Owner", IsNullable = true)]
        public string Owner
        {
            get
            {
                return this._Owner;
            }
            set
            {
                if ((this._Owner != value))
                {
                    this._Owner = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the ownerid property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the ownerid property for the object.")]
        [DataMemberAttribute(Name = "OwnerID")]
        [XmlElementAttribute(ElementName = "OwnerID", IsNullable = false)]
        public int OwnerID
        {
            get
            {
                return this._OwnerID;
            }
            set
            {
                if ((this._OwnerID != value))
                {
                    this._OwnerID = value;
                }
            }
        }
        
        /// <summary>
        /// Create a new sp_helpdiagramsresult data entity.
        /// </summary>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="iD">Initial value of ID.</param>
        /// <param name="ownerID">Initial value of OwnerID.</param>
        /// <returns>The Data.Extended.sp_helpdiagramsResult entity.</returns>
        public static Data.Extended.sp_helpdiagramsResult Createsp_helpdiagramsResult(string name, int iD, int ownerID)
        {
            Data.Extended.sp_helpdiagramsResult sp_helpdiagramsResult = new Data.Extended.sp_helpdiagramsResult();
            sp_helpdiagramsResult.Name = name;
            sp_helpdiagramsResult.ID = iD;
            sp_helpdiagramsResult.OwnerID = ownerID;
            return sp_helpdiagramsResult;
        }
    }
}
#pragma warning restore 169

