//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Endpoint : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Endpoint(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Endpoint obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Endpoint() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pjsua2PINVOKE.delete_Endpoint(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public static Endpoint instance() {
    Endpoint ret = new Endpoint(pjsua2PINVOKE.Endpoint_instance(), false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public Endpoint() : this(pjsua2PINVOKE.new_Endpoint(), true) {
  }

  public SWIGTYPE_p_Version libVersion() {
    SWIGTYPE_p_Version ret = new SWIGTYPE_p_Version(pjsua2PINVOKE.Endpoint_libVersion(swigCPtr), true);
    return ret;
  }

  public void libCreate() {
    pjsua2PINVOKE.Endpoint_libCreate(swigCPtr);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_pjsua_state libGetState() {
    SWIGTYPE_p_pjsua_state ret = new SWIGTYPE_p_pjsua_state(pjsua2PINVOKE.Endpoint_libGetState(swigCPtr), true);
    return ret;
  }

  public void libInit(EpConfig prmEpConfig) {
    pjsua2PINVOKE.Endpoint_libInit(swigCPtr, EpConfig.getCPtr(prmEpConfig));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void libStart() {
    pjsua2PINVOKE.Endpoint_libStart(swigCPtr);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void libRegisterThread(SWIGTYPE_p_string name) {
    pjsua2PINVOKE.Endpoint_libRegisterThread(swigCPtr, SWIGTYPE_p_string.getCPtr(name));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public bool libIsThreadRegistered() {
    bool ret = pjsua2PINVOKE.Endpoint_libIsThreadRegistered(swigCPtr);
    return ret;
  }

  public void libStopWorkerThreads() {
    pjsua2PINVOKE.Endpoint_libStopWorkerThreads(swigCPtr);
  }

  public int libHandleEvents(uint msec_timeout) {
    int ret = pjsua2PINVOKE.Endpoint_libHandleEvents(swigCPtr, msec_timeout);
    return ret;
  }

  public void libDestroy(uint prmFlags) {
    pjsua2PINVOKE.Endpoint_libDestroy__SWIG_0(swigCPtr, prmFlags);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void libDestroy() {
    pjsua2PINVOKE.Endpoint_libDestroy__SWIG_1(swigCPtr);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_string utilStrError(SWIGTYPE_p_pj_status_t prmErr) {
    SWIGTYPE_p_string ret = new SWIGTYPE_p_string(pjsua2PINVOKE.Endpoint_utilStrError(swigCPtr, SWIGTYPE_p_pj_status_t.getCPtr(prmErr)), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void utilLogWrite(int prmLevel, SWIGTYPE_p_string prmSender, SWIGTYPE_p_string prmMsg) {
    pjsua2PINVOKE.Endpoint_utilLogWrite__SWIG_0(swigCPtr, prmLevel, SWIGTYPE_p_string.getCPtr(prmSender), SWIGTYPE_p_string.getCPtr(prmMsg));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void utilLogWrite(LogEntry e) {
    pjsua2PINVOKE.Endpoint_utilLogWrite__SWIG_1(swigCPtr, LogEntry.getCPtr(e));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_pj_status_t utilVerifySipUri(SWIGTYPE_p_string prmUri) {
    SWIGTYPE_p_pj_status_t ret = new SWIGTYPE_p_pj_status_t(pjsua2PINVOKE.Endpoint_utilVerifySipUri(swigCPtr, SWIGTYPE_p_string.getCPtr(prmUri)), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_pj_status_t utilVerifyUri(SWIGTYPE_p_string prmUri) {
    SWIGTYPE_p_pj_status_t ret = new SWIGTYPE_p_pj_status_t(pjsua2PINVOKE.Endpoint_utilVerifyUri(swigCPtr, SWIGTYPE_p_string.getCPtr(prmUri)), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Token utilTimerSchedule(uint prmMsecDelay, SWIGTYPE_p_Token prmUserData) {
    SWIGTYPE_p_Token ret = new SWIGTYPE_p_Token(pjsua2PINVOKE.Endpoint_utilTimerSchedule(swigCPtr, prmMsecDelay, SWIGTYPE_p_Token.getCPtr(prmUserData)), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void utilTimerCancel(SWIGTYPE_p_Token prmToken) {
    pjsua2PINVOKE.Endpoint_utilTimerCancel(swigCPtr, SWIGTYPE_p_Token.getCPtr(prmToken));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void utilAddPendingJob(PendingJob job) {
    pjsua2PINVOKE.Endpoint_utilAddPendingJob(swigCPtr, PendingJob.getCPtr(job));
  }

  public SWIGTYPE_p_IntVector utilSslGetAvailableCiphers() {
    SWIGTYPE_p_IntVector ret = new SWIGTYPE_p_IntVector(pjsua2PINVOKE.Endpoint_utilSslGetAvailableCiphers(swigCPtr), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void natDetectType() {
    pjsua2PINVOKE.Endpoint_natDetectType(swigCPtr);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_pj_stun_nat_type natGetType() {
    SWIGTYPE_p_pj_stun_nat_type ret = new SWIGTYPE_p_pj_stun_nat_type(pjsua2PINVOKE.Endpoint_natGetType(swigCPtr), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void natCheckStunServers(SWIGTYPE_p_StringVector prmServers, bool prmWait, SWIGTYPE_p_Token prmUserData) {
    pjsua2PINVOKE.Endpoint_natCheckStunServers(swigCPtr, SWIGTYPE_p_StringVector.getCPtr(prmServers), prmWait, SWIGTYPE_p_Token.getCPtr(prmUserData));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void natCancelCheckStunServers(SWIGTYPE_p_Token token, bool notify_cb) {
    pjsua2PINVOKE.Endpoint_natCancelCheckStunServers__SWIG_0(swigCPtr, SWIGTYPE_p_Token.getCPtr(token), notify_cb);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void natCancelCheckStunServers(SWIGTYPE_p_Token token) {
    pjsua2PINVOKE.Endpoint_natCancelCheckStunServers__SWIG_1(swigCPtr, SWIGTYPE_p_Token.getCPtr(token));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_TransportId transportCreate(SWIGTYPE_p_pjsip_transport_type_e type, SWIGTYPE_p_TransportConfig cfg) {
    SWIGTYPE_p_TransportId ret = new SWIGTYPE_p_TransportId(pjsua2PINVOKE.Endpoint_transportCreate(swigCPtr, SWIGTYPE_p_pjsip_transport_type_e.getCPtr(type), SWIGTYPE_p_TransportConfig.getCPtr(cfg)), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_IntVector transportEnum() {
    SWIGTYPE_p_IntVector ret = new SWIGTYPE_p_IntVector(pjsua2PINVOKE.Endpoint_transportEnum(swigCPtr), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_TransportInfo transportGetInfo(SWIGTYPE_p_TransportId id) {
    SWIGTYPE_p_TransportInfo ret = new SWIGTYPE_p_TransportInfo(pjsua2PINVOKE.Endpoint_transportGetInfo(swigCPtr, SWIGTYPE_p_TransportId.getCPtr(id)), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void transportSetEnable(SWIGTYPE_p_TransportId id, bool enabled) {
    pjsua2PINVOKE.Endpoint_transportSetEnable(swigCPtr, SWIGTYPE_p_TransportId.getCPtr(id), enabled);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void transportClose(SWIGTYPE_p_TransportId id) {
    pjsua2PINVOKE.Endpoint_transportClose(swigCPtr, SWIGTYPE_p_TransportId.getCPtr(id));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void hangupAllCalls() {
    pjsua2PINVOKE.Endpoint_hangupAllCalls(swigCPtr);
  }

  public void mediaAdd(SWIGTYPE_p_AudioMedia media) {
    pjsua2PINVOKE.Endpoint_mediaAdd(swigCPtr, SWIGTYPE_p_AudioMedia.getCPtr(media));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void mediaRemove(SWIGTYPE_p_AudioMedia media) {
    pjsua2PINVOKE.Endpoint_mediaRemove(swigCPtr, SWIGTYPE_p_AudioMedia.getCPtr(media));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public bool mediaExists(SWIGTYPE_p_AudioMedia media) {
    bool ret = pjsua2PINVOKE.Endpoint_mediaExists(swigCPtr, SWIGTYPE_p_AudioMedia.getCPtr(media));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public uint mediaMaxPorts() {
    uint ret = pjsua2PINVOKE.Endpoint_mediaMaxPorts(swigCPtr);
    return ret;
  }

  public uint mediaActivePorts() {
    uint ret = pjsua2PINVOKE.Endpoint_mediaActivePorts(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_AudioMediaVector mediaEnumPorts() {
    SWIGTYPE_p_AudioMediaVector ret = new SWIGTYPE_p_AudioMediaVector(pjsua2PINVOKE.Endpoint_mediaEnumPorts(swigCPtr), false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_AudDevManager audDevManager() {
    SWIGTYPE_p_AudDevManager ret = new SWIGTYPE_p_AudDevManager(pjsua2PINVOKE.Endpoint_audDevManager(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_VidDevManager vidDevManager() {
    SWIGTYPE_p_VidDevManager ret = new SWIGTYPE_p_VidDevManager(pjsua2PINVOKE.Endpoint_vidDevManager(swigCPtr), false);
    return ret;
  }

  public SWIGTYPE_p_CodecInfoVector codecEnum() {
    SWIGTYPE_p_CodecInfoVector ret = new SWIGTYPE_p_CodecInfoVector(pjsua2PINVOKE.Endpoint_codecEnum(swigCPtr), false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void codecSetPriority(SWIGTYPE_p_string codec_id, SWIGTYPE_p_pj_uint8_t priority) {
    pjsua2PINVOKE.Endpoint_codecSetPriority(swigCPtr, SWIGTYPE_p_string.getCPtr(codec_id), SWIGTYPE_p_pj_uint8_t.getCPtr(priority));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_void codecGetParam(SWIGTYPE_p_string codec_id) {
    global::System.IntPtr cPtr = pjsua2PINVOKE.Endpoint_codecGetParam(swigCPtr, SWIGTYPE_p_string.getCPtr(codec_id));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void codecSetParam(SWIGTYPE_p_string codec_id, SWIGTYPE_p_void param) {
    pjsua2PINVOKE.Endpoint_codecSetParam(swigCPtr, SWIGTYPE_p_string.getCPtr(codec_id), SWIGTYPE_p_void.getCPtr(param));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_CodecInfoVector videoCodecEnum() {
    SWIGTYPE_p_CodecInfoVector ret = new SWIGTYPE_p_CodecInfoVector(pjsua2PINVOKE.Endpoint_videoCodecEnum(swigCPtr), false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void videoCodecSetPriority(SWIGTYPE_p_string codec_id, SWIGTYPE_p_pj_uint8_t priority) {
    pjsua2PINVOKE.Endpoint_videoCodecSetPriority(swigCPtr, SWIGTYPE_p_string.getCPtr(codec_id), SWIGTYPE_p_pj_uint8_t.getCPtr(priority));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_void videoCodecGetParam(SWIGTYPE_p_string codec_id) {
    global::System.IntPtr cPtr = pjsua2PINVOKE.Endpoint_videoCodecGetParam(swigCPtr, SWIGTYPE_p_string.getCPtr(codec_id));
    SWIGTYPE_p_void ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_void(cPtr, false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void videoCodecSetParam(SWIGTYPE_p_string codec_id, SWIGTYPE_p_void param) {
    pjsua2PINVOKE.Endpoint_videoCodecSetParam(swigCPtr, SWIGTYPE_p_string.getCPtr(codec_id), SWIGTYPE_p_void.getCPtr(param));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onNatDetectionComplete(OnNatDetectionCompleteParam prm) {
    pjsua2PINVOKE.Endpoint_onNatDetectionComplete(swigCPtr, OnNatDetectionCompleteParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onNatCheckStunServersComplete(OnNatCheckStunServersCompleteParam prm) {
    pjsua2PINVOKE.Endpoint_onNatCheckStunServersComplete(swigCPtr, OnNatCheckStunServersCompleteParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onTransportState(OnTransportStateParam prm) {
    pjsua2PINVOKE.Endpoint_onTransportState(swigCPtr, OnTransportStateParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onTimer(OnTimerParam prm) {
    pjsua2PINVOKE.Endpoint_onTimer(swigCPtr, OnTimerParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onSelectAccount(OnSelectAccountParam prm) {
    pjsua2PINVOKE.Endpoint_onSelectAccount(swigCPtr, OnSelectAccountParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

}
