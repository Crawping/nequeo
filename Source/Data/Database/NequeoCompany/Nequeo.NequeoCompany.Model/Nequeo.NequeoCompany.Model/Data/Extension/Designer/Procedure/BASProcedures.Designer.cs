// Warning 169 (Disables the 'Never used' warning)
#pragma warning disable 169
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nequeo.DataAccess.NequeoCompany.Data.Extension
{
    using System;
    using System.Text;
    using System.Data;
    using System.Threading;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.OleDb;
    using System.Data.Odbc;
    using System.Collections;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Data.Linq;
    using System.Data.Linq.SqlClient;
    using System.Data.Linq.Mapping;
    using Nequeo.Data.DataType;
    using Nequeo.Data;
    using Nequeo.Data.Linq;
    using Nequeo.Data.Control;
    using Nequeo.Data.Custom;
    using Nequeo.Data.LinqToSql;
    using Nequeo.Data.DataSet;
    using Nequeo.Data.Edm;
    using Nequeo.ComponentModel;
    
    
    /// <summary>
    /// The bas object class.
    /// </summary>
    public partial class BAS
    {
        
        #region Public Function Methods
        /// <summary>
        /// Execute the getbascompanypayginstalmentbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASCompanyPAYGInstalmentBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASCompanyPAYGInstalmentBetweenDateResult> GetBASCompanyPAYGInstalmentBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASCompanyPAYGInstalmentBetweenDateResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getbasemployeepaygbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASEmployeePAYGBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASEmployeePAYGBetweenDateResult> GetBASEmployeePAYGBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASEmployeePAYGBetweenDateResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getbasemployeesuperbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASEmployeeSuperBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASEmployeeSuperBetweenDateResult> GetBASEmployeeSuperBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASEmployeeSuperBetweenDateResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getbasemployeewagesbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASEmployeeWagesBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASEmployeeWagesBetweenDateResult> GetBASEmployeeWagesBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASEmployeeWagesBetweenDateResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getbasinvoicedetailsbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASInvoiceDetailsBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASInvoiceDetailsBetweenDateResult> GetBASInvoiceDetailsBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASInvoiceDetailsBetweenDateResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getbasinvoiceproductsbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASInvoiceProductsBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASInvoiceProductsBetweenDateResult> GetBASInvoiceProductsBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASInvoiceProductsBetweenDateResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getbasvendordetailsbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASVendorDetailsBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASVendorDetailsBetweenDateResult> GetBASVendorDetailsBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASVendorDetailsBetweenDateResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getbasvendordetailsbetweendatecapital routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetBASVendorDetailsBetweenDateCapital", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetBASVendorDetailsBetweenDateCapitalResult> GetBASVendorDetailsBetweenDateCapital([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate);
            return ((List<Data.Extended.GetBASVendorDetailsBetweenDateCapitalResult>)(result.ReturnValue));
        }
        
        /// <summary>
        /// Execute the getselectedbasbetweendate routine.
        /// </summary>
        /// <param name="fromDate">Initial value of FromDate.</param>
        /// <param name="toDate">Initial value of ToDate.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <returns>The execution result.</returns>
        [FunctionRoutineAttribute("dbo.GetSelectedBASBetweenDate", FunctionRoutineType.StoredProcedure)]
        public virtual List<Data.Extended.GetSelectedBASBetweenDateResult> GetSelectedBASBetweenDate([FunctionParameterAttribute("@FromDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> fromDate, [FunctionParameterAttribute("@ToDate", "datetime", 8, ParameterDirection.Input, true)] System.Nullable<System.DateTime> toDate, [FunctionParameterAttribute("@CompanyID", "int", 4, ParameterDirection.Input, true)] System.Nullable<System.Int32> companyID)
        {
            IExecuteFunctionResult result = Common.ExecuteFunction(Common, ((MethodInfo)(MethodInfo.GetCurrentMethod())), fromDate, toDate, companyID);
            return ((List<Data.Extended.GetSelectedBASBetweenDateResult>)(result.ReturnValue));
        }
        #endregion
    }
}
namespace Nequeo.DataAccess.NequeoCompany.Data.Extended
{
    using System;
    using System.Text;
    using System.Data;
    using System.Threading;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.OleDb;
    using System.Data.Odbc;
    using System.Collections;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Data.Linq;
    using System.Data.Linq.SqlClient;
    using System.Data.Linq.Mapping;
    using Nequeo.Data.DataType;
    using Nequeo.Data;
    using Nequeo.Data.Linq;
    using Nequeo.Data.Control;
    using Nequeo.Data.Custom;
    using Nequeo.Data.LinqToSql;
    using Nequeo.Data.DataSet;
    using Nequeo.Data.Edm;
    using Nequeo.ComponentModel;
    
    
    #region GetBASCompanyPAYGInstalmentBetweenDateResult Data Entity Type
    /// <summary>
    /// The getbascompanypayginstalmentbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASCompanyPAYGInstalmentBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASCompanyPAYGInstalmentBetweenDateResult : DataBase
    {
        
        private System.Nullable<System.Decimal> _InstalmentAmount;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASCompanyPAYGInstalmentBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the instalmentamount property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the instalmentamount property for the object.")]
        [DataMemberAttribute(Name = "InstalmentAmount")]
        [XmlElementAttribute(ElementName = "InstalmentAmount", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> InstalmentAmount
        {
            get
            {
                return this._InstalmentAmount;
            }
            set
            {
                if ((this._InstalmentAmount != value))
                {
                    this._InstalmentAmount = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbascompanypayginstalmentbetweendateresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetBASCompanyPAYGInstalmentBetweenDateResult entity.</returns>
        public static Data.Extended.GetBASCompanyPAYGInstalmentBetweenDateResult CreateGetBASCompanyPAYGInstalmentBetweenDateResult()
        {
            Data.Extended.GetBASCompanyPAYGInstalmentBetweenDateResult getBASCompanyPAYGInstalmentBetweenDateResult = new Data.Extended.GetBASCompanyPAYGInstalmentBetweenDateResult();
            return getBASCompanyPAYGInstalmentBetweenDateResult;
        }
    }
    #endregion
    
    #region GetBASEmployeePAYGBetweenDateResult Data Entity Type
    /// <summary>
    /// The getbasemployeepaygbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASEmployeePAYGBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASEmployeePAYGBetweenDateResult : DataBase
    {
        
        private System.Nullable<System.Decimal> _TotalAmount;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASEmployeePAYGBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the totalamount property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalamount property for the object.")]
        [DataMemberAttribute(Name = "TotalAmount")]
        [XmlElementAttribute(ElementName = "TotalAmount", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if ((this._TotalAmount != value))
                {
                    this._TotalAmount = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbasemployeepaygbetweendateresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetBASEmployeePAYGBetweenDateResult entity.</returns>
        public static Data.Extended.GetBASEmployeePAYGBetweenDateResult CreateGetBASEmployeePAYGBetweenDateResult()
        {
            Data.Extended.GetBASEmployeePAYGBetweenDateResult getBASEmployeePAYGBetweenDateResult = new Data.Extended.GetBASEmployeePAYGBetweenDateResult();
            return getBASEmployeePAYGBetweenDateResult;
        }
    }
    #endregion
    
    #region GetBASEmployeeSuperBetweenDateResult Data Entity Type
    /// <summary>
    /// The getbasemployeesuperbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASEmployeeSuperBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASEmployeeSuperBetweenDateResult : DataBase
    {
        
        private System.Nullable<System.Decimal> _TotalAmount;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASEmployeeSuperBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the totalamount property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalamount property for the object.")]
        [DataMemberAttribute(Name = "TotalAmount")]
        [XmlElementAttribute(ElementName = "TotalAmount", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if ((this._TotalAmount != value))
                {
                    this._TotalAmount = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbasemployeesuperbetweendateresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetBASEmployeeSuperBetweenDateResult entity.</returns>
        public static Data.Extended.GetBASEmployeeSuperBetweenDateResult CreateGetBASEmployeeSuperBetweenDateResult()
        {
            Data.Extended.GetBASEmployeeSuperBetweenDateResult getBASEmployeeSuperBetweenDateResult = new Data.Extended.GetBASEmployeeSuperBetweenDateResult();
            return getBASEmployeeSuperBetweenDateResult;
        }
    }
    #endregion
    
    #region GetBASEmployeeWagesBetweenDateResult Data Entity Type
    /// <summary>
    /// The getbasemployeewagesbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASEmployeeWagesBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASEmployeeWagesBetweenDateResult : DataBase
    {
        
        private System.Nullable<System.Decimal> _TotalNet;
        
        private System.Nullable<System.Decimal> _TotalPAYG;
        
        private System.Nullable<System.Decimal> _TotalPAYGSum;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASEmployeeWagesBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the totalnet property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalnet property for the object.")]
        [DataMemberAttribute(Name = "TotalNet")]
        [XmlElementAttribute(ElementName = "TotalNet", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalNet
        {
            get
            {
                return this._TotalNet;
            }
            set
            {
                if ((this._TotalNet != value))
                {
                    this._TotalNet = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the totalpayg property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalpayg property for the object.")]
        [DataMemberAttribute(Name = "TotalPAYG")]
        [XmlElementAttribute(ElementName = "TotalPAYG", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalPAYG
        {
            get
            {
                return this._TotalPAYG;
            }
            set
            {
                if ((this._TotalPAYG != value))
                {
                    this._TotalPAYG = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the totalpaygsum property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalpaygsum property for the object.")]
        [DataMemberAttribute(Name = "TotalPAYGSum")]
        [XmlElementAttribute(ElementName = "TotalPAYGSum", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalPAYGSum
        {
            get
            {
                return this._TotalPAYGSum;
            }
            set
            {
                if ((this._TotalPAYGSum != value))
                {
                    this._TotalPAYGSum = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbasemployeewagesbetweendateresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetBASEmployeeWagesBetweenDateResult entity.</returns>
        public static Data.Extended.GetBASEmployeeWagesBetweenDateResult CreateGetBASEmployeeWagesBetweenDateResult()
        {
            Data.Extended.GetBASEmployeeWagesBetweenDateResult getBASEmployeeWagesBetweenDateResult = new Data.Extended.GetBASEmployeeWagesBetweenDateResult();
            return getBASEmployeeWagesBetweenDateResult;
        }
    }
    #endregion
    
    #region GetBASInvoiceDetailsBetweenDateResult Data Entity Type
    /// <summary>
    /// The getbasinvoicedetailsbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASInvoiceDetailsBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASInvoiceDetailsBetweenDateResult : DataBase
    {
        
        private System.Nullable<System.Decimal> _Totals;
        
        private System.Nullable<System.Double> _PreGST;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASInvoiceDetailsBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the totals property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totals property for the object.")]
        [DataMemberAttribute(Name = "Totals")]
        [XmlElementAttribute(ElementName = "Totals", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> Totals
        {
            get
            {
                return this._Totals;
            }
            set
            {
                if ((this._Totals != value))
                {
                    this._Totals = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the pregst property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the pregst property for the object.")]
        [DataMemberAttribute(Name = "PreGST")]
        [XmlElementAttribute(ElementName = "PreGST", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Double> PreGST
        {
            get
            {
                return this._PreGST;
            }
            set
            {
                if ((this._PreGST != value))
                {
                    this._PreGST = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbasinvoicedetailsbetweendateresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetBASInvoiceDetailsBetweenDateResult entity.</returns>
        public static Data.Extended.GetBASInvoiceDetailsBetweenDateResult CreateGetBASInvoiceDetailsBetweenDateResult()
        {
            Data.Extended.GetBASInvoiceDetailsBetweenDateResult getBASInvoiceDetailsBetweenDateResult = new Data.Extended.GetBASInvoiceDetailsBetweenDateResult();
            return getBASInvoiceDetailsBetweenDateResult;
        }
    }
    #endregion
    
    #region GetBASInvoiceProductsBetweenDateResult Data Entity Type
    /// <summary>
    /// The getbasinvoiceproductsbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASInvoiceProductsBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASInvoiceProductsBetweenDateResult : DataBase
    {
        
        private System.Nullable<System.Decimal> _Totals;
        
        private System.Nullable<System.Double> _PreGST;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASInvoiceProductsBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the totals property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totals property for the object.")]
        [DataMemberAttribute(Name = "Totals")]
        [XmlElementAttribute(ElementName = "Totals", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> Totals
        {
            get
            {
                return this._Totals;
            }
            set
            {
                if ((this._Totals != value))
                {
                    this._Totals = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the pregst property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the pregst property for the object.")]
        [DataMemberAttribute(Name = "PreGST")]
        [XmlElementAttribute(ElementName = "PreGST", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Double> PreGST
        {
            get
            {
                return this._PreGST;
            }
            set
            {
                if ((this._PreGST != value))
                {
                    this._PreGST = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbasinvoiceproductsbetweendateresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetBASInvoiceProductsBetweenDateResult entity.</returns>
        public static Data.Extended.GetBASInvoiceProductsBetweenDateResult CreateGetBASInvoiceProductsBetweenDateResult()
        {
            Data.Extended.GetBASInvoiceProductsBetweenDateResult getBASInvoiceProductsBetweenDateResult = new Data.Extended.GetBASInvoiceProductsBetweenDateResult();
            return getBASInvoiceProductsBetweenDateResult;
        }
    }
    #endregion
    
    #region GetBASVendorDetailsBetweenDateResult Data Entity Type
    /// <summary>
    /// The getbasvendordetailsbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASVendorDetailsBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASVendorDetailsBetweenDateResult : DataBase
    {
        
        private System.Nullable<System.Decimal> _TotalAmount;
        
        private System.Nullable<System.Decimal> _TotalGST;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASVendorDetailsBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the totalamount property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalamount property for the object.")]
        [DataMemberAttribute(Name = "TotalAmount")]
        [XmlElementAttribute(ElementName = "TotalAmount", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if ((this._TotalAmount != value))
                {
                    this._TotalAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the totalgst property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalgst property for the object.")]
        [DataMemberAttribute(Name = "TotalGST")]
        [XmlElementAttribute(ElementName = "TotalGST", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalGST
        {
            get
            {
                return this._TotalGST;
            }
            set
            {
                if ((this._TotalGST != value))
                {
                    this._TotalGST = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbasvendordetailsbetweendateresult data entity.
        /// </summary>
        /// <returns>The Data.Extended.GetBASVendorDetailsBetweenDateResult entity.</returns>
        public static Data.Extended.GetBASVendorDetailsBetweenDateResult CreateGetBASVendorDetailsBetweenDateResult()
        {
            Data.Extended.GetBASVendorDetailsBetweenDateResult getBASVendorDetailsBetweenDateResult = new Data.Extended.GetBASVendorDetailsBetweenDateResult();
            return getBASVendorDetailsBetweenDateResult;
        }
    }
    #endregion
    
    #region GetBASVendorDetailsBetweenDateCapitalResult Data Entity Type
    /// <summary>
    /// The getbasvendordetailsbetweendatecapitalresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetBASVendorDetailsBetweenDateCapitalResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetBASVendorDetailsBetweenDateCapitalResult : DataBase
    {
        
        private string _PurchaseType;
        
        private System.Nullable<System.Decimal> _TotalAmount;
        
        private System.Nullable<System.Decimal> _TotalGST;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetBASVendorDetailsBetweenDateCapitalResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the purchasetype property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the purchasetype property for the object.")]
        [DataMemberAttribute(Name = "PurchaseType")]
        [XmlElementAttribute(ElementName = "PurchaseType", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public string PurchaseType
        {
            get
            {
                return this._PurchaseType;
            }
            set
            {
                if ((this._PurchaseType != value))
                {
                    this._PurchaseType = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the totalamount property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalamount property for the object.")]
        [DataMemberAttribute(Name = "TotalAmount")]
        [XmlElementAttribute(ElementName = "TotalAmount", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalAmount
        {
            get
            {
                return this._TotalAmount;
            }
            set
            {
                if ((this._TotalAmount != value))
                {
                    this._TotalAmount = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the totalgst property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalgst property for the object.")]
        [DataMemberAttribute(Name = "TotalGST")]
        [XmlElementAttribute(ElementName = "TotalGST", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> TotalGST
        {
            get
            {
                return this._TotalGST;
            }
            set
            {
                if ((this._TotalGST != value))
                {
                    this._TotalGST = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getbasvendordetailsbetweendatecapitalresult data entity.
        /// </summary>
        /// <param name="purchaseType">Initial value of PurchaseType.</param>
        /// <returns>The Data.Extended.GetBASVendorDetailsBetweenDateCapitalResult entity.</returns>
        public static Data.Extended.GetBASVendorDetailsBetweenDateCapitalResult CreateGetBASVendorDetailsBetweenDateCapitalResult(string purchaseType)
        {
            Data.Extended.GetBASVendorDetailsBetweenDateCapitalResult getBASVendorDetailsBetweenDateCapitalResult = new Data.Extended.GetBASVendorDetailsBetweenDateCapitalResult();
            getBASVendorDetailsBetweenDateCapitalResult.PurchaseType = purchaseType;
            return getBASVendorDetailsBetweenDateCapitalResult;
        }
    }
    #endregion
    
    #region GetSelectedBASBetweenDateResult Data Entity Type
    /// <summary>
    /// The getselectedbasbetweendateresult data object class.
    /// </summary>
    [DataContractAttribute(Name = "GetSelectedBASBetweenDateResult", IsReference = true)]
    [SerializableAttribute()]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class GetSelectedBASBetweenDateResult : DataBase
    {
        
        private int _BASID;
        
        private int _CompanyID;
        
        private System.DateTime _BasDate;
        
        private string _DocumentID;
        
        private string _Reference;
        
        private string _EFTCode;
        
        private decimal _TotalSales;
        
        private System.Nullable<System.Decimal> _ExportSales;
        
        private System.Nullable<System.Decimal> _OtherGSTFreeSales;
        
        private System.Nullable<System.Decimal> _CapitalPurchases;
        
        private decimal _NonCapitalPurchases;
        
        private decimal _GSTOnSales;
        
        private decimal _GSTOnPurchases;
        
        private string _PaymentOrRefund;
        
        private decimal _Amount;
        
        private string _Description;
        
        private string _Comments;
        
        private decimal _TotalWages;
        
        private decimal _PAYGWithheld;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public GetSelectedBASBetweenDateResult()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the basid property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the basid property for the object.")]
        [DataMemberAttribute(Name = "BASID")]
        [XmlElementAttribute(ElementName = "BASID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public int BASID
        {
            get
            {
                return this._BASID;
            }
            set
            {
                if ((this._BASID != value))
                {
                    this._BASID = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the companyid property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the companyid property for the object.")]
        [DataMemberAttribute(Name = "CompanyID")]
        [XmlElementAttribute(ElementName = "CompanyID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public int CompanyID
        {
            get
            {
                return this._CompanyID;
            }
            set
            {
                if ((this._CompanyID != value))
                {
                    this._CompanyID = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the basdate property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the basdate property for the object.")]
        [DataMemberAttribute(Name = "BasDate")]
        [XmlElementAttribute(ElementName = "BasDate", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public System.DateTime BasDate
        {
            get
            {
                return this._BasDate;
            }
            set
            {
                if ((this._BasDate != value))
                {
                    this._BasDate = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the documentid property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the documentid property for the object.")]
        [DataMemberAttribute(Name = "DocumentID")]
        [XmlElementAttribute(ElementName = "DocumentID", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public string DocumentID
        {
            get
            {
                return this._DocumentID;
            }
            set
            {
                if ((this._DocumentID != value))
                {
                    this._DocumentID = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the reference property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the reference property for the object.")]
        [DataMemberAttribute(Name = "Reference")]
        [XmlElementAttribute(ElementName = "Reference", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public string Reference
        {
            get
            {
                return this._Reference;
            }
            set
            {
                if ((this._Reference != value))
                {
                    this._Reference = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the eftcode property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the eftcode property for the object.")]
        [DataMemberAttribute(Name = "EFTCode")]
        [XmlElementAttribute(ElementName = "EFTCode", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public string EFTCode
        {
            get
            {
                return this._EFTCode;
            }
            set
            {
                if ((this._EFTCode != value))
                {
                    this._EFTCode = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the totalsales property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalsales property for the object.")]
        [DataMemberAttribute(Name = "TotalSales")]
        [XmlElementAttribute(ElementName = "TotalSales", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public decimal TotalSales
        {
            get
            {
                return this._TotalSales;
            }
            set
            {
                if ((this._TotalSales != value))
                {
                    this._TotalSales = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the exportsales property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the exportsales property for the object.")]
        [DataMemberAttribute(Name = "ExportSales")]
        [XmlElementAttribute(ElementName = "ExportSales", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> ExportSales
        {
            get
            {
                return this._ExportSales;
            }
            set
            {
                if ((this._ExportSales != value))
                {
                    this._ExportSales = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the othergstfreesales property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the othergstfreesales property for the object.")]
        [DataMemberAttribute(Name = "OtherGSTFreeSales")]
        [XmlElementAttribute(ElementName = "OtherGSTFreeSales", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> OtherGSTFreeSales
        {
            get
            {
                return this._OtherGSTFreeSales;
            }
            set
            {
                if ((this._OtherGSTFreeSales != value))
                {
                    this._OtherGSTFreeSales = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the capitalpurchases property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the capitalpurchases property for the object.")]
        [DataMemberAttribute(Name = "CapitalPurchases")]
        [XmlElementAttribute(ElementName = "CapitalPurchases", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public System.Nullable<System.Decimal> CapitalPurchases
        {
            get
            {
                return this._CapitalPurchases;
            }
            set
            {
                if ((this._CapitalPurchases != value))
                {
                    this._CapitalPurchases = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the noncapitalpurchases property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the noncapitalpurchases property for the object.")]
        [DataMemberAttribute(Name = "NonCapitalPurchases")]
        [XmlElementAttribute(ElementName = "NonCapitalPurchases", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public decimal NonCapitalPurchases
        {
            get
            {
                return this._NonCapitalPurchases;
            }
            set
            {
                if ((this._NonCapitalPurchases != value))
                {
                    this._NonCapitalPurchases = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the gstonsales property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the gstonsales property for the object.")]
        [DataMemberAttribute(Name = "GSTOnSales")]
        [XmlElementAttribute(ElementName = "GSTOnSales", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public decimal GSTOnSales
        {
            get
            {
                return this._GSTOnSales;
            }
            set
            {
                if ((this._GSTOnSales != value))
                {
                    this._GSTOnSales = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the gstonpurchases property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the gstonpurchases property for the object.")]
        [DataMemberAttribute(Name = "GSTOnPurchases")]
        [XmlElementAttribute(ElementName = "GSTOnPurchases", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public decimal GSTOnPurchases
        {
            get
            {
                return this._GSTOnPurchases;
            }
            set
            {
                if ((this._GSTOnPurchases != value))
                {
                    this._GSTOnPurchases = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the paymentorrefund property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the paymentorrefund property for the object.")]
        [DataMemberAttribute(Name = "PaymentOrRefund")]
        [XmlElementAttribute(ElementName = "PaymentOrRefund", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public string PaymentOrRefund
        {
            get
            {
                return this._PaymentOrRefund;
            }
            set
            {
                if ((this._PaymentOrRefund != value))
                {
                    this._PaymentOrRefund = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the amount property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the amount property for the object.")]
        [DataMemberAttribute(Name = "Amount")]
        [XmlElementAttribute(ElementName = "Amount", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public decimal Amount
        {
            get
            {
                return this._Amount;
            }
            set
            {
                if ((this._Amount != value))
                {
                    this._Amount = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the description property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the description property for the object.")]
        [DataMemberAttribute(Name = "Description")]
        [XmlElementAttribute(ElementName = "Description", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this._Description = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the comments property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the comments property for the object.")]
        [DataMemberAttribute(Name = "Comments")]
        [XmlElementAttribute(ElementName = "Comments", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        public string Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if ((this._Comments != value))
                {
                    this._Comments = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the totalwages property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the totalwages property for the object.")]
        [DataMemberAttribute(Name = "TotalWages")]
        [XmlElementAttribute(ElementName = "TotalWages", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public decimal TotalWages
        {
            get
            {
                return this._TotalWages;
            }
            set
            {
                if ((this._TotalWages != value))
                {
                    this._TotalWages = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the paygwithheld property for the object.
        /// </summary>
        [CategoryAttribute("Column")]
        [DescriptionAttribute("Gets sets, the paygwithheld property for the object.")]
        [DataMemberAttribute(Name = "PAYGWithheld")]
        [XmlElementAttribute(ElementName = "PAYGWithheld", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        public decimal PAYGWithheld
        {
            get
            {
                return this._PAYGWithheld;
            }
            set
            {
                if ((this._PAYGWithheld != value))
                {
                    this._PAYGWithheld = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new getselectedbasbetweendateresult data entity.
        /// </summary>
        /// <param name="bASID">Initial value of BASID.</param>
        /// <param name="companyID">Initial value of CompanyID.</param>
        /// <param name="basDate">Initial value of BasDate.</param>
        /// <param name="totalSales">Initial value of TotalSales.</param>
        /// <param name="nonCapitalPurchases">Initial value of NonCapitalPurchases.</param>
        /// <param name="gSTOnSales">Initial value of GSTOnSales.</param>
        /// <param name="gSTOnPurchases">Initial value of GSTOnPurchases.</param>
        /// <param name="paymentOrRefund">Initial value of PaymentOrRefund.</param>
        /// <param name="amount">Initial value of Amount.</param>
        /// <param name="totalWages">Initial value of TotalWages.</param>
        /// <param name="pAYGWithheld">Initial value of PAYGWithheld.</param>
        /// <returns>The Data.Extended.GetSelectedBASBetweenDateResult entity.</returns>
        public static Data.Extended.GetSelectedBASBetweenDateResult CreateGetSelectedBASBetweenDateResult(int bASID, int companyID, System.DateTime basDate, decimal totalSales, decimal nonCapitalPurchases, decimal gSTOnSales, decimal gSTOnPurchases, string paymentOrRefund, decimal amount, decimal totalWages, decimal pAYGWithheld)
        {
            Data.Extended.GetSelectedBASBetweenDateResult getSelectedBASBetweenDateResult = new Data.Extended.GetSelectedBASBetweenDateResult();
            getSelectedBASBetweenDateResult.BASID = bASID;
            getSelectedBASBetweenDateResult.CompanyID = companyID;
            getSelectedBASBetweenDateResult.BasDate = basDate;
            getSelectedBASBetweenDateResult.TotalSales = totalSales;
            getSelectedBASBetweenDateResult.NonCapitalPurchases = nonCapitalPurchases;
            getSelectedBASBetweenDateResult.GSTOnSales = gSTOnSales;
            getSelectedBASBetweenDateResult.GSTOnPurchases = gSTOnPurchases;
            getSelectedBASBetweenDateResult.PaymentOrRefund = paymentOrRefund;
            getSelectedBASBetweenDateResult.Amount = amount;
            getSelectedBASBetweenDateResult.TotalWages = totalWages;
            getSelectedBASBetweenDateResult.PAYGWithheld = pAYGWithheld;
            return getSelectedBASBetweenDateResult;
        }
    }
    #endregion
}

#pragma warning restore 169
