//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.7
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class Account : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Account(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Account obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Account() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          pjsua2PINVOKE.delete_Account(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public Account() : this(pjsua2PINVOKE.new_Account(), true) {
  }

  public void create(AccountConfig cfg, bool make_default) {
    pjsua2PINVOKE.Account_create__SWIG_0(swigCPtr, AccountConfig.getCPtr(cfg), make_default);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void create(AccountConfig cfg) {
    pjsua2PINVOKE.Account_create__SWIG_1(swigCPtr, AccountConfig.getCPtr(cfg));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void modify(AccountConfig cfg) {
    pjsua2PINVOKE.Account_modify(swigCPtr, AccountConfig.getCPtr(cfg));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isValid() {
    bool ret = pjsua2PINVOKE.Account_isValid(swigCPtr);
    return ret;
  }

  public void setDefault() {
    pjsua2PINVOKE.Account_setDefault(swigCPtr);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public bool isDefault() {
    bool ret = pjsua2PINVOKE.Account_isDefault(swigCPtr);
    return ret;
  }

  public int getId() {
    int ret = pjsua2PINVOKE.Account_getId(swigCPtr);
    return ret;
  }

  public static Account lookup(int acc_id) {
    global::System.IntPtr cPtr = pjsua2PINVOKE.Account_lookup(acc_id);
    Account ret = (cPtr == global::System.IntPtr.Zero) ? null : new Account(cPtr, false);
    return ret;
  }

  public AccountInfo getInfo() {
    AccountInfo ret = new AccountInfo(pjsua2PINVOKE.Account_getInfo(swigCPtr), true);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void setRegistration(bool renew) {
    pjsua2PINVOKE.Account_setRegistration(swigCPtr, renew);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void setOnlineStatus(SWIGTYPE_p_PresenceStatus pres_st) {
    pjsua2PINVOKE.Account_setOnlineStatus(swigCPtr, SWIGTYPE_p_PresenceStatus.getCPtr(pres_st));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTransport(SWIGTYPE_p_TransportId tp_id) {
    pjsua2PINVOKE.Account_setTransport(swigCPtr, SWIGTYPE_p_TransportId.getCPtr(tp_id));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public void presNotify(PresNotifyParam prm) {
    pjsua2PINVOKE.Account_presNotify(swigCPtr, PresNotifyParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public SWIGTYPE_p_BuddyVector enumBuddies() {
    SWIGTYPE_p_BuddyVector ret = new SWIGTYPE_p_BuddyVector(pjsua2PINVOKE.Account_enumBuddies(swigCPtr), false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Buddy findBuddy(SWIGTYPE_p_string uri, FindBuddyMatch buddy_match) {
    global::System.IntPtr cPtr = pjsua2PINVOKE.Account_findBuddy__SWIG_0(swigCPtr, SWIGTYPE_p_string.getCPtr(uri), FindBuddyMatch.getCPtr(buddy_match));
    SWIGTYPE_p_Buddy ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Buddy(cPtr, false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public SWIGTYPE_p_Buddy findBuddy(SWIGTYPE_p_string uri) {
    global::System.IntPtr cPtr = pjsua2PINVOKE.Account_findBuddy__SWIG_1(swigCPtr, SWIGTYPE_p_string.getCPtr(uri));
    SWIGTYPE_p_Buddy ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_Buddy(cPtr, false);
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public void addBuddy(SWIGTYPE_p_Buddy buddy) {
    pjsua2PINVOKE.Account_addBuddy(swigCPtr, SWIGTYPE_p_Buddy.getCPtr(buddy));
  }

  public void removeBuddy(SWIGTYPE_p_Buddy buddy) {
    pjsua2PINVOKE.Account_removeBuddy(swigCPtr, SWIGTYPE_p_Buddy.getCPtr(buddy));
  }

  public virtual void onIncomingCall(OnIncomingCallParam prm) {
    pjsua2PINVOKE.Account_onIncomingCall(swigCPtr, OnIncomingCallParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onRegStarted(OnRegStartedParam prm) {
    pjsua2PINVOKE.Account_onRegStarted(swigCPtr, OnRegStartedParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onRegState(OnRegStateParam prm) {
    pjsua2PINVOKE.Account_onRegState(swigCPtr, OnRegStateParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onIncomingSubscribe(OnIncomingSubscribeParam prm) {
    pjsua2PINVOKE.Account_onIncomingSubscribe(swigCPtr, OnIncomingSubscribeParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onInstantMessage(OnInstantMessageParam prm) {
    pjsua2PINVOKE.Account_onInstantMessage(swigCPtr, OnInstantMessageParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onInstantMessageStatus(OnInstantMessageStatusParam prm) {
    pjsua2PINVOKE.Account_onInstantMessageStatus(swigCPtr, OnInstantMessageStatusParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onTypingIndication(OnTypingIndicationParam prm) {
    pjsua2PINVOKE.Account_onTypingIndication(swigCPtr, OnTypingIndicationParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

  public virtual void onMwiInfo(OnMwiInfoParam prm) {
    pjsua2PINVOKE.Account_onMwiInfo(swigCPtr, OnMwiInfoParam.getCPtr(prm));
    if (pjsua2PINVOKE.SWIGPendingException.Pending) throw pjsua2PINVOKE.SWIGPendingException.Retrieve();
  }

}
