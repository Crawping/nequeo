// Warning 169 (Disables the 'Never used' warning)
#pragma warning disable 169
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nequeo.DataAccess.NequeoCompany.Data.Extension
{
    using System;
    using System.Text;
    using System.Data;
    using System.Threading;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.OleDb;
    using System.Data.Odbc;
    using System.Collections;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using System.Linq;
    using System.Linq.Expressions;
    using System.Data.Linq;
    using System.Data.Common;
    using System.Data.Linq.SqlClient;
    using System.Data.Linq.Mapping;
    using Nequeo.Data.DataType;
    using Nequeo.Data;
    using Nequeo.Data.Control;
    using Nequeo.Data.Custom;
    using Nequeo.Data.LinqToSql;
    using Nequeo.Data.DataSet;
    using Nequeo.Data.Edm;
	using Nequeo.Threading;
    using Data = Nequeo.DataAccess.NequeoCompany.Data;
    
    
    #region Products DataSet Extension Type
    /// <summary>
    /// The Products schema object class.
    /// </summary>
    public partial class Products
    {
		private Nequeo.Threading.AsyncExecutionHandler<Products> _asyncAccount = null;
        private Exception _exception = null;
		private ProductsThread _threadProductsContext = null;

        private Dictionary<object, object> _callback = new Dictionary<object, object>();
        private Dictionary<object, object> _state = new Dictionary<object, object>();

		/// <summary>
        /// Gets the current async exception; else null;
        /// </summary>
        public Exception Exception
        {
            get { return _exception; }
        }

		/// <summary>
        /// Gets the Products threading context.
        /// </summary>
        public ProductsThread ProductsThreadContext
        {
            get { return _threadProductsContext; }
        }

		/// <summary>
        /// On create instance of Products
        /// </summary>
		partial void OnCreated()
		{
			// Start the async control.
            _asyncAccount = new Nequeo.Threading.AsyncExecutionHandler<Products>();
			_asyncAccount.AsyncError += new Threading.EventHandler<Exception>(_asyncAccount_AsyncError);
            _asyncAccount.AsyncComplete += new Threading.EventHandler<object, string>(_asyncAccount_AsyncComplete);
            _asyncAccount.InitiliseAsyncInstance(this);

			_threadProductsContext = new ProductsThread(this);
			_threadProductsContext.AsyncError += new Threading.EventHandler<Exception>(_asyncAccount_AsyncError);
		}

		/// <summary>
        /// Async error
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e1"></param>
        private void _asyncAccount_AsyncError(object sender, Exception e1)
        {
            _exception = e1;
        }

		/// <summary>
        /// Function routine handler
        /// </summary>
        /// <returns>The function handler instance.</returns>
        public virtual FunctionTransaction FunctionHandler()
        {
            return new FunctionTransaction(DefaultDatabaseConnection(), _connectionType, _connectionDataType, new Nequeo.Data.SqlServer.DataAccess());
        }

		/// <summary>
        /// Delegate transaction handler.
        /// </summary>
        /// <returns>The delegate handler instance.</returns>
        public virtual DataTransactions<Data.Products> DelegateTransaction()
        {
           return new DataTransactions<Data.Products>(
                    this.Insert, 
                    this.Delete, 
                    this.Update, 
                    this.Select);
        }

		/// <summary>
        /// Products threading handler.
        /// </summary>
        public class ProductsThread : Nequeo.Threading.AsyncExecutionHandler<Products>
        {
            /// <summary>
            /// Products threading handler.
            /// </summary>
            /// <param name="service">The Products type.</param>
            public ProductsThread(Products service)
                : base(service) { }
        }
    }
    #endregion
}

#pragma warning restore 169
