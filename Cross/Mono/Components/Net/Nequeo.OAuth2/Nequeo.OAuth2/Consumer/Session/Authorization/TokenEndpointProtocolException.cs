/*  Company :       Nequeo Pty Ltd, http://www.nequeo.com.au/
 *  Copyright :     Copyright © Nequeo Pty Ltd 2012 http://www.nequeo.com.au/
 * 
 *  File :          
 *  Purpose :       
 * 
 */

#region Nequeo Pty Ltd License
/*
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
*/
#endregion

namespace Nequeo.Net.OAuth2.Consumer.Session.Authorization
{
	using System;
	using System.Collections.Generic;
	using System.Globalization;
	using System.Linq;
	using System.Text;

    using Nequeo.Net.Core.Messaging;
    using Nequeo.Net.Core.Messaging.Reflection;
    using Nequeo.Net.OAuth2.Framework;
    using Nequeo.Net.OAuth2.Framework.Messages;
    using Nequeo.Net.OAuth2.Consumer.Session.Authorization.Messages;

	/// <summary>
	/// Describes an error generated by an Authorization Server's token endpoint.
	/// </summary>
	public class TokenEndpointProtocolException : ProtocolException {
		/// <summary>
		/// The message being processed that caused this exception to be thrown.
		/// </summary>
		private readonly AccessTokenRequestBase requestMessage;

		/// <summary>
		/// The WWW-Authenticate header to add to the response message.
		/// </summary>
		private readonly string authenticateHeader;

		/// <summary>
		/// Initializes a new instance of the <see cref="TokenEndpointProtocolException"/> class.
		/// </summary>
		/// <param name="requestMessage">The message whose processing resulted in this error.</param>
		/// <param name="error">A single error code from <see cref="Protocol.AccessTokenRequestErrorCodes"/>.</param>
		/// <param name="description">A human-readable UTF-8 encoded text providing additional information, used to assist the client developer in understanding the error that occurred.</param>
		/// <param name="moreInformation">A URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.</param>
		/// <param name="authenticateHeader">The WWW-Authenticate header to add to the response.</param>
		public TokenEndpointProtocolException(AccessTokenRequestBase requestMessage, string error, string description = null, Uri moreInformation = null, string authenticateHeader = null)
			: base(string.Format(CultureInfo.CurrentCulture, ClientAuthorizationStrings.TokenEndpointErrorFormat, error, description)) {

			this.requestMessage = requestMessage;
			this.Error = error;
			this.Description = description;
			this.MoreInformation = moreInformation;
			this.authenticateHeader = authenticateHeader;
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="TokenEndpointProtocolException"/> class.
		/// </summary>
		/// <param name="innerException">The inner exception.</param>
		public TokenEndpointProtocolException(Exception innerException)
			: base(Protocol.AccessTokenRequestErrorCodes.InvalidRequest, innerException) {
			this.Error = Protocol.AccessTokenRequestErrorCodes.InvalidRequest;
		}

		/// <summary>
		/// Gets a single error code from <see cref="Protocol.AccessTokenRequestErrorCodes"/>.
		/// </summary>
		public string Error { get; private set; }

		/// <summary>
		/// Gets a human-readable UTF-8 encoded text providing additional information, used to assist the client developer in understanding the error that occurred.
		/// </summary>
		public string Description { get; private set; }

		/// <summary>
		/// Gets a URI identifying a human-readable web page with information about the error, used to provide the client developer with additional information about the error.
		/// </summary>
		public Uri MoreInformation { get; private set; }

		/// <summary>
		/// Gets the response message to send to the client.
		/// </summary>
		/// <returns>A message.</returns>
		public IDirectResponseProtocolMessage GetResponse() {
			var response = this.requestMessage != null
				? new AccessTokenFailedResponse(this.requestMessage, this.authenticateHeader != null)
				: new AccessTokenFailedResponse();
			response.Error = this.Error;
			response.ErrorDescription = this.Description;
			response.ErrorUri = this.MoreInformation;
			if (this.authenticateHeader != null) {
				response.Headers.Add(HttpRequestHeaders.WwwAuthenticate, this.authenticateHeader);
			}

			return response;
		}
	}
}
