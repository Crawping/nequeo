/*  Company :       Nequeo Pty Ltd, http://www.nequeo.com.au/
 *  Copyright :     Copyright © Nequeo Pty Ltd 2015 http://www.nequeo.com.au/
 * 
 *  File :          
 *  Purpose :       
 * 
 */

#region Nequeo Pty Ltd License
/*
    Permission is hereby granted, free of charge, to any person
    obtaining a copy of this software and associated documentation
    files (the "Software"), to deal in the Software without
    restriction, including without limitation the rights to use,
    copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following
    conditions:

    The above copyright notice and this permission notice shall be
    included in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.
*/
#endregion

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Nequeo.Threading
{
    /// <summary>
    /// Provides a way to synchronously or asynchronously execute a delegate for User Interfaces (UI).
    /// </summary>
    public class UISynchronizeInvoke
    {
        /// <summary>
        /// Initialisation
        /// </summary>
        /// <param name="sync">The initialisation sync.</param>
        public UISynchronizeInvoke(ISynchronizeInvoke sync)
        {
            _sync = sync;
        }

        private ISynchronizeInvoke _sync;

        /// <summary>
        /// Execute the action.
        /// </summary>
        /// <param name="action">The action to perform.</param>
        public void Execute(Action action)
        {
            _sync.BeginInvoke(action, null);
        }

        /// <summary>
        /// Execute the action.
        /// </summary>
        /// <param name="action">The action to perform.</param>
        /// <param name="arguments">An array of type System.Object that represents the arguments to pass to the given method. This can be null if no arguments are needed.</param>
        public void Execute(Action action, object[] arguments)
        {
            _sync.BeginInvoke(action, arguments);
        }

        /// <summary>
        /// Asynchronously executes the delegate on the thread that created this object.
        /// </summary>
        /// <param name="method">A System.Delegate to a method that takes parameters of the same number and type that are contained in args.</param>
        /// <param name="args">An array of type System.Object to pass as arguments to the given method. This can be null if no arguments are needed.</param>
        /// <returns>An System.IAsyncResult interface that represents the asynchronous operation started by calling this method.</returns>
        public IAsyncResult BeginInvoke(Delegate method, object[] args)
        {
            return _sync.BeginInvoke(method, args);
        }

        /// <summary>
        /// Waits until the process started by calling System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])
        /// completes, and then returns the value generated by the process.
        /// </summary>
        /// <param name="result">An System.IAsyncResult interface that represents the asynchronous operation
        /// started by calling System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[]).</param>
        /// <returns>An System.Object that represents the return value generated by the asynchronous operation.</returns>
        public object EndInvoke(IAsyncResult result)
        {
            return _sync.EndInvoke(result);
        }

        /// <summary>
        /// Synchronously executes the delegate on the thread that created this object
        /// and marshals the call to the creating thread.
        /// </summary>
        /// <param name="method">A System.Delegate that contains a method to call, in the context of the thread for the control.</param>
        /// <param name="arguments">An array of type System.Object that represents the arguments to pass to the given method. This can be null if no arguments are needed.</param>
        /// <returns>An System.Object that represents the return value from the delegate being invoked, or null if the delegate has no return value.</returns>
        public object Invoke(Delegate method, object[] arguments)
        {
            return _sync.Invoke(method, arguments);
        }
    }
}
