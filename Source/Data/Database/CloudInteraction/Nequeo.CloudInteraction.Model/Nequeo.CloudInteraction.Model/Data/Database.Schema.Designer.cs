//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Nequeo.DataAccess.CloudInteraction.Data
{
    using System;
    using System.Linq;
    using System.Text;
    using System.Data;
    using System.Threading;
    using System.Diagnostics;
    using System.Data.SqlClient;
    using System.Data.OleDb;
    using System.Data.Odbc;
    using System.Collections;
    using System.Reflection;
    using System.Collections.Generic;
    using System.Xml.Serialization;
    using System.Runtime.Serialization;
    using System.ComponentModel;
    using System.Drawing;
    using System.Drawing.Design;
    using Nequeo.Data.DataType;
    using Nequeo.Data;
    using Nequeo.Data.Linq;
    using Nequeo.Data.Control;
    using Nequeo.Data.Custom;
    using Nequeo.Data.LinqToSql;
    using Nequeo.Data.DataSet;
    using Nequeo.Data.Edm;
    using Nequeo.ComponentModel;
    
    
    #region User Data Entity Type
    /// <summary>
    /// The user data object class.
    /// </summary>
    [DataContractAttribute(Name = "User", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.User")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class User : DataBase
    {
        
        private long _ApplicationLoginUserID;
        
        private string _ApplicationName;
        
        private string _Comments;
        
        private System.DateTime _CreationDate;
        
        private string _Email;
        
        private int _FailedPasswordAnswerAttemptCount;
        
        private System.DateTime _FailedPasswordAnswerAttemptWindowStart;
        
        private int _FailedPasswordAttemptCount;
        
        private System.DateTime _FailedPasswordAttemptWindowStart;
        
        private bool _IsApproved;
        
        private System.DateTime _LastActivityDate;
        
        private System.DateTime _LastLoginDate;
        
        private System.DateTime _LastPasswordChangedDate;
        
        private bool _LoggedIn;
        
        private string _Password;
        
        private string _PasswordAnswer;
        
        private string _PasswordQuestion;
        
        private System.Nullable<System.Int64> _ProfileID;
        
        private System.Nullable<System.Int64> _RoleID;
        
        private long _UserID;
        
        private string _Username;
        
        private bool _UserSuspended;
        
        private System.DateTime _UserSuspendedDate;
        
        private Data.Role _Role;
        
        private Data.Profile _Profile;
        
        private Data.Contact[] _ContactCollection;
        
        private Data.OAuthConsumer[] _OAuthConsumerCollection;
        
        private Data.ClientAuthorization[] _ClientAuthorizationCollection;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ApplicationLoginUserID column data entity changed.
        /// </summary>
		partial void OnApplicationLoginUserIDChanged();

        /// <summary>
        /// On ApplicationLoginUserID column data entity changing.
        /// </summary>
		partial void OnApplicationLoginUserIDChanging();

        /// <summary>
        /// On ApplicationName column data entity changed.
        /// </summary>
		partial void OnApplicationNameChanged();

        /// <summary>
        /// On ApplicationName column data entity changing.
        /// </summary>
		partial void OnApplicationNameChanging();

        /// <summary>
        /// On Comments column data entity changed.
        /// </summary>
		partial void OnCommentsChanged();

        /// <summary>
        /// On Comments column data entity changing.
        /// </summary>
		partial void OnCommentsChanging();

        /// <summary>
        /// On CreationDate column data entity changed.
        /// </summary>
		partial void OnCreationDateChanged();

        /// <summary>
        /// On CreationDate column data entity changing.
        /// </summary>
		partial void OnCreationDateChanging();

        /// <summary>
        /// On Email column data entity changed.
        /// </summary>
		partial void OnEmailChanged();

        /// <summary>
        /// On Email column data entity changing.
        /// </summary>
		partial void OnEmailChanging();

        /// <summary>
        /// On FailedPasswordAnswerAttemptCount column data entity changed.
        /// </summary>
		partial void OnFailedPasswordAnswerAttemptCountChanged();

        /// <summary>
        /// On FailedPasswordAnswerAttemptCount column data entity changing.
        /// </summary>
		partial void OnFailedPasswordAnswerAttemptCountChanging();

        /// <summary>
        /// On FailedPasswordAnswerAttemptWindowStart column data entity changed.
        /// </summary>
		partial void OnFailedPasswordAnswerAttemptWindowStartChanged();

        /// <summary>
        /// On FailedPasswordAnswerAttemptWindowStart column data entity changing.
        /// </summary>
		partial void OnFailedPasswordAnswerAttemptWindowStartChanging();

        /// <summary>
        /// On FailedPasswordAttemptCount column data entity changed.
        /// </summary>
		partial void OnFailedPasswordAttemptCountChanged();

        /// <summary>
        /// On FailedPasswordAttemptCount column data entity changing.
        /// </summary>
		partial void OnFailedPasswordAttemptCountChanging();

        /// <summary>
        /// On FailedPasswordAttemptWindowStart column data entity changed.
        /// </summary>
		partial void OnFailedPasswordAttemptWindowStartChanged();

        /// <summary>
        /// On FailedPasswordAttemptWindowStart column data entity changing.
        /// </summary>
		partial void OnFailedPasswordAttemptWindowStartChanging();

        /// <summary>
        /// On IsApproved column data entity changed.
        /// </summary>
		partial void OnIsApprovedChanged();

        /// <summary>
        /// On IsApproved column data entity changing.
        /// </summary>
		partial void OnIsApprovedChanging();

        /// <summary>
        /// On LastActivityDate column data entity changed.
        /// </summary>
		partial void OnLastActivityDateChanged();

        /// <summary>
        /// On LastActivityDate column data entity changing.
        /// </summary>
		partial void OnLastActivityDateChanging();

        /// <summary>
        /// On LastLoginDate column data entity changed.
        /// </summary>
		partial void OnLastLoginDateChanged();

        /// <summary>
        /// On LastLoginDate column data entity changing.
        /// </summary>
		partial void OnLastLoginDateChanging();

        /// <summary>
        /// On LastPasswordChangedDate column data entity changed.
        /// </summary>
		partial void OnLastPasswordChangedDateChanged();

        /// <summary>
        /// On LastPasswordChangedDate column data entity changing.
        /// </summary>
		partial void OnLastPasswordChangedDateChanging();

        /// <summary>
        /// On LoggedIn column data entity changed.
        /// </summary>
		partial void OnLoggedInChanged();

        /// <summary>
        /// On LoggedIn column data entity changing.
        /// </summary>
		partial void OnLoggedInChanging();

        /// <summary>
        /// On Password column data entity changed.
        /// </summary>
		partial void OnPasswordChanged();

        /// <summary>
        /// On Password column data entity changing.
        /// </summary>
		partial void OnPasswordChanging();

        /// <summary>
        /// On PasswordAnswer column data entity changed.
        /// </summary>
		partial void OnPasswordAnswerChanged();

        /// <summary>
        /// On PasswordAnswer column data entity changing.
        /// </summary>
		partial void OnPasswordAnswerChanging();

        /// <summary>
        /// On PasswordQuestion column data entity changed.
        /// </summary>
		partial void OnPasswordQuestionChanged();

        /// <summary>
        /// On PasswordQuestion column data entity changing.
        /// </summary>
		partial void OnPasswordQuestionChanging();

        /// <summary>
        /// On ProfileID column data entity changed.
        /// </summary>
		partial void OnProfileIDChanged();

        /// <summary>
        /// On ProfileID column data entity changing.
        /// </summary>
		partial void OnProfileIDChanging();

        /// <summary>
        /// On RoleID column data entity changed.
        /// </summary>
		partial void OnRoleIDChanged();

        /// <summary>
        /// On RoleID column data entity changing.
        /// </summary>
		partial void OnRoleIDChanging();

        /// <summary>
        /// On UserID column data entity changed.
        /// </summary>
		partial void OnUserIDChanged();

        /// <summary>
        /// On UserID column data entity changing.
        /// </summary>
		partial void OnUserIDChanging();

        /// <summary>
        /// On Username column data entity changed.
        /// </summary>
		partial void OnUsernameChanged();

        /// <summary>
        /// On Username column data entity changing.
        /// </summary>
		partial void OnUsernameChanging();

        /// <summary>
        /// On UserSuspended column data entity changed.
        /// </summary>
		partial void OnUserSuspendedChanged();

        /// <summary>
        /// On UserSuspended column data entity changing.
        /// </summary>
		partial void OnUserSuspendedChanging();

        /// <summary>
        /// On UserSuspendedDate column data entity changed.
        /// </summary>
		partial void OnUserSuspendedDateChanged();

        /// <summary>
        /// On UserSuspendedDate column data entity changing.
        /// </summary>
		partial void OnUserSuspendedDateChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public User()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the applicationloginuserid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ApplicationLoginUserID")]
        [XmlElementAttribute(ElementName = "ApplicationLoginUserID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ApplicationLoginUserID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long ApplicationLoginUserID
        {
            get
            {
                return this._ApplicationLoginUserID;
            }
            set
            {
                if ((this._ApplicationLoginUserID != value))
                {
                    this.OnApplicationLoginUserIDChanging();
                    this.SendPropertyChanging("ApplicationLoginUserID");
                    this._ApplicationLoginUserID = value;
                    this.SendPropertyChanged("ApplicationLoginUserID");
                    this.OnApplicationLoginUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the applicationname property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ApplicationName")]
        [XmlElementAttribute(ElementName = "ApplicationName", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ApplicationName", DbType = "nvarchar", Length = 300, IsNullable = false)]
        public string ApplicationName
        {
            get
            {
                return this._ApplicationName;
            }
            set
            {
                if ((this._ApplicationName != value))
                {
                    this.OnApplicationNameChanging();
                    this.SendPropertyChanging("ApplicationName");
                    this._ApplicationName = value;
                    this.SendPropertyChanged("ApplicationName");
                    this.OnApplicationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the comments property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Comments")]
        [XmlElementAttribute(ElementName = "Comments", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("Comments", DbType = "nvarchar", Length = -1, IsNullable = true)]
        public string Comments
        {
            get
            {
                return this._Comments;
            }
            set
            {
                if ((this._Comments != value))
                {
                    this.OnCommentsChanging();
                    this.SendPropertyChanging("Comments");
                    this._Comments = value;
                    this.SendPropertyChanged("Comments");
                    this.OnCommentsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the creationdate property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "CreationDate")]
        [XmlElementAttribute(ElementName = "CreationDate", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("CreationDate", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime CreationDate
        {
            get
            {
                return this._CreationDate;
            }
            set
            {
                if ((this._CreationDate != value))
                {
                    this.OnCreationDateChanging();
                    this.SendPropertyChanging("CreationDate");
                    this._CreationDate = value;
                    this.SendPropertyChanged("CreationDate");
                    this.OnCreationDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the email property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Email")]
        [XmlElementAttribute(ElementName = "Email", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Email", DbType = "varchar", Length = 300, IsNullable = false)]
        public string Email
        {
            get
            {
                return this._Email;
            }
            set
            {
                if ((this._Email != value))
                {
                    this.OnEmailChanging();
                    this.SendPropertyChanging("Email");
                    this._Email = value;
                    this.SendPropertyChanged("Email");
                    this.OnEmailChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the failedpasswordanswerattemptcount property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "FailedPasswordAnswerAttemptCount")]
        [XmlElementAttribute(ElementName = "FailedPasswordAnswerAttemptCount", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("FailedPasswordAnswerAttemptCount", DbType = "int", Length = 4, IsNullable = false)]
        public int FailedPasswordAnswerAttemptCount
        {
            get
            {
                return this._FailedPasswordAnswerAttemptCount;
            }
            set
            {
                if ((this._FailedPasswordAnswerAttemptCount != value))
                {
                    this.OnFailedPasswordAnswerAttemptCountChanging();
                    this.SendPropertyChanging("FailedPasswordAnswerAttemptCount");
                    this._FailedPasswordAnswerAttemptCount = value;
                    this.SendPropertyChanged("FailedPasswordAnswerAttemptCount");
                    this.OnFailedPasswordAnswerAttemptCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the failedpasswordanswerattemptwindowstart property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "FailedPasswordAnswerAttemptWindowStart")]
        [XmlElementAttribute(ElementName = "FailedPasswordAnswerAttemptWindowStart", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("FailedPasswordAnswerAttemptWindowStart", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime FailedPasswordAnswerAttemptWindowStart
        {
            get
            {
                return this._FailedPasswordAnswerAttemptWindowStart;
            }
            set
            {
                if ((this._FailedPasswordAnswerAttemptWindowStart != value))
                {
                    this.OnFailedPasswordAnswerAttemptWindowStartChanging();
                    this.SendPropertyChanging("FailedPasswordAnswerAttemptWindowStart");
                    this._FailedPasswordAnswerAttemptWindowStart = value;
                    this.SendPropertyChanged("FailedPasswordAnswerAttemptWindowStart");
                    this.OnFailedPasswordAnswerAttemptWindowStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the failedpasswordattemptcount property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "FailedPasswordAttemptCount")]
        [XmlElementAttribute(ElementName = "FailedPasswordAttemptCount", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("FailedPasswordAttemptCount", DbType = "int", Length = 4, IsNullable = false)]
        public int FailedPasswordAttemptCount
        {
            get
            {
                return this._FailedPasswordAttemptCount;
            }
            set
            {
                if ((this._FailedPasswordAttemptCount != value))
                {
                    this.OnFailedPasswordAttemptCountChanging();
                    this.SendPropertyChanging("FailedPasswordAttemptCount");
                    this._FailedPasswordAttemptCount = value;
                    this.SendPropertyChanged("FailedPasswordAttemptCount");
                    this.OnFailedPasswordAttemptCountChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the failedpasswordattemptwindowstart property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "FailedPasswordAttemptWindowStart")]
        [XmlElementAttribute(ElementName = "FailedPasswordAttemptWindowStart", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("FailedPasswordAttemptWindowStart", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime FailedPasswordAttemptWindowStart
        {
            get
            {
                return this._FailedPasswordAttemptWindowStart;
            }
            set
            {
                if ((this._FailedPasswordAttemptWindowStart != value))
                {
                    this.OnFailedPasswordAttemptWindowStartChanging();
                    this.SendPropertyChanging("FailedPasswordAttemptWindowStart");
                    this._FailedPasswordAttemptWindowStart = value;
                    this.SendPropertyChanged("FailedPasswordAttemptWindowStart");
                    this.OnFailedPasswordAttemptWindowStartChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the isapproved property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "IsApproved")]
        [XmlElementAttribute(ElementName = "IsApproved", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("IsApproved", DbType = "bit", Length = 1, IsNullable = false)]
        public bool IsApproved
        {
            get
            {
                return this._IsApproved;
            }
            set
            {
                if ((this._IsApproved != value))
                {
                    this.OnIsApprovedChanging();
                    this.SendPropertyChanging("IsApproved");
                    this._IsApproved = value;
                    this.SendPropertyChanged("IsApproved");
                    this.OnIsApprovedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the lastactivitydate property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "LastActivityDate")]
        [XmlElementAttribute(ElementName = "LastActivityDate", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("LastActivityDate", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime LastActivityDate
        {
            get
            {
                return this._LastActivityDate;
            }
            set
            {
                if ((this._LastActivityDate != value))
                {
                    this.OnLastActivityDateChanging();
                    this.SendPropertyChanging("LastActivityDate");
                    this._LastActivityDate = value;
                    this.SendPropertyChanged("LastActivityDate");
                    this.OnLastActivityDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the lastlogindate property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "LastLoginDate")]
        [XmlElementAttribute(ElementName = "LastLoginDate", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("LastLoginDate", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime LastLoginDate
        {
            get
            {
                return this._LastLoginDate;
            }
            set
            {
                if ((this._LastLoginDate != value))
                {
                    this.OnLastLoginDateChanging();
                    this.SendPropertyChanging("LastLoginDate");
                    this._LastLoginDate = value;
                    this.SendPropertyChanged("LastLoginDate");
                    this.OnLastLoginDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the lastpasswordchangeddate property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "LastPasswordChangedDate")]
        [XmlElementAttribute(ElementName = "LastPasswordChangedDate", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("LastPasswordChangedDate", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime LastPasswordChangedDate
        {
            get
            {
                return this._LastPasswordChangedDate;
            }
            set
            {
                if ((this._LastPasswordChangedDate != value))
                {
                    this.OnLastPasswordChangedDateChanging();
                    this.SendPropertyChanging("LastPasswordChangedDate");
                    this._LastPasswordChangedDate = value;
                    this.SendPropertyChanged("LastPasswordChangedDate");
                    this.OnLastPasswordChangedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the loggedin property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "LoggedIn")]
        [XmlElementAttribute(ElementName = "LoggedIn", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("LoggedIn", DbType = "bit", Length = 1, IsNullable = false)]
        public bool LoggedIn
        {
            get
            {
                return this._LoggedIn;
            }
            set
            {
                if ((this._LoggedIn != value))
                {
                    this.OnLoggedInChanging();
                    this.SendPropertyChanging("LoggedIn");
                    this._LoggedIn = value;
                    this.SendPropertyChanged("LoggedIn");
                    this.OnLoggedInChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the password property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Password")]
        [XmlElementAttribute(ElementName = "Password", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Password", DbType = "varchar", Length = 500, IsNullable = false)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if ((this._Password != value))
                {
                    this.OnPasswordChanging();
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the passwordanswer property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "PasswordAnswer")]
        [XmlElementAttribute(ElementName = "PasswordAnswer", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("PasswordAnswer", DbType = "nvarchar", Length = 500, IsNullable = true)]
        public string PasswordAnswer
        {
            get
            {
                return this._PasswordAnswer;
            }
            set
            {
                if ((this._PasswordAnswer != value))
                {
                    this.OnPasswordAnswerChanging();
                    this.SendPropertyChanging("PasswordAnswer");
                    this._PasswordAnswer = value;
                    this.SendPropertyChanged("PasswordAnswer");
                    this.OnPasswordAnswerChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the passwordquestion property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "PasswordQuestion")]
        [XmlElementAttribute(ElementName = "PasswordQuestion", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("PasswordQuestion", DbType = "nvarchar", Length = 500, IsNullable = true)]
        public string PasswordQuestion
        {
            get
            {
                return this._PasswordQuestion;
            }
            set
            {
                if ((this._PasswordQuestion != value))
                {
                    this.OnPasswordQuestionChanging();
                    this.SendPropertyChanging("PasswordQuestion");
                    this._PasswordQuestion = value;
                    this.SendPropertyChanged("PasswordQuestion");
                    this.OnPasswordQuestionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the profileid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ProfileID")]
        [XmlElementAttribute(ElementName = "ProfileID", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("ProfileID", DbType = "bigint", Length = 8, IsNullable = true)]
        public System.Nullable<System.Int64> ProfileID
        {
            get
            {
                return this._ProfileID;
            }
            set
            {
                if ((this._ProfileID != value))
                {
                    this.OnProfileIDChanging();
                    this.SendPropertyChanging("ProfileID");
                    this._ProfileID = value;
                    this.SendPropertyChanged("ProfileID");
                    this.OnProfileIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the roleid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "RoleID")]
        [XmlElementAttribute(ElementName = "RoleID", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("RoleID", DbType = "bigint", Length = 8, IsNullable = true)]
        public System.Nullable<System.Int64> RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if ((this._RoleID != value))
                {
                    this.OnRoleIDChanging();
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the userid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserID")]
        [XmlElementAttribute(ElementName = "UserID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("UserID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging();
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the username property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Username")]
        [XmlElementAttribute(ElementName = "Username", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Username", DbType = "varchar", Length = 100, IsNullable = false)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if ((this._Username != value))
                {
                    this.OnUsernameChanging();
                    this.SendPropertyChanging("Username");
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the usersuspended property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserSuspended")]
        [XmlElementAttribute(ElementName = "UserSuspended", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("UserSuspended", DbType = "bit", Length = 1, IsNullable = false)]
        public bool UserSuspended
        {
            get
            {
                return this._UserSuspended;
            }
            set
            {
                if ((this._UserSuspended != value))
                {
                    this.OnUserSuspendedChanging();
                    this.SendPropertyChanging("UserSuspended");
                    this._UserSuspended = value;
                    this.SendPropertyChanged("UserSuspended");
                    this.OnUserSuspendedChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the usersuspendeddate property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserSuspendedDate")]
        [XmlElementAttribute(ElementName = "UserSuspendedDate", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("UserSuspendedDate", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime UserSuspendedDate
        {
            get
            {
                return this._UserSuspendedDate;
            }
            set
            {
                if ((this._UserSuspendedDate != value))
                {
                    this.OnUserSuspendedDateChanging();
                    this.SendPropertyChanging("UserSuspendedDate");
                    this._UserSuspendedDate = value;
                    this.SendPropertyChanged("UserSuspendedDate");
                    this.OnUserSuspendedDateChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the roleid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "Role", IsRequired = false)]
        [XmlElementAttribute(ElementName = "Role", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Role", ReferenceColumnName = "RoleID", ColumnName = "RoleID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.Role Role
        {
            get
            {
                return this._Role;
            }
            set
            {
                if ((this._Role != value))
                {
                    this._Role = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the profileid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "Profile", IsRequired = false)]
        [XmlElementAttribute(ElementName = "Profile", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Profile", ReferenceColumnName = "ProfileID", ColumnName = "ProfileID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.Profile Profile
        {
            get
            {
                return this._Profile;
            }
            set
            {
                if ((this._Profile != value))
                {
                    this._Profile = value;
                }
            }
        }
        #endregion
        
        #region Public Reference Properties
        /// <summary>
        /// Gets sets, the contact reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ContactCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "ContactCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Contact", ColumnName = "UserID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.Contact[] ContactCollection
        {
            get
            {
                return this._ContactCollection;
            }
            set
            {
                if ((this._ContactCollection != value))
                {
                    this._ContactCollection = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the oauthconsumer reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OAuthConsumerCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "OAuthConsumerCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.OAuthConsumer", ColumnName = "UserID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.OAuthConsumer[] OAuthConsumerCollection
        {
            get
            {
                return this._OAuthConsumerCollection;
            }
            set
            {
                if ((this._OAuthConsumerCollection != value))
                {
                    this._OAuthConsumerCollection = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientauthorization reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientAuthorizationCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "ClientAuthorizationCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.ClientAuthorization", ColumnName = "UserID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.ClientAuthorization[] ClientAuthorizationCollection
        {
            get
            {
                return this._ClientAuthorizationCollection;
            }
            set
            {
                if ((this._ClientAuthorizationCollection != value))
                {
                    this._ClientAuthorizationCollection = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new user data entity.
        /// </summary>
        /// <param name="applicationLoginUserID">Initial value of ApplicationLoginUserID.</param>
        /// <param name="applicationName">Initial value of ApplicationName.</param>
        /// <param name="creationDate">Initial value of CreationDate.</param>
        /// <param name="email">Initial value of Email.</param>
        /// <param name="failedPasswordAnswerAttemptCount">Initial value of FailedPasswordAnswerAttemptCount.</param>
        /// <param name="failedPasswordAnswerAttemptWindowStart">Initial value of FailedPasswordAnswerAttemptWindowStart.</param>
        /// <param name="failedPasswordAttemptCount">Initial value of FailedPasswordAttemptCount.</param>
        /// <param name="failedPasswordAttemptWindowStart">Initial value of FailedPasswordAttemptWindowStart.</param>
        /// <param name="isApproved">Initial value of IsApproved.</param>
        /// <param name="lastActivityDate">Initial value of LastActivityDate.</param>
        /// <param name="lastLoginDate">Initial value of LastLoginDate.</param>
        /// <param name="lastPasswordChangedDate">Initial value of LastPasswordChangedDate.</param>
        /// <param name="loggedIn">Initial value of LoggedIn.</param>
        /// <param name="password">Initial value of Password.</param>
        /// <param name="userID">Initial value of UserID.</param>
        /// <param name="username">Initial value of Username.</param>
        /// <param name="userSuspended">Initial value of UserSuspended.</param>
        /// <param name="userSuspendedDate">Initial value of UserSuspendedDate.</param>
        /// <returns>The Data.User entity.</returns>
        public static Data.User CreateUser(
                    long applicationLoginUserID, 
                    string applicationName, 
                    System.DateTime creationDate, 
                    string email, 
                    int failedPasswordAnswerAttemptCount, 
                    System.DateTime failedPasswordAnswerAttemptWindowStart, 
                    int failedPasswordAttemptCount, 
                    System.DateTime failedPasswordAttemptWindowStart, 
                    bool isApproved, 
                    System.DateTime lastActivityDate, 
                    System.DateTime lastLoginDate, 
                    System.DateTime lastPasswordChangedDate, 
                    bool loggedIn, 
                    string password, 
                    long userID, 
                    string username, 
                    bool userSuspended, 
                    System.DateTime userSuspendedDate)
        {
            Data.User user = new Data.User();
            user.ApplicationLoginUserID = applicationLoginUserID;
            user.ApplicationName = applicationName;
            user.CreationDate = creationDate;
            user.Email = email;
            user.FailedPasswordAnswerAttemptCount = failedPasswordAnswerAttemptCount;
            user.FailedPasswordAnswerAttemptWindowStart = failedPasswordAnswerAttemptWindowStart;
            user.FailedPasswordAttemptCount = failedPasswordAttemptCount;
            user.FailedPasswordAttemptWindowStart = failedPasswordAttemptWindowStart;
            user.IsApproved = isApproved;
            user.LastActivityDate = lastActivityDate;
            user.LastLoginDate = lastLoginDate;
            user.LastPasswordChangedDate = lastPasswordChangedDate;
            user.LoggedIn = loggedIn;
            user.Password = password;
            user.UserID = userID;
            user.Username = username;
            user.UserSuspended = userSuspended;
            user.UserSuspendedDate = userSuspendedDate;
            return user;
        }
    }
    #endregion
    
    #region Role Data Entity Type
    /// <summary>
    /// The role data object class.
    /// </summary>
    [DataContractAttribute(Name = "Role", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.Role")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class Role : DataBase
    {
        
        private string _ApplicationName;
        
        private string _RoleDescription;
        
        private long _RoleID;
        
        private string _RoleName;
        
        private Data.User[] _UserCollection;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ApplicationName column data entity changed.
        /// </summary>
		partial void OnApplicationNameChanged();

        /// <summary>
        /// On ApplicationName column data entity changing.
        /// </summary>
		partial void OnApplicationNameChanging();

        /// <summary>
        /// On RoleDescription column data entity changed.
        /// </summary>
		partial void OnRoleDescriptionChanged();

        /// <summary>
        /// On RoleDescription column data entity changing.
        /// </summary>
		partial void OnRoleDescriptionChanging();

        /// <summary>
        /// On RoleID column data entity changed.
        /// </summary>
		partial void OnRoleIDChanged();

        /// <summary>
        /// On RoleID column data entity changing.
        /// </summary>
		partial void OnRoleIDChanging();

        /// <summary>
        /// On RoleName column data entity changed.
        /// </summary>
		partial void OnRoleNameChanged();

        /// <summary>
        /// On RoleName column data entity changing.
        /// </summary>
		partial void OnRoleNameChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Role()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the applicationname property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ApplicationName")]
        [XmlElementAttribute(ElementName = "ApplicationName", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ApplicationName", DbType = "nvarchar", Length = 300, IsNullable = false)]
        public string ApplicationName
        {
            get
            {
                return this._ApplicationName;
            }
            set
            {
                if ((this._ApplicationName != value))
                {
                    this.OnApplicationNameChanging();
                    this.SendPropertyChanging("ApplicationName");
                    this._ApplicationName = value;
                    this.SendPropertyChanged("ApplicationName");
                    this.OnApplicationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the roledescription property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "RoleDescription")]
        [XmlElementAttribute(ElementName = "RoleDescription", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("RoleDescription", DbType = "nvarchar", Length = 500, IsNullable = true)]
        public string RoleDescription
        {
            get
            {
                return this._RoleDescription;
            }
            set
            {
                if ((this._RoleDescription != value))
                {
                    this.OnRoleDescriptionChanging();
                    this.SendPropertyChanging("RoleDescription");
                    this._RoleDescription = value;
                    this.SendPropertyChanged("RoleDescription");
                    this.OnRoleDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the roleid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "RoleID")]
        [XmlElementAttribute(ElementName = "RoleID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("RoleID", IsPrimaryKey = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long RoleID
        {
            get
            {
                return this._RoleID;
            }
            set
            {
                if ((this._RoleID != value))
                {
                    this.OnRoleIDChanging();
                    this.SendPropertyChanging("RoleID");
                    this._RoleID = value;
                    this.SendPropertyChanged("RoleID");
                    this.OnRoleIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the rolename property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "RoleName")]
        [XmlElementAttribute(ElementName = "RoleName", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("RoleName", DbType = "nvarchar", Length = 50, IsNullable = false)]
        public string RoleName
        {
            get
            {
                return this._RoleName;
            }
            set
            {
                if ((this._RoleName != value))
                {
                    this.OnRoleNameChanging();
                    this.SendPropertyChanging("RoleName");
                    this._RoleName = value;
                    this.SendPropertyChanged("RoleName");
                    this.OnRoleNameChanged();
                }
            }
        }
        #endregion
        
        #region Public Reference Properties
        /// <summary>
        /// Gets sets, the user reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "UserCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.User", ColumnName = "RoleID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.User[] UserCollection
        {
            get
            {
                return this._UserCollection;
            }
            set
            {
                if ((this._UserCollection != value))
                {
                    this._UserCollection = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new role data entity.
        /// </summary>
        /// <param name="applicationName">Initial value of ApplicationName.</param>
        /// <param name="roleID">Initial value of RoleID.</param>
        /// <param name="roleName">Initial value of RoleName.</param>
        /// <returns>The Data.Role entity.</returns>
        public static Data.Role CreateRole(string applicationName, long roleID, string roleName)
        {
            Data.Role role = new Data.Role();
            role.ApplicationName = applicationName;
            role.RoleID = roleID;
            role.RoleName = roleName;
            return role;
        }
    }
    #endregion
    
    #region OAuthConsumer Data Entity Type
    /// <summary>
    /// The oauthconsumer data object class.
    /// </summary>
    [DataContractAttribute(Name = "OAuthConsumer", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.OAuthConsumer")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class OAuthConsumer : DataBase
    {
        
        private long _ClientID;
        
        private long _OAuthConsumerID;
        
        private System.Nullable<System.Int64> _UserID;
        
        private string _VerificationCode;
        
        private System.Nullable<System.Int64> _VerificationCodeFormat;
        
        private System.Nullable<System.Int64> _VerificationCodeLength;
        
        private Data.User _User;
        
        private Data.Client _Client;
        
        private Data.Nonce[] _NonceCollection;
        
        private Data.OAuthToken[] _OAuthTokenCollection;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ClientID column data entity changed.
        /// </summary>
		partial void OnClientIDChanged();

        /// <summary>
        /// On ClientID column data entity changing.
        /// </summary>
		partial void OnClientIDChanging();

        /// <summary>
        /// On OAuthConsumerID column data entity changed.
        /// </summary>
		partial void OnOAuthConsumerIDChanged();

        /// <summary>
        /// On OAuthConsumerID column data entity changing.
        /// </summary>
		partial void OnOAuthConsumerIDChanging();

        /// <summary>
        /// On UserID column data entity changed.
        /// </summary>
		partial void OnUserIDChanged();

        /// <summary>
        /// On UserID column data entity changing.
        /// </summary>
		partial void OnUserIDChanging();

        /// <summary>
        /// On VerificationCode column data entity changed.
        /// </summary>
		partial void OnVerificationCodeChanged();

        /// <summary>
        /// On VerificationCode column data entity changing.
        /// </summary>
		partial void OnVerificationCodeChanging();

        /// <summary>
        /// On VerificationCodeFormat column data entity changed.
        /// </summary>
		partial void OnVerificationCodeFormatChanged();

        /// <summary>
        /// On VerificationCodeFormat column data entity changing.
        /// </summary>
		partial void OnVerificationCodeFormatChanging();

        /// <summary>
        /// On VerificationCodeLength column data entity changed.
        /// </summary>
		partial void OnVerificationCodeLengthChanged();

        /// <summary>
        /// On VerificationCodeLength column data entity changing.
        /// </summary>
		partial void OnVerificationCodeLengthChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public OAuthConsumer()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the clientid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientID")]
        [XmlElementAttribute(ElementName = "ClientID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ClientID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this.OnClientIDChanging();
                    this.SendPropertyChanging("ClientID");
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the oauthconsumerid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OAuthConsumerID")]
        [XmlElementAttribute(ElementName = "OAuthConsumerID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("OAuthConsumerID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long OAuthConsumerID
        {
            get
            {
                return this._OAuthConsumerID;
            }
            set
            {
                if ((this._OAuthConsumerID != value))
                {
                    this.OnOAuthConsumerIDChanging();
                    this.SendPropertyChanging("OAuthConsumerID");
                    this._OAuthConsumerID = value;
                    this.SendPropertyChanged("OAuthConsumerID");
                    this.OnOAuthConsumerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the userid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserID")]
        [XmlElementAttribute(ElementName = "UserID", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("UserID", DbType = "bigint", Length = 8, IsNullable = true)]
        public System.Nullable<System.Int64> UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging();
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the verificationcode property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "VerificationCode")]
        [XmlElementAttribute(ElementName = "VerificationCode", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("VerificationCode", DbType = "nvarchar", Length = 500, IsNullable = true)]
        public string VerificationCode
        {
            get
            {
                return this._VerificationCode;
            }
            set
            {
                if ((this._VerificationCode != value))
                {
                    this.OnVerificationCodeChanging();
                    this.SendPropertyChanging("VerificationCode");
                    this._VerificationCode = value;
                    this.SendPropertyChanged("VerificationCode");
                    this.OnVerificationCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the verificationcodeformat property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "VerificationCodeFormat")]
        [XmlElementAttribute(ElementName = "VerificationCodeFormat", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("VerificationCodeFormat", DbType = "bigint", Length = 8, IsNullable = true)]
        public System.Nullable<System.Int64> VerificationCodeFormat
        {
            get
            {
                return this._VerificationCodeFormat;
            }
            set
            {
                if ((this._VerificationCodeFormat != value))
                {
                    this.OnVerificationCodeFormatChanging();
                    this.SendPropertyChanging("VerificationCodeFormat");
                    this._VerificationCodeFormat = value;
                    this.SendPropertyChanged("VerificationCodeFormat");
                    this.OnVerificationCodeFormatChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the verificationcodelength property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "VerificationCodeLength")]
        [XmlElementAttribute(ElementName = "VerificationCodeLength", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("VerificationCodeLength", DbType = "bigint", Length = 8, IsNullable = true)]
        public System.Nullable<System.Int64> VerificationCodeLength
        {
            get
            {
                return this._VerificationCodeLength;
            }
            set
            {
                if ((this._VerificationCodeLength != value))
                {
                    this.OnVerificationCodeLengthChanging();
                    this.SendPropertyChanging("VerificationCodeLength");
                    this._VerificationCodeLength = value;
                    this.SendPropertyChanged("VerificationCodeLength");
                    this.OnVerificationCodeLengthChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the userid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "User", IsRequired = false)]
        [XmlElementAttribute(ElementName = "User", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.User", ReferenceColumnName = "UserID", ColumnName = "UserID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.User User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "Client", IsRequired = false)]
        [XmlElementAttribute(ElementName = "Client", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Client", ReferenceColumnName = "ClientID", ColumnName = "ClientID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.Client Client
        {
            get
            {
                return this._Client;
            }
            set
            {
                if ((this._Client != value))
                {
                    this._Client = value;
                }
            }
        }
        #endregion
        
        #region Public Reference Properties
        /// <summary>
        /// Gets sets, the nonce reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "NonceCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "NonceCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Nonce", ColumnName = "OAuthConsumerID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.Nonce[] NonceCollection
        {
            get
            {
                return this._NonceCollection;
            }
            set
            {
                if ((this._NonceCollection != value))
                {
                    this._NonceCollection = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the oauthtoken reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OAuthTokenCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "OAuthTokenCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.OAuthToken", ColumnName = "OAuthConsumerID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.OAuthToken[] OAuthTokenCollection
        {
            get
            {
                return this._OAuthTokenCollection;
            }
            set
            {
                if ((this._OAuthTokenCollection != value))
                {
                    this._OAuthTokenCollection = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new oauthconsumer data entity.
        /// </summary>
        /// <param name="clientID">Initial value of ClientID.</param>
        /// <param name="oAuthConsumerID">Initial value of OAuthConsumerID.</param>
        /// <returns>The Data.OAuthConsumer entity.</returns>
        public static Data.OAuthConsumer CreateOAuthConsumer(long clientID, long oAuthConsumerID)
        {
            Data.OAuthConsumer oAuthConsumer = new Data.OAuthConsumer();
            oAuthConsumer.ClientID = clientID;
            oAuthConsumer.OAuthConsumerID = oAuthConsumerID;
            return oAuthConsumer;
        }
    }
    #endregion
    
    #region ClientAuthorization Data Entity Type
    /// <summary>
    /// The clientauthorization data object class.
    /// </summary>
    [DataContractAttribute(Name = "ClientAuthorization", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.ClientAuthorization")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class ClientAuthorization : DataBase
    {
        
        private long _ClientAuthorizationID;
        
        private long _ClientID;
        
        private string _CodeKey;
        
        private System.DateTime _CreatedOnUtc;
        
        private System.Nullable<System.DateTime> _ExpirationDateUtc;
        
        private string _NonceCode;
        
        private string _Scope;
        
        private System.Nullable<System.Int64> _UserID;
        
        private Data.User _User;
        
        private Data.Client _Client;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ClientAuthorizationID column data entity changed.
        /// </summary>
		partial void OnClientAuthorizationIDChanged();

        /// <summary>
        /// On ClientAuthorizationID column data entity changing.
        /// </summary>
		partial void OnClientAuthorizationIDChanging();

        /// <summary>
        /// On ClientID column data entity changed.
        /// </summary>
		partial void OnClientIDChanged();

        /// <summary>
        /// On ClientID column data entity changing.
        /// </summary>
		partial void OnClientIDChanging();

        /// <summary>
        /// On CodeKey column data entity changed.
        /// </summary>
		partial void OnCodeKeyChanged();

        /// <summary>
        /// On CodeKey column data entity changing.
        /// </summary>
		partial void OnCodeKeyChanging();

        /// <summary>
        /// On CreatedOnUtc column data entity changed.
        /// </summary>
		partial void OnCreatedOnUtcChanged();

        /// <summary>
        /// On CreatedOnUtc column data entity changing.
        /// </summary>
		partial void OnCreatedOnUtcChanging();

        /// <summary>
        /// On ExpirationDateUtc column data entity changed.
        /// </summary>
		partial void OnExpirationDateUtcChanged();

        /// <summary>
        /// On ExpirationDateUtc column data entity changing.
        /// </summary>
		partial void OnExpirationDateUtcChanging();

        /// <summary>
        /// On NonceCode column data entity changed.
        /// </summary>
		partial void OnNonceCodeChanged();

        /// <summary>
        /// On NonceCode column data entity changing.
        /// </summary>
		partial void OnNonceCodeChanging();

        /// <summary>
        /// On Scope column data entity changed.
        /// </summary>
		partial void OnScopeChanged();

        /// <summary>
        /// On Scope column data entity changing.
        /// </summary>
		partial void OnScopeChanging();

        /// <summary>
        /// On UserID column data entity changed.
        /// </summary>
		partial void OnUserIDChanged();

        /// <summary>
        /// On UserID column data entity changing.
        /// </summary>
		partial void OnUserIDChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ClientAuthorization()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the clientauthorizationid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientAuthorizationID")]
        [XmlElementAttribute(ElementName = "ClientAuthorizationID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ClientAuthorizationID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long ClientAuthorizationID
        {
            get
            {
                return this._ClientAuthorizationID;
            }
            set
            {
                if ((this._ClientAuthorizationID != value))
                {
                    this.OnClientAuthorizationIDChanging();
                    this.SendPropertyChanging("ClientAuthorizationID");
                    this._ClientAuthorizationID = value;
                    this.SendPropertyChanged("ClientAuthorizationID");
                    this.OnClientAuthorizationIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientID")]
        [XmlElementAttribute(ElementName = "ClientID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ClientID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this.OnClientIDChanging();
                    this.SendPropertyChanging("ClientID");
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the codekey property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "CodeKey")]
        [XmlElementAttribute(ElementName = "CodeKey", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("CodeKey", DbType = "nvarchar", Length = -1, IsNullable = true)]
        public string CodeKey
        {
            get
            {
                return this._CodeKey;
            }
            set
            {
                if ((this._CodeKey != value))
                {
                    this.OnCodeKeyChanging();
                    this.SendPropertyChanging("CodeKey");
                    this._CodeKey = value;
                    this.SendPropertyChanged("CodeKey");
                    this.OnCodeKeyChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the createdonutc property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "CreatedOnUtc")]
        [XmlElementAttribute(ElementName = "CreatedOnUtc", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("CreatedOnUtc", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime CreatedOnUtc
        {
            get
            {
                return this._CreatedOnUtc;
            }
            set
            {
                if ((this._CreatedOnUtc != value))
                {
                    this.OnCreatedOnUtcChanging();
                    this.SendPropertyChanging("CreatedOnUtc");
                    this._CreatedOnUtc = value;
                    this.SendPropertyChanged("CreatedOnUtc");
                    this.OnCreatedOnUtcChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the expirationdateutc property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ExpirationDateUtc")]
        [XmlElementAttribute(ElementName = "ExpirationDateUtc", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("ExpirationDateUtc", DbType = "datetime", Length = 8, IsNullable = true)]
        public System.Nullable<System.DateTime> ExpirationDateUtc
        {
            get
            {
                return this._ExpirationDateUtc;
            }
            set
            {
                if ((this._ExpirationDateUtc != value))
                {
                    this.OnExpirationDateUtcChanging();
                    this.SendPropertyChanging("ExpirationDateUtc");
                    this._ExpirationDateUtc = value;
                    this.SendPropertyChanged("ExpirationDateUtc");
                    this.OnExpirationDateUtcChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the noncecode property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "NonceCode")]
        [XmlElementAttribute(ElementName = "NonceCode", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("NonceCode", DbType = "nvarchar", Length = 200, IsNullable = false)]
        public string NonceCode
        {
            get
            {
                return this._NonceCode;
            }
            set
            {
                if ((this._NonceCode != value))
                {
                    this.OnNonceCodeChanging();
                    this.SendPropertyChanging("NonceCode");
                    this._NonceCode = value;
                    this.SendPropertyChanged("NonceCode");
                    this.OnNonceCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the scope property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Scope")]
        [XmlElementAttribute(ElementName = "Scope", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("Scope", DbType = "nvarchar", Length = -1, IsNullable = true)]
        public string Scope
        {
            get
            {
                return this._Scope;
            }
            set
            {
                if ((this._Scope != value))
                {
                    this.OnScopeChanging();
                    this.SendPropertyChanging("Scope");
                    this._Scope = value;
                    this.SendPropertyChanged("Scope");
                    this.OnScopeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the userid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserID")]
        [XmlElementAttribute(ElementName = "UserID", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("UserID", DbType = "bigint", Length = 8, IsNullable = true)]
        public System.Nullable<System.Int64> UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging();
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the userid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "User", IsRequired = false)]
        [XmlElementAttribute(ElementName = "User", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.User", ReferenceColumnName = "UserID", ColumnName = "UserID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.User User
        {
            get
            {
                return this._User;
            }
            set
            {
                if ((this._User != value))
                {
                    this._User = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "Client", IsRequired = false)]
        [XmlElementAttribute(ElementName = "Client", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Client", ReferenceColumnName = "ClientID", ColumnName = "ClientID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.Client Client
        {
            get
            {
                return this._Client;
            }
            set
            {
                if ((this._Client != value))
                {
                    this._Client = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new clientauthorization data entity.
        /// </summary>
        /// <param name="clientAuthorizationID">Initial value of ClientAuthorizationID.</param>
        /// <param name="clientID">Initial value of ClientID.</param>
        /// <param name="createdOnUtc">Initial value of CreatedOnUtc.</param>
        /// <param name="nonceCode">Initial value of NonceCode.</param>
        /// <returns>The Data.ClientAuthorization entity.</returns>
        public static Data.ClientAuthorization CreateClientAuthorization(long clientAuthorizationID, long clientID, System.DateTime createdOnUtc, string nonceCode)
        {
            Data.ClientAuthorization clientAuthorization = new Data.ClientAuthorization();
            clientAuthorization.ClientAuthorizationID = clientAuthorizationID;
            clientAuthorization.ClientID = clientID;
            clientAuthorization.CreatedOnUtc = createdOnUtc;
            clientAuthorization.NonceCode = nonceCode;
            return clientAuthorization;
        }
    }
    #endregion
    
    #region OAuthToken Data Entity Type
    /// <summary>
    /// The oauthtoken data object class.
    /// </summary>
    [DataContractAttribute(Name = "OAuthToken", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.OAuthToken")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class OAuthToken : DataBase
    {
        
        private string _ConsumerVersion;
        
        private string _Context;
        
        private System.DateTime _ExpiryDateUtc;
        
        private System.DateTime _IssueDateUtc;
        
        private long _OAuthConsumerID;
        
        private long _OAuthTokenID;
        
        private string _Scope;
        
        private int _State;
        
        private string _Token;
        
        private string _TokenCallback;
        
        private string _TokenSecret;
        
        private string _TokenType;
        
        private string _TokenVerifier;
        
        private Data.OAuthConsumer _OAuthConsumer;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ConsumerVersion column data entity changed.
        /// </summary>
		partial void OnConsumerVersionChanged();

        /// <summary>
        /// On ConsumerVersion column data entity changing.
        /// </summary>
		partial void OnConsumerVersionChanging();

        /// <summary>
        /// On Context column data entity changed.
        /// </summary>
		partial void OnContextChanged();

        /// <summary>
        /// On Context column data entity changing.
        /// </summary>
		partial void OnContextChanging();

        /// <summary>
        /// On ExpiryDateUtc column data entity changed.
        /// </summary>
		partial void OnExpiryDateUtcChanged();

        /// <summary>
        /// On ExpiryDateUtc column data entity changing.
        /// </summary>
		partial void OnExpiryDateUtcChanging();

        /// <summary>
        /// On IssueDateUtc column data entity changed.
        /// </summary>
		partial void OnIssueDateUtcChanged();

        /// <summary>
        /// On IssueDateUtc column data entity changing.
        /// </summary>
		partial void OnIssueDateUtcChanging();

        /// <summary>
        /// On OAuthConsumerID column data entity changed.
        /// </summary>
		partial void OnOAuthConsumerIDChanged();

        /// <summary>
        /// On OAuthConsumerID column data entity changing.
        /// </summary>
		partial void OnOAuthConsumerIDChanging();

        /// <summary>
        /// On OAuthTokenID column data entity changed.
        /// </summary>
		partial void OnOAuthTokenIDChanged();

        /// <summary>
        /// On OAuthTokenID column data entity changing.
        /// </summary>
		partial void OnOAuthTokenIDChanging();

        /// <summary>
        /// On Scope column data entity changed.
        /// </summary>
		partial void OnScopeChanged();

        /// <summary>
        /// On Scope column data entity changing.
        /// </summary>
		partial void OnScopeChanging();

        /// <summary>
        /// On State column data entity changed.
        /// </summary>
		partial void OnStateChanged();

        /// <summary>
        /// On State column data entity changing.
        /// </summary>
		partial void OnStateChanging();

        /// <summary>
        /// On Token column data entity changed.
        /// </summary>
		partial void OnTokenChanged();

        /// <summary>
        /// On Token column data entity changing.
        /// </summary>
		partial void OnTokenChanging();

        /// <summary>
        /// On TokenCallback column data entity changed.
        /// </summary>
		partial void OnTokenCallbackChanged();

        /// <summary>
        /// On TokenCallback column data entity changing.
        /// </summary>
		partial void OnTokenCallbackChanging();

        /// <summary>
        /// On TokenSecret column data entity changed.
        /// </summary>
		partial void OnTokenSecretChanged();

        /// <summary>
        /// On TokenSecret column data entity changing.
        /// </summary>
		partial void OnTokenSecretChanging();

        /// <summary>
        /// On TokenType column data entity changed.
        /// </summary>
		partial void OnTokenTypeChanged();

        /// <summary>
        /// On TokenType column data entity changing.
        /// </summary>
		partial void OnTokenTypeChanging();

        /// <summary>
        /// On TokenVerifier column data entity changed.
        /// </summary>
		partial void OnTokenVerifierChanged();

        /// <summary>
        /// On TokenVerifier column data entity changing.
        /// </summary>
		partial void OnTokenVerifierChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public OAuthToken()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the consumerversion property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ConsumerVersion")]
        [XmlElementAttribute(ElementName = "ConsumerVersion", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("ConsumerVersion", DbType = "nvarchar", Length = 4000, IsNullable = true)]
        public string ConsumerVersion
        {
            get
            {
                return this._ConsumerVersion;
            }
            set
            {
                if ((this._ConsumerVersion != value))
                {
                    this.OnConsumerVersionChanging();
                    this.SendPropertyChanging("ConsumerVersion");
                    this._ConsumerVersion = value;
                    this.SendPropertyChanged("ConsumerVersion");
                    this.OnConsumerVersionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the context property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Context")]
        [XmlElementAttribute(ElementName = "Context", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Context", DbType = "nvarchar", Length = 200, IsNullable = false)]
        public string Context
        {
            get
            {
                return this._Context;
            }
            set
            {
                if ((this._Context != value))
                {
                    this.OnContextChanging();
                    this.SendPropertyChanging("Context");
                    this._Context = value;
                    this.SendPropertyChanged("Context");
                    this.OnContextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the expirydateutc property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ExpiryDateUtc")]
        [XmlElementAttribute(ElementName = "ExpiryDateUtc", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ExpiryDateUtc", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime ExpiryDateUtc
        {
            get
            {
                return this._ExpiryDateUtc;
            }
            set
            {
                if ((this._ExpiryDateUtc != value))
                {
                    this.OnExpiryDateUtcChanging();
                    this.SendPropertyChanging("ExpiryDateUtc");
                    this._ExpiryDateUtc = value;
                    this.SendPropertyChanged("ExpiryDateUtc");
                    this.OnExpiryDateUtcChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the issuedateutc property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "IssueDateUtc")]
        [XmlElementAttribute(ElementName = "IssueDateUtc", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("IssueDateUtc", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime IssueDateUtc
        {
            get
            {
                return this._IssueDateUtc;
            }
            set
            {
                if ((this._IssueDateUtc != value))
                {
                    this.OnIssueDateUtcChanging();
                    this.SendPropertyChanging("IssueDateUtc");
                    this._IssueDateUtc = value;
                    this.SendPropertyChanged("IssueDateUtc");
                    this.OnIssueDateUtcChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the oauthconsumerid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OAuthConsumerID")]
        [XmlElementAttribute(ElementName = "OAuthConsumerID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("OAuthConsumerID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long OAuthConsumerID
        {
            get
            {
                return this._OAuthConsumerID;
            }
            set
            {
                if ((this._OAuthConsumerID != value))
                {
                    this.OnOAuthConsumerIDChanging();
                    this.SendPropertyChanging("OAuthConsumerID");
                    this._OAuthConsumerID = value;
                    this.SendPropertyChanged("OAuthConsumerID");
                    this.OnOAuthConsumerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the oauthtokenid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OAuthTokenID")]
        [XmlElementAttribute(ElementName = "OAuthTokenID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("OAuthTokenID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long OAuthTokenID
        {
            get
            {
                return this._OAuthTokenID;
            }
            set
            {
                if ((this._OAuthTokenID != value))
                {
                    this.OnOAuthTokenIDChanging();
                    this.SendPropertyChanging("OAuthTokenID");
                    this._OAuthTokenID = value;
                    this.SendPropertyChanged("OAuthTokenID");
                    this.OnOAuthTokenIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the scope property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Scope")]
        [XmlElementAttribute(ElementName = "Scope", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("Scope", DbType = "nvarchar", Length = 500, IsNullable = true)]
        public string Scope
        {
            get
            {
                return this._Scope;
            }
            set
            {
                if ((this._Scope != value))
                {
                    this.OnScopeChanging();
                    this.SendPropertyChanging("Scope");
                    this._Scope = value;
                    this.SendPropertyChanged("Scope");
                    this.OnScopeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the state property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "State")]
        [XmlElementAttribute(ElementName = "State", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("State", DbType = "int", Length = 4, IsNullable = false)]
        public int State
        {
            get
            {
                return this._State;
            }
            set
            {
                if ((this._State != value))
                {
                    this.OnStateChanging();
                    this.SendPropertyChanging("State");
                    this._State = value;
                    this.SendPropertyChanged("State");
                    this.OnStateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the token property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Token")]
        [XmlElementAttribute(ElementName = "Token", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Token", DbType = "nvarchar", Length = -1, IsNullable = false)]
        public string Token
        {
            get
            {
                return this._Token;
            }
            set
            {
                if ((this._Token != value))
                {
                    this.OnTokenChanging();
                    this.SendPropertyChanging("Token");
                    this._Token = value;
                    this.SendPropertyChanged("Token");
                    this.OnTokenChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the tokencallback property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "TokenCallback")]
        [XmlElementAttribute(ElementName = "TokenCallback", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("TokenCallback", DbType = "nvarchar", Length = 4000, IsNullable = true)]
        public string TokenCallback
        {
            get
            {
                return this._TokenCallback;
            }
            set
            {
                if ((this._TokenCallback != value))
                {
                    this.OnTokenCallbackChanging();
                    this.SendPropertyChanging("TokenCallback");
                    this._TokenCallback = value;
                    this.SendPropertyChanged("TokenCallback");
                    this.OnTokenCallbackChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the tokensecret property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "TokenSecret")]
        [XmlElementAttribute(ElementName = "TokenSecret", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("TokenSecret", DbType = "nvarchar", Length = -1, IsNullable = false)]
        public string TokenSecret
        {
            get
            {
                return this._TokenSecret;
            }
            set
            {
                if ((this._TokenSecret != value))
                {
                    this.OnTokenSecretChanging();
                    this.SendPropertyChanging("TokenSecret");
                    this._TokenSecret = value;
                    this.SendPropertyChanged("TokenSecret");
                    this.OnTokenSecretChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the tokentype property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "TokenType")]
        [XmlElementAttribute(ElementName = "TokenType", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("TokenType", DbType = "nvarchar", Length = 50, IsNullable = false)]
        public string TokenType
        {
            get
            {
                return this._TokenType;
            }
            set
            {
                if ((this._TokenType != value))
                {
                    this.OnTokenTypeChanging();
                    this.SendPropertyChanging("TokenType");
                    this._TokenType = value;
                    this.SendPropertyChanged("TokenType");
                    this.OnTokenTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the tokenverifier property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "TokenVerifier")]
        [XmlElementAttribute(ElementName = "TokenVerifier", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("TokenVerifier", DbType = "nvarchar", Length = -1, IsNullable = true)]
        public string TokenVerifier
        {
            get
            {
                return this._TokenVerifier;
            }
            set
            {
                if ((this._TokenVerifier != value))
                {
                    this.OnTokenVerifierChanging();
                    this.SendPropertyChanging("TokenVerifier");
                    this._TokenVerifier = value;
                    this.SendPropertyChanged("TokenVerifier");
                    this.OnTokenVerifierChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the oauthconsumerid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "OAuthConsumer", IsRequired = false)]
        [XmlElementAttribute(ElementName = "OAuthConsumer", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.OAuthConsumer", ReferenceColumnName = "OAuthConsumerID", ColumnName = "OAuthConsumerID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.OAuthConsumer OAuthConsumer
        {
            get
            {
                return this._OAuthConsumer;
            }
            set
            {
                if ((this._OAuthConsumer != value))
                {
                    this._OAuthConsumer = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new oauthtoken data entity.
        /// </summary>
        /// <param name="context">Initial value of Context.</param>
        /// <param name="expiryDateUtc">Initial value of ExpiryDateUtc.</param>
        /// <param name="issueDateUtc">Initial value of IssueDateUtc.</param>
        /// <param name="oAuthConsumerID">Initial value of OAuthConsumerID.</param>
        /// <param name="oAuthTokenID">Initial value of OAuthTokenID.</param>
        /// <param name="state">Initial value of State.</param>
        /// <param name="token">Initial value of Token.</param>
        /// <param name="tokenSecret">Initial value of TokenSecret.</param>
        /// <param name="tokenType">Initial value of TokenType.</param>
        /// <returns>The Data.OAuthToken entity.</returns>
        public static Data.OAuthToken CreateOAuthToken(string context, System.DateTime expiryDateUtc, System.DateTime issueDateUtc, long oAuthConsumerID, long oAuthTokenID, int state, string token, string tokenSecret, string tokenType)
        {
            Data.OAuthToken oAuthToken = new Data.OAuthToken();
            oAuthToken.Context = context;
            oAuthToken.ExpiryDateUtc = expiryDateUtc;
            oAuthToken.IssueDateUtc = issueDateUtc;
            oAuthToken.OAuthConsumerID = oAuthConsumerID;
            oAuthToken.OAuthTokenID = oAuthTokenID;
            oAuthToken.State = state;
            oAuthToken.Token = token;
            oAuthToken.TokenSecret = tokenSecret;
            oAuthToken.TokenType = tokenType;
            return oAuthToken;
        }
    }
    #endregion
    
    #region Profile Data Entity Type
    /// <summary>
    /// The profile data object class.
    /// </summary>
    [DataContractAttribute(Name = "Profile", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.Profile")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class Profile : DataBase
    {
        
        private string _ApplicationName;
        
        private System.Nullable<System.Boolean> _IsAnonymous;
        
        private System.Nullable<System.DateTime> _LastActivityDate;
        
        private System.Nullable<System.DateTime> _LastUpdatedDate;
        
        private long _ProfileID;
        
        private string _Username;
        
        private Data.User[] _UserCollection;
        
        private Data.ProfileValue[] _ProfileValueCollection;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ApplicationName column data entity changed.
        /// </summary>
		partial void OnApplicationNameChanged();

        /// <summary>
        /// On ApplicationName column data entity changing.
        /// </summary>
		partial void OnApplicationNameChanging();

        /// <summary>
        /// On IsAnonymous column data entity changed.
        /// </summary>
		partial void OnIsAnonymousChanged();

        /// <summary>
        /// On IsAnonymous column data entity changing.
        /// </summary>
		partial void OnIsAnonymousChanging();

        /// <summary>
        /// On LastActivityDate column data entity changed.
        /// </summary>
		partial void OnLastActivityDateChanged();

        /// <summary>
        /// On LastActivityDate column data entity changing.
        /// </summary>
		partial void OnLastActivityDateChanging();

        /// <summary>
        /// On LastUpdatedDate column data entity changed.
        /// </summary>
		partial void OnLastUpdatedDateChanged();

        /// <summary>
        /// On LastUpdatedDate column data entity changing.
        /// </summary>
		partial void OnLastUpdatedDateChanging();

        /// <summary>
        /// On ProfileID column data entity changed.
        /// </summary>
		partial void OnProfileIDChanged();

        /// <summary>
        /// On ProfileID column data entity changing.
        /// </summary>
		partial void OnProfileIDChanging();

        /// <summary>
        /// On Username column data entity changed.
        /// </summary>
		partial void OnUsernameChanged();

        /// <summary>
        /// On Username column data entity changing.
        /// </summary>
		partial void OnUsernameChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Profile()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the applicationname property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ApplicationName")]
        [XmlElementAttribute(ElementName = "ApplicationName", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ApplicationName", DbType = "nvarchar", Length = 300, IsNullable = false)]
        public string ApplicationName
        {
            get
            {
                return this._ApplicationName;
            }
            set
            {
                if ((this._ApplicationName != value))
                {
                    this.OnApplicationNameChanging();
                    this.SendPropertyChanging("ApplicationName");
                    this._ApplicationName = value;
                    this.SendPropertyChanged("ApplicationName");
                    this.OnApplicationNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the isanonymous property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "IsAnonymous")]
        [XmlElementAttribute(ElementName = "IsAnonymous", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("IsAnonymous", DbType = "bit", Length = 1, IsNullable = true)]
        public System.Nullable<System.Boolean> IsAnonymous
        {
            get
            {
                return this._IsAnonymous;
            }
            set
            {
                if ((this._IsAnonymous != value))
                {
                    this.OnIsAnonymousChanging();
                    this.SendPropertyChanging("IsAnonymous");
                    this._IsAnonymous = value;
                    this.SendPropertyChanged("IsAnonymous");
                    this.OnIsAnonymousChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the lastactivitydate property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "LastActivityDate")]
        [XmlElementAttribute(ElementName = "LastActivityDate", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("LastActivityDate", DbType = "datetime", Length = 8, IsNullable = true)]
        public System.Nullable<System.DateTime> LastActivityDate
        {
            get
            {
                return this._LastActivityDate;
            }
            set
            {
                if ((this._LastActivityDate != value))
                {
                    this.OnLastActivityDateChanging();
                    this.SendPropertyChanging("LastActivityDate");
                    this._LastActivityDate = value;
                    this.SendPropertyChanged("LastActivityDate");
                    this.OnLastActivityDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the lastupdateddate property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "LastUpdatedDate")]
        [XmlElementAttribute(ElementName = "LastUpdatedDate", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("LastUpdatedDate", DbType = "datetime", Length = 8, IsNullable = true)]
        public System.Nullable<System.DateTime> LastUpdatedDate
        {
            get
            {
                return this._LastUpdatedDate;
            }
            set
            {
                if ((this._LastUpdatedDate != value))
                {
                    this.OnLastUpdatedDateChanging();
                    this.SendPropertyChanging("LastUpdatedDate");
                    this._LastUpdatedDate = value;
                    this.SendPropertyChanged("LastUpdatedDate");
                    this.OnLastUpdatedDateChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the profileid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ProfileID")]
        [XmlElementAttribute(ElementName = "ProfileID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ProfileID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long ProfileID
        {
            get
            {
                return this._ProfileID;
            }
            set
            {
                if ((this._ProfileID != value))
                {
                    this.OnProfileIDChanging();
                    this.SendPropertyChanging("ProfileID");
                    this._ProfileID = value;
                    this.SendPropertyChanged("ProfileID");
                    this.OnProfileIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the username property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Username")]
        [XmlElementAttribute(ElementName = "Username", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Username", DbType = "varchar", Length = 100, IsNullable = false)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if ((this._Username != value))
                {
                    this.OnUsernameChanging();
                    this.SendPropertyChanging("Username");
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }
        #endregion
        
        #region Public Reference Properties
        /// <summary>
        /// Gets sets, the user reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "UserCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.User", ColumnName = "ProfileID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.User[] UserCollection
        {
            get
            {
                return this._UserCollection;
            }
            set
            {
                if ((this._UserCollection != value))
                {
                    this._UserCollection = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the profilevalue reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ProfileValueCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "ProfileValueCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.ProfileValue", ColumnName = "ProfileID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.ProfileValue[] ProfileValueCollection
        {
            get
            {
                return this._ProfileValueCollection;
            }
            set
            {
                if ((this._ProfileValueCollection != value))
                {
                    this._ProfileValueCollection = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new profile data entity.
        /// </summary>
        /// <param name="applicationName">Initial value of ApplicationName.</param>
        /// <param name="profileID">Initial value of ProfileID.</param>
        /// <param name="username">Initial value of Username.</param>
        /// <returns>The Data.Profile entity.</returns>
        public static Data.Profile CreateProfile(string applicationName, long profileID, string username)
        {
            Data.Profile profile = new Data.Profile();
            profile.ApplicationName = applicationName;
            profile.ProfileID = profileID;
            profile.Username = username;
            return profile;
        }
    }
    #endregion
    
    #region ProfileValue Data Entity Type
    /// <summary>
    /// The profilevalue data object class.
    /// </summary>
    [DataContractAttribute(Name = "ProfileValue", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.ProfileValue")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class ProfileValue : DataBase
    {
        
        private long _ProfileID;
        
        private long _ProfileValueID;
        
        private string _PropertyName;
        
        private string _PropertyType;
        
        private string _PropertyValue;
        
        private Data.Profile _Profile;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ProfileID column data entity changed.
        /// </summary>
		partial void OnProfileIDChanged();

        /// <summary>
        /// On ProfileID column data entity changing.
        /// </summary>
		partial void OnProfileIDChanging();

        /// <summary>
        /// On ProfileValueID column data entity changed.
        /// </summary>
		partial void OnProfileValueIDChanged();

        /// <summary>
        /// On ProfileValueID column data entity changing.
        /// </summary>
		partial void OnProfileValueIDChanging();

        /// <summary>
        /// On PropertyName column data entity changed.
        /// </summary>
		partial void OnPropertyNameChanged();

        /// <summary>
        /// On PropertyName column data entity changing.
        /// </summary>
		partial void OnPropertyNameChanging();

        /// <summary>
        /// On PropertyType column data entity changed.
        /// </summary>
		partial void OnPropertyTypeChanged();

        /// <summary>
        /// On PropertyType column data entity changing.
        /// </summary>
		partial void OnPropertyTypeChanging();

        /// <summary>
        /// On PropertyValue column data entity changed.
        /// </summary>
		partial void OnPropertyValueChanged();

        /// <summary>
        /// On PropertyValue column data entity changing.
        /// </summary>
		partial void OnPropertyValueChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ProfileValue()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the profileid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ProfileID")]
        [XmlElementAttribute(ElementName = "ProfileID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ProfileID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long ProfileID
        {
            get
            {
                return this._ProfileID;
            }
            set
            {
                if ((this._ProfileID != value))
                {
                    this.OnProfileIDChanging();
                    this.SendPropertyChanging("ProfileID");
                    this._ProfileID = value;
                    this.SendPropertyChanged("ProfileID");
                    this.OnProfileIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the profilevalueid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ProfileValueID")]
        [XmlElementAttribute(ElementName = "ProfileValueID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ProfileValueID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long ProfileValueID
        {
            get
            {
                return this._ProfileValueID;
            }
            set
            {
                if ((this._ProfileValueID != value))
                {
                    this.OnProfileValueIDChanging();
                    this.SendPropertyChanging("ProfileValueID");
                    this._ProfileValueID = value;
                    this.SendPropertyChanged("ProfileValueID");
                    this.OnProfileValueIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the propertyname property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "PropertyName")]
        [XmlElementAttribute(ElementName = "PropertyName", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("PropertyName", DbType = "varchar", Length = 200, IsNullable = false)]
        public string PropertyName
        {
            get
            {
                return this._PropertyName;
            }
            set
            {
                if ((this._PropertyName != value))
                {
                    this.OnPropertyNameChanging();
                    this.SendPropertyChanging("PropertyName");
                    this._PropertyName = value;
                    this.SendPropertyChanged("PropertyName");
                    this.OnPropertyNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the propertytype property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "PropertyType")]
        [XmlElementAttribute(ElementName = "PropertyType", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("PropertyType", DbType = "varchar", Length = 200, IsNullable = false)]
        public string PropertyType
        {
            get
            {
                return this._PropertyType;
            }
            set
            {
                if ((this._PropertyType != value))
                {
                    this.OnPropertyTypeChanging();
                    this.SendPropertyChanging("PropertyType");
                    this._PropertyType = value;
                    this.SendPropertyChanged("PropertyType");
                    this.OnPropertyTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the propertyvalue property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "PropertyValue")]
        [XmlElementAttribute(ElementName = "PropertyValue", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("PropertyValue", DbType = "nvarchar", Length = -1, IsNullable = false)]
        public string PropertyValue
        {
            get
            {
                return this._PropertyValue;
            }
            set
            {
                if ((this._PropertyValue != value))
                {
                    this.OnPropertyValueChanging();
                    this.SendPropertyChanging("PropertyValue");
                    this._PropertyValue = value;
                    this.SendPropertyChanged("PropertyValue");
                    this.OnPropertyValueChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the profileid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "Profile", IsRequired = false)]
        [XmlElementAttribute(ElementName = "Profile", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Profile", ReferenceColumnName = "ProfileID", ColumnName = "ProfileID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.Profile Profile
        {
            get
            {
                return this._Profile;
            }
            set
            {
                if ((this._Profile != value))
                {
                    this._Profile = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new profilevalue data entity.
        /// </summary>
        /// <param name="profileID">Initial value of ProfileID.</param>
        /// <param name="profileValueID">Initial value of ProfileValueID.</param>
        /// <param name="propertyName">Initial value of PropertyName.</param>
        /// <param name="propertyType">Initial value of PropertyType.</param>
        /// <param name="propertyValue">Initial value of PropertyValue.</param>
        /// <returns>The Data.ProfileValue entity.</returns>
        public static Data.ProfileValue CreateProfileValue(long profileID, long profileValueID, string propertyName, string propertyType, string propertyValue)
        {
            Data.ProfileValue profileValue = new Data.ProfileValue();
            profileValue.ProfileID = profileID;
            profileValue.ProfileValueID = profileValueID;
            profileValue.PropertyName = propertyName;
            profileValue.PropertyType = propertyType;
            profileValue.PropertyValue = propertyValue;
            return profileValue;
        }
    }
    #endregion
    
    #region ContactType Data Entity Type
    /// <summary>
    /// The contacttype data object class.
    /// </summary>
    [DataContractAttribute(Name = "ContactType", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.ContactType")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class ContactType : DataBase
    {
        
        private long _CodeID;
        
        private long _ContactTypeID;
        
        private string _Description;
        
        private string _Name;
        
        private bool _Visible;
        
        private Data.Contact[] _ContactCollection;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On CodeID column data entity changed.
        /// </summary>
		partial void OnCodeIDChanged();

        /// <summary>
        /// On CodeID column data entity changing.
        /// </summary>
		partial void OnCodeIDChanging();

        /// <summary>
        /// On ContactTypeID column data entity changed.
        /// </summary>
		partial void OnContactTypeIDChanged();

        /// <summary>
        /// On ContactTypeID column data entity changing.
        /// </summary>
		partial void OnContactTypeIDChanging();

        /// <summary>
        /// On Description column data entity changed.
        /// </summary>
		partial void OnDescriptionChanged();

        /// <summary>
        /// On Description column data entity changing.
        /// </summary>
		partial void OnDescriptionChanging();

        /// <summary>
        /// On Name column data entity changed.
        /// </summary>
		partial void OnNameChanged();

        /// <summary>
        /// On Name column data entity changing.
        /// </summary>
		partial void OnNameChanging();

        /// <summary>
        /// On Visible column data entity changed.
        /// </summary>
		partial void OnVisibleChanged();

        /// <summary>
        /// On Visible column data entity changing.
        /// </summary>
		partial void OnVisibleChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public ContactType()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the codeid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "CodeID")]
        [XmlElementAttribute(ElementName = "CodeID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("CodeID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long CodeID
        {
            get
            {
                return this._CodeID;
            }
            set
            {
                if ((this._CodeID != value))
                {
                    this.OnCodeIDChanging();
                    this.SendPropertyChanging("CodeID");
                    this._CodeID = value;
                    this.SendPropertyChanged("CodeID");
                    this.OnCodeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the contacttypeid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ContactTypeID")]
        [XmlElementAttribute(ElementName = "ContactTypeID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ContactTypeID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long ContactTypeID
        {
            get
            {
                return this._ContactTypeID;
            }
            set
            {
                if ((this._ContactTypeID != value))
                {
                    this.OnContactTypeIDChanging();
                    this.SendPropertyChanging("ContactTypeID");
                    this._ContactTypeID = value;
                    this.SendPropertyChanged("ContactTypeID");
                    this.OnContactTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the description property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Description")]
        [XmlElementAttribute(ElementName = "Description", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Description", DbType = "varchar", Length = 500, IsNullable = false)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if ((this._Description != value))
                {
                    this.OnDescriptionChanging();
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the name property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Name")]
        [XmlElementAttribute(ElementName = "Name", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Name", DbType = "varchar", Length = 50, IsNullable = false)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if ((this._Name != value))
                {
                    this.OnNameChanging();
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the visible property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Visible")]
        [XmlElementAttribute(ElementName = "Visible", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Visible", DbType = "bit", Length = 1, IsNullable = false)]
        public bool Visible
        {
            get
            {
                return this._Visible;
            }
            set
            {
                if ((this._Visible != value))
                {
                    this.OnVisibleChanging();
                    this.SendPropertyChanging("Visible");
                    this._Visible = value;
                    this.SendPropertyChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }
        #endregion
        
        #region Public Reference Properties
        /// <summary>
        /// Gets sets, the contact reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ContactCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "ContactCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Contact", ColumnName = "ContactTypeID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.Contact[] ContactCollection
        {
            get
            {
                return this._ContactCollection;
            }
            set
            {
                if ((this._ContactCollection != value))
                {
                    this._ContactCollection = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new contacttype data entity.
        /// </summary>
        /// <param name="codeID">Initial value of CodeID.</param>
        /// <param name="contactTypeID">Initial value of ContactTypeID.</param>
        /// <param name="description">Initial value of Description.</param>
        /// <param name="name">Initial value of Name.</param>
        /// <param name="visible">Initial value of Visible.</param>
        /// <returns>The Data.ContactType entity.</returns>
        public static Data.ContactType CreateContactType(long codeID, long contactTypeID, string description, string name, bool visible)
        {
            Data.ContactType contactType = new Data.ContactType();
            contactType.CodeID = codeID;
            contactType.ContactTypeID = contactTypeID;
            contactType.Description = description;
            contactType.Name = name;
            contactType.Visible = visible;
            return contactType;
        }
    }
    #endregion
    
    #region Contact Data Entity Type
    /// <summary>
    /// The contact data object class.
    /// </summary>
    [DataContractAttribute(Name = "Contact", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.Contact")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class Contact : DataBase
    {
        
        private long _ContactID;
        
        private long _ContactTypeID;
        
        private long _UserContactID;
        
        private long _UserID;
        
        private Data.User _User1;
        
        private Data.User _User2;
        
        private Data.ContactType _ContactType;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On ContactID column data entity changed.
        /// </summary>
		partial void OnContactIDChanged();

        /// <summary>
        /// On ContactID column data entity changing.
        /// </summary>
		partial void OnContactIDChanging();

        /// <summary>
        /// On ContactTypeID column data entity changed.
        /// </summary>
		partial void OnContactTypeIDChanged();

        /// <summary>
        /// On ContactTypeID column data entity changing.
        /// </summary>
		partial void OnContactTypeIDChanging();

        /// <summary>
        /// On UserContactID column data entity changed.
        /// </summary>
		partial void OnUserContactIDChanged();

        /// <summary>
        /// On UserContactID column data entity changing.
        /// </summary>
		partial void OnUserContactIDChanging();

        /// <summary>
        /// On UserID column data entity changed.
        /// </summary>
		partial void OnUserIDChanged();

        /// <summary>
        /// On UserID column data entity changing.
        /// </summary>
		partial void OnUserIDChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Contact()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the contactid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ContactID")]
        [XmlElementAttribute(ElementName = "ContactID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ContactID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long ContactID
        {
            get
            {
                return this._ContactID;
            }
            set
            {
                if ((this._ContactID != value))
                {
                    this.OnContactIDChanging();
                    this.SendPropertyChanging("ContactID");
                    this._ContactID = value;
                    this.SendPropertyChanged("ContactID");
                    this.OnContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the contacttypeid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ContactTypeID")]
        [XmlElementAttribute(ElementName = "ContactTypeID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ContactTypeID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long ContactTypeID
        {
            get
            {
                return this._ContactTypeID;
            }
            set
            {
                if ((this._ContactTypeID != value))
                {
                    this.OnContactTypeIDChanging();
                    this.SendPropertyChanging("ContactTypeID");
                    this._ContactTypeID = value;
                    this.SendPropertyChanged("ContactTypeID");
                    this.OnContactTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the usercontactid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserContactID")]
        [XmlElementAttribute(ElementName = "UserContactID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("UserContactID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long UserContactID
        {
            get
            {
                return this._UserContactID;
            }
            set
            {
                if ((this._UserContactID != value))
                {
                    this.OnUserContactIDChanging();
                    this.SendPropertyChanging("UserContactID");
                    this._UserContactID = value;
                    this.SendPropertyChanged("UserContactID");
                    this.OnUserContactIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the userid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "UserID")]
        [XmlElementAttribute(ElementName = "UserID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("UserID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long UserID
        {
            get
            {
                return this._UserID;
            }
            set
            {
                if ((this._UserID != value))
                {
                    this.OnUserIDChanging();
                    this.SendPropertyChanging("UserID");
                    this._UserID = value;
                    this.SendPropertyChanged("UserID");
                    this.OnUserIDChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the userid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "User1", IsRequired = false)]
        [XmlElementAttribute(ElementName = "User1", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.User", ReferenceColumnName = "UserID", ColumnName = "UserID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.User User1
        {
            get
            {
                return this._User1;
            }
            set
            {
                if ((this._User1 != value))
                {
                    this._User1 = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the usercontactid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "User2", IsRequired = false)]
        [XmlElementAttribute(ElementName = "User2", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.User", ReferenceColumnName = "UserID", ColumnName = "UserContactID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.User User2
        {
            get
            {
                return this._User2;
            }
            set
            {
                if ((this._User2 != value))
                {
                    this._User2 = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the contacttypeid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "ContactType", IsRequired = false)]
        [XmlElementAttribute(ElementName = "ContactType", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.ContactType", ReferenceColumnName = "ContactTypeID", ColumnName = "ContactTypeID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.ContactType ContactType
        {
            get
            {
                return this._ContactType;
            }
            set
            {
                if ((this._ContactType != value))
                {
                    this._ContactType = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new contact data entity.
        /// </summary>
        /// <param name="contactID">Initial value of ContactID.</param>
        /// <param name="contactTypeID">Initial value of ContactTypeID.</param>
        /// <param name="userContactID">Initial value of UserContactID.</param>
        /// <param name="userID">Initial value of UserID.</param>
        /// <returns>The Data.Contact entity.</returns>
        public static Data.Contact CreateContact(long contactID, long contactTypeID, long userContactID, long userID)
        {
            Data.Contact contact = new Data.Contact();
            contact.ContactID = contactID;
            contact.ContactTypeID = contactTypeID;
            contact.UserContactID = userContactID;
            contact.UserID = userID;
            return contact;
        }
    }
    #endregion
    
    #region Client Data Entity Type
    /// <summary>
    /// The client data object class.
    /// </summary>
    [DataContractAttribute(Name = "Client", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.Client")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class Client : DataBase
    {
        
        private string _Callback;
        
        private long _ClientID;
        
        private string _ClientIdentifier;
        
        private string _ClientSecret;
        
        private long _ClientType;
        
        private string _FullName;
        
        private string _OpenIDClaimedIdentifier;
        
        private string _OpenIDFriendlyIdentifier;
        
        private Data.OAuthConsumer[] _OAuthConsumerCollection;
        
        private Data.ClientAuthorization[] _ClientAuthorizationCollection;
        
        private Data.SymmetricCryptoKey[] _SymmetricCryptoKeyCollection;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On Callback column data entity changed.
        /// </summary>
		partial void OnCallbackChanged();

        /// <summary>
        /// On Callback column data entity changing.
        /// </summary>
		partial void OnCallbackChanging();

        /// <summary>
        /// On ClientID column data entity changed.
        /// </summary>
		partial void OnClientIDChanged();

        /// <summary>
        /// On ClientID column data entity changing.
        /// </summary>
		partial void OnClientIDChanging();

        /// <summary>
        /// On ClientIdentifier column data entity changed.
        /// </summary>
		partial void OnClientIdentifierChanged();

        /// <summary>
        /// On ClientIdentifier column data entity changing.
        /// </summary>
		partial void OnClientIdentifierChanging();

        /// <summary>
        /// On ClientSecret column data entity changed.
        /// </summary>
		partial void OnClientSecretChanged();

        /// <summary>
        /// On ClientSecret column data entity changing.
        /// </summary>
		partial void OnClientSecretChanging();

        /// <summary>
        /// On ClientType column data entity changed.
        /// </summary>
		partial void OnClientTypeChanged();

        /// <summary>
        /// On ClientType column data entity changing.
        /// </summary>
		partial void OnClientTypeChanging();

        /// <summary>
        /// On FullName column data entity changed.
        /// </summary>
		partial void OnFullNameChanged();

        /// <summary>
        /// On FullName column data entity changing.
        /// </summary>
		partial void OnFullNameChanging();

        /// <summary>
        /// On OpenIDClaimedIdentifier column data entity changed.
        /// </summary>
		partial void OnOpenIDClaimedIdentifierChanged();

        /// <summary>
        /// On OpenIDClaimedIdentifier column data entity changing.
        /// </summary>
		partial void OnOpenIDClaimedIdentifierChanging();

        /// <summary>
        /// On OpenIDFriendlyIdentifier column data entity changed.
        /// </summary>
		partial void OnOpenIDFriendlyIdentifierChanged();

        /// <summary>
        /// On OpenIDFriendlyIdentifier column data entity changing.
        /// </summary>
		partial void OnOpenIDFriendlyIdentifierChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Client()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the callback property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Callback")]
        [XmlElementAttribute(ElementName = "Callback", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("Callback", DbType = "nvarchar", Length = 500, IsNullable = true)]
        public string Callback
        {
            get
            {
                return this._Callback;
            }
            set
            {
                if ((this._Callback != value))
                {
                    this.OnCallbackChanging();
                    this.SendPropertyChanging("Callback");
                    this._Callback = value;
                    this.SendPropertyChanged("Callback");
                    this.OnCallbackChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientID")]
        [XmlElementAttribute(ElementName = "ClientID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ClientID", IsPrimaryKey = true, IsAutoGenerated = true, DbType = "bigint", Length = 8, IsNullable = false)]
        public long ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this.OnClientIDChanging();
                    this.SendPropertyChanging("ClientID");
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientidentifier property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientIdentifier")]
        [XmlElementAttribute(ElementName = "ClientIdentifier", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ClientIdentifier", DbType = "nvarchar", Length = 100, IsNullable = false)]
        public string ClientIdentifier
        {
            get
            {
                return this._ClientIdentifier;
            }
            set
            {
                if ((this._ClientIdentifier != value))
                {
                    this.OnClientIdentifierChanging();
                    this.SendPropertyChanging("ClientIdentifier");
                    this._ClientIdentifier = value;
                    this.SendPropertyChanged("ClientIdentifier");
                    this.OnClientIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientsecret property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientSecret")]
        [XmlElementAttribute(ElementName = "ClientSecret", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("ClientSecret", DbType = "nvarchar", Length = 100, IsNullable = true)]
        public string ClientSecret
        {
            get
            {
                return this._ClientSecret;
            }
            set
            {
                if ((this._ClientSecret != value))
                {
                    this.OnClientSecretChanging();
                    this.SendPropertyChanging("ClientSecret");
                    this._ClientSecret = value;
                    this.SendPropertyChanged("ClientSecret");
                    this.OnClientSecretChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clienttype property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientType")]
        [XmlElementAttribute(ElementName = "ClientType", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ClientType", DbType = "bigint", Length = 8, IsNullable = false)]
        public long ClientType
        {
            get
            {
                return this._ClientType;
            }
            set
            {
                if ((this._ClientType != value))
                {
                    this.OnClientTypeChanging();
                    this.SendPropertyChanging("ClientType");
                    this._ClientType = value;
                    this.SendPropertyChanged("ClientType");
                    this.OnClientTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the fullname property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "FullName")]
        [XmlElementAttribute(ElementName = "FullName", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("FullName", DbType = "nvarchar", Length = 500, IsNullable = false)]
        public string FullName
        {
            get
            {
                return this._FullName;
            }
            set
            {
                if ((this._FullName != value))
                {
                    this.OnFullNameChanging();
                    this.SendPropertyChanging("FullName");
                    this._FullName = value;
                    this.SendPropertyChanged("FullName");
                    this.OnFullNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the openidclaimedidentifier property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OpenIDClaimedIdentifier")]
        [XmlElementAttribute(ElementName = "OpenIDClaimedIdentifier", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("OpenIDClaimedIdentifier", DbType = "nvarchar", Length = 150, IsNullable = false)]
        public string OpenIDClaimedIdentifier
        {
            get
            {
                return this._OpenIDClaimedIdentifier;
            }
            set
            {
                if ((this._OpenIDClaimedIdentifier != value))
                {
                    this.OnOpenIDClaimedIdentifierChanging();
                    this.SendPropertyChanging("OpenIDClaimedIdentifier");
                    this._OpenIDClaimedIdentifier = value;
                    this.SendPropertyChanged("OpenIDClaimedIdentifier");
                    this.OnOpenIDClaimedIdentifierChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the openidfriendlyidentifier property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OpenIDFriendlyIdentifier")]
        [XmlElementAttribute(ElementName = "OpenIDFriendlyIdentifier", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("OpenIDFriendlyIdentifier", DbType = "nvarchar", Length = 150, IsNullable = true)]
        public string OpenIDFriendlyIdentifier
        {
            get
            {
                return this._OpenIDFriendlyIdentifier;
            }
            set
            {
                if ((this._OpenIDFriendlyIdentifier != value))
                {
                    this.OnOpenIDFriendlyIdentifierChanging();
                    this.SendPropertyChanging("OpenIDFriendlyIdentifier");
                    this._OpenIDFriendlyIdentifier = value;
                    this.SendPropertyChanged("OpenIDFriendlyIdentifier");
                    this.OnOpenIDFriendlyIdentifierChanged();
                }
            }
        }
        #endregion
        
        #region Public Reference Properties
        /// <summary>
        /// Gets sets, the oauthconsumer reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OAuthConsumerCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "OAuthConsumerCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.OAuthConsumer", ColumnName = "ClientID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.OAuthConsumer[] OAuthConsumerCollection
        {
            get
            {
                return this._OAuthConsumerCollection;
            }
            set
            {
                if ((this._OAuthConsumerCollection != value))
                {
                    this._OAuthConsumerCollection = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientauthorization reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientAuthorizationCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "ClientAuthorizationCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.ClientAuthorization", ColumnName = "ClientID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.ClientAuthorization[] ClientAuthorizationCollection
        {
            get
            {
                return this._ClientAuthorizationCollection;
            }
            set
            {
                if ((this._ClientAuthorizationCollection != value))
                {
                    this._ClientAuthorizationCollection = value;
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the symmetriccryptokey reference property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "SymmetricCryptoKeyCollection", IsRequired = false)]
        [XmlArrayAttribute(ElementName = "SymmetricCryptoKeyCollection", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.SymmetricCryptoKey", ColumnName = "ClientID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = false)]
        public Data.SymmetricCryptoKey[] SymmetricCryptoKeyCollection
        {
            get
            {
                return this._SymmetricCryptoKeyCollection;
            }
            set
            {
                if ((this._SymmetricCryptoKeyCollection != value))
                {
                    this._SymmetricCryptoKeyCollection = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new client data entity.
        /// </summary>
        /// <param name="clientID">Initial value of ClientID.</param>
        /// <param name="clientIdentifier">Initial value of ClientIdentifier.</param>
        /// <param name="clientType">Initial value of ClientType.</param>
        /// <param name="fullName">Initial value of FullName.</param>
        /// <param name="openIDClaimedIdentifier">Initial value of OpenIDClaimedIdentifier.</param>
        /// <returns>The Data.Client entity.</returns>
        public static Data.Client CreateClient(long clientID, string clientIdentifier, long clientType, string fullName, string openIDClaimedIdentifier)
        {
            Data.Client client = new Data.Client();
            client.ClientID = clientID;
            client.ClientIdentifier = clientIdentifier;
            client.ClientType = clientType;
            client.FullName = fullName;
            client.OpenIDClaimedIdentifier = openIDClaimedIdentifier;
            return client;
        }
    }
    #endregion
    
    #region SymmetricCryptoKey Data Entity Type
    /// <summary>
    /// The symmetriccryptokey data object class.
    /// </summary>
    [DataContractAttribute(Name = "SymmetricCryptoKey", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.SymmetricCryptoKey")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class SymmetricCryptoKey : DataBase
    {
        
        private string _Bucket;
        
        private string _CertificatePath;
        
        private long _ClientID;
        
        private System.DateTime _ExpiresUtc;
        
        private string _Handle;
        
        private byte[] _Secret;
        
        private Data.Client _Client;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On Bucket column data entity changed.
        /// </summary>
		partial void OnBucketChanged();

        /// <summary>
        /// On Bucket column data entity changing.
        /// </summary>
		partial void OnBucketChanging();

        /// <summary>
        /// On CertificatePath column data entity changed.
        /// </summary>
		partial void OnCertificatePathChanged();

        /// <summary>
        /// On CertificatePath column data entity changing.
        /// </summary>
		partial void OnCertificatePathChanging();

        /// <summary>
        /// On ClientID column data entity changed.
        /// </summary>
		partial void OnClientIDChanged();

        /// <summary>
        /// On ClientID column data entity changing.
        /// </summary>
		partial void OnClientIDChanging();

        /// <summary>
        /// On ExpiresUtc column data entity changed.
        /// </summary>
		partial void OnExpiresUtcChanged();

        /// <summary>
        /// On ExpiresUtc column data entity changing.
        /// </summary>
		partial void OnExpiresUtcChanging();

        /// <summary>
        /// On Handle column data entity changed.
        /// </summary>
		partial void OnHandleChanged();

        /// <summary>
        /// On Handle column data entity changing.
        /// </summary>
		partial void OnHandleChanging();

        /// <summary>
        /// On Secret column data entity changed.
        /// </summary>
		partial void OnSecretChanged();

        /// <summary>
        /// On Secret column data entity changing.
        /// </summary>
		partial void OnSecretChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public SymmetricCryptoKey()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the bucket property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Bucket")]
        [XmlElementAttribute(ElementName = "Bucket", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Bucket", IsPrimaryKey = true, DbType = "nvarchar", Length = 200, IsNullable = false)]
        public string Bucket
        {
            get
            {
                return this._Bucket;
            }
            set
            {
                if ((this._Bucket != value))
                {
                    this.OnBucketChanging();
                    this.SendPropertyChanging("Bucket");
                    this._Bucket = value;
                    this.SendPropertyChanged("Bucket");
                    this.OnBucketChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the certificatepath property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "CertificatePath")]
        [XmlElementAttribute(ElementName = "CertificatePath", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnAttribute("CertificatePath", DbType = "nvarchar", Length = -1, IsNullable = true)]
        public string CertificatePath
        {
            get
            {
                return this._CertificatePath;
            }
            set
            {
                if ((this._CertificatePath != value))
                {
                    this.OnCertificatePathChanging();
                    this.SendPropertyChanging("CertificatePath");
                    this._CertificatePath = value;
                    this.SendPropertyChanged("CertificatePath");
                    this.OnCertificatePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the clientid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ClientID")]
        [XmlElementAttribute(ElementName = "ClientID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ClientID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long ClientID
        {
            get
            {
                return this._ClientID;
            }
            set
            {
                if ((this._ClientID != value))
                {
                    this.OnClientIDChanging();
                    this.SendPropertyChanging("ClientID");
                    this._ClientID = value;
                    this.SendPropertyChanged("ClientID");
                    this.OnClientIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the expiresutc property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "ExpiresUtc")]
        [XmlElementAttribute(ElementName = "ExpiresUtc", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("ExpiresUtc", DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime ExpiresUtc
        {
            get
            {
                return this._ExpiresUtc;
            }
            set
            {
                if ((this._ExpiresUtc != value))
                {
                    this.OnExpiresUtcChanging();
                    this.SendPropertyChanging("ExpiresUtc");
                    this._ExpiresUtc = value;
                    this.SendPropertyChanged("ExpiresUtc");
                    this.OnExpiresUtcChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the handle property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Handle")]
        [XmlElementAttribute(ElementName = "Handle", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Handle", IsPrimaryKey = true, DbType = "nvarchar", Length = 200, IsNullable = false)]
        public string Handle
        {
            get
            {
                return this._Handle;
            }
            set
            {
                if ((this._Handle != value))
                {
                    this.OnHandleChanging();
                    this.SendPropertyChanging("Handle");
                    this._Handle = value;
                    this.SendPropertyChanged("Handle");
                    this.OnHandleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the secret property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Secret")]
        [XmlArrayAttribute(ElementName = "Secret", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Secret", DbType = "varbinary", Length = 8000, IsNullable = false)]
        public byte[] Secret
        {
            get
            {
                return this._Secret;
            }
            set
            {
                if ((this._Secret != value))
                {
                    this.OnSecretChanging();
                    this.SendPropertyChanging("Secret");
                    this._Secret = value;
                    this.SendPropertyChanged("Secret");
                    this.OnSecretChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the clientid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "Client", IsRequired = false)]
        [XmlElementAttribute(ElementName = "Client", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.Client", ReferenceColumnName = "ClientID", ColumnName = "ClientID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.Client Client
        {
            get
            {
                return this._Client;
            }
            set
            {
                if ((this._Client != value))
                {
                    this._Client = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new symmetriccryptokey data entity.
        /// </summary>
        /// <param name="bucket">Initial value of Bucket.</param>
        /// <param name="clientID">Initial value of ClientID.</param>
        /// <param name="expiresUtc">Initial value of ExpiresUtc.</param>
        /// <param name="handle">Initial value of Handle.</param>
        /// <param name="secret">Initial value of Secret.</param>
        /// <returns>The Data.SymmetricCryptoKey entity.</returns>
        public static Data.SymmetricCryptoKey CreateSymmetricCryptoKey(string bucket, long clientID, System.DateTime expiresUtc, string handle, byte[] secret)
        {
            Data.SymmetricCryptoKey symmetricCryptoKey = new Data.SymmetricCryptoKey();
            symmetricCryptoKey.Bucket = bucket;
            symmetricCryptoKey.ClientID = clientID;
            symmetricCryptoKey.ExpiresUtc = expiresUtc;
            symmetricCryptoKey.Handle = handle;
            symmetricCryptoKey.Secret = secret;
            return symmetricCryptoKey;
        }
    }
    #endregion
    
    #region Nonce Data Entity Type
    /// <summary>
    /// The nonce data object class.
    /// </summary>
    [DataContractAttribute(Name = "Nonce", IsReference = true)]
    [SerializableAttribute()]
    [DataTableAttribute("dbo.Nonce")]
    [DatabaseAttribute("CloudInteraction")]
    [KnownTypeAttribute(typeof(DataBase))]
    public partial class Nonce : DataBase
    {
        
        private string _Code;
        
        private string _Context;
        
        private long _OAuthConsumerID;
        
        private System.DateTime _Timestamp;
        
        private Data.OAuthConsumer _OAuthConsumer;
        
        #region Extensibility Method Definitions
        /// <summary>
        /// On create data entity.
        /// </summary>
		partial void OnCreated();

        /// <summary>
        /// On load data entity.
        /// </summary>
		partial void OnLoaded();

        /// <summary>
        /// On Code column data entity changed.
        /// </summary>
		partial void OnCodeChanged();

        /// <summary>
        /// On Code column data entity changing.
        /// </summary>
		partial void OnCodeChanging();

        /// <summary>
        /// On Context column data entity changed.
        /// </summary>
		partial void OnContextChanged();

        /// <summary>
        /// On Context column data entity changing.
        /// </summary>
		partial void OnContextChanging();

        /// <summary>
        /// On OAuthConsumerID column data entity changed.
        /// </summary>
		partial void OnOAuthConsumerIDChanged();

        /// <summary>
        /// On OAuthConsumerID column data entity changing.
        /// </summary>
		partial void OnOAuthConsumerIDChanging();

        /// <summary>
        /// On Timestamp column data entity changed.
        /// </summary>
		partial void OnTimestampChanged();

        /// <summary>
        /// On Timestamp column data entity changing.
        /// </summary>
		partial void OnTimestampChanging();

		#endregion
        
        /// <summary>
        /// Default constructor.
        /// </summary>
        public Nonce()
        {
            OnCreated();
        }
        
        #region Public Column Properties
        /// <summary>
        /// Gets sets, the code property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Code")]
        [XmlElementAttribute(ElementName = "Code", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Code", IsPrimaryKey = true, DbType = "nvarchar", Length = 200, IsNullable = false)]
        public string Code
        {
            get
            {
                return this._Code;
            }
            set
            {
                if ((this._Code != value))
                {
                    this.OnCodeChanging();
                    this.SendPropertyChanging("Code");
                    this._Code = value;
                    this.SendPropertyChanged("Code");
                    this.OnCodeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the context property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Context")]
        [XmlElementAttribute(ElementName = "Context", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Context", IsPrimaryKey = true, DbType = "nvarchar", Length = 200, IsNullable = false)]
        public string Context
        {
            get
            {
                return this._Context;
            }
            set
            {
                if ((this._Context != value))
                {
                    this.OnContextChanging();
                    this.SendPropertyChanging("Context");
                    this._Context = value;
                    this.SendPropertyChanged("Context");
                    this.OnContextChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the oauthconsumerid property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "OAuthConsumerID")]
        [XmlElementAttribute(ElementName = "OAuthConsumerID", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("OAuthConsumerID", DbType = "bigint", Length = 8, IsNullable = false)]
        public long OAuthConsumerID
        {
            get
            {
                return this._OAuthConsumerID;
            }
            set
            {
                if ((this._OAuthConsumerID != value))
                {
                    this.OnOAuthConsumerIDChanging();
                    this.SendPropertyChanging("OAuthConsumerID");
                    this._OAuthConsumerID = value;
                    this.SendPropertyChanged("OAuthConsumerID");
                    this.OnOAuthConsumerIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets sets, the timestamp property for the object.
        /// </summary>
        [DataMemberAttribute(Name = "Timestamp")]
        [XmlElementAttribute(ElementName = "Timestamp", IsNullable = false)]
        [SoapElementAttribute(IsNullable = false)]
        [DataColumnAttribute("Timestamp", IsPrimaryKey = true, DbType = "datetime", Length = 8, IsNullable = false)]
        public System.DateTime Timestamp
        {
            get
            {
                return this._Timestamp;
            }
            set
            {
                if ((this._Timestamp != value))
                {
                    this.OnTimestampChanging();
                    this.SendPropertyChanging("Timestamp");
                    this._Timestamp = value;
                    this.SendPropertyChanged("Timestamp");
                    this.OnTimestampChanged();
                }
            }
        }
        #endregion
        
        #region Public Foreign Key Properties
        /// <summary>
        /// Gets sets, the oauthconsumerid foreign key property for the object.
        /// </summary>
        [EditorAttribute(typeof(DataObjectEditor), typeof(UITypeEditor))]
        [DataMemberAttribute(Name = "OAuthConsumer", IsRequired = false)]
        [XmlElementAttribute(ElementName = "OAuthConsumer", IsNullable = true)]
        [SoapElementAttribute(IsNullable = true)]
        [DataColumnForeignKeyAttribute("dbo.OAuthConsumer", ReferenceColumnName = "OAuthConsumerID", ColumnName = "OAuthConsumerID", ColumnType = "bigint", Length = 8, IsNullable = true, IsReference = true)]
        public Data.OAuthConsumer OAuthConsumer
        {
            get
            {
                return this._OAuthConsumer;
            }
            set
            {
                if ((this._OAuthConsumer != value))
                {
                    this._OAuthConsumer = value;
                }
            }
        }
        #endregion
        
        /// <summary>
        /// Create a new nonce data entity.
        /// </summary>
        /// <param name="code">Initial value of Code.</param>
        /// <param name="context">Initial value of Context.</param>
        /// <param name="oAuthConsumerID">Initial value of OAuthConsumerID.</param>
        /// <param name="timestamp">Initial value of Timestamp.</param>
        /// <returns>The Data.Nonce entity.</returns>
        public static Data.Nonce CreateNonce(string code, string context, long oAuthConsumerID, System.DateTime timestamp)
        {
            Data.Nonce nonce = new Data.Nonce();
            nonce.Code = code;
            nonce.Context = context;
            nonce.OAuthConsumerID = oAuthConsumerID;
            nonce.Timestamp = timestamp;
            return nonce;
        }
    }
    #endregion
}
